<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2015-2017 OpenCB
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.opencb.opencga</groupId>
        <artifactId>opencga</artifactId>
        <version>2.5.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <artifactId>opencga-app</artifactId>
    <packaging>jar</packaging>

    <properties>
        <build.dir>${project.basedir}/../build</build.dir>
        <app.dir>${project.basedir}/app</app.dir>
        <sonar.skip>true</sonar.skip>
        <dep.jline.version>3.12.1</dep.jline.version>
        <opencga.client.dir>opencga-client-${project.parent.version}</opencga.client.dir>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.opencb.opencga</groupId>
            <artifactId>opencga-catalog</artifactId>
        </dependency>
        <dependency>
            <groupId>org.opencb.opencga</groupId>
            <artifactId>opencga-analysis</artifactId>
        </dependency>
        <dependency>
            <groupId>org.opencb.opencga</groupId>
            <artifactId>opencga-master</artifactId>
            <version>${project.parent.version}</version>
        </dependency>
        <dependency>
            <groupId>org.opencb.opencga</groupId>
            <artifactId>opencga-storage-app</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.opencb.opencga</groupId>
                    <artifactId>opencga-storage-benchmark</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.opencb.opencga</groupId>
            <artifactId>opencga-storage-mongodb</artifactId>
            <version>${project.parent.version}</version>
        </dependency>
        <dependency>
            <groupId>org.opencb.opencga</groupId>
            <artifactId>opencga-client</artifactId>
        </dependency>
        <!--        <dependency>-->
        <!--            <groupId>org.opencb.opencga</groupId>-->
        <!--            <artifactId>opencga-test</artifactId>-->
        <!--            <version>${project.parent.version}</version>-->
        <!--            <type>pom</type>-->
        <!--        </dependency>-->
        <dependency>
            <groupId>org.opencb.opencga</groupId>
            <artifactId>opencga-server</artifactId>
            <version>${project.parent.version}</version>
            <!--<type>war</type>-->
        </dependency>

        <!--        <dependency>-->
        <!--            <groupId>com.beust</groupId>-->
        <!--            <artifactId>jcommander</artifactId>-->
        <!--            <version>1.82</version>-->
        <!--        </dependency>-->
        <!--        <dependency>-->
        <!--            <groupId>org.glassfish.jersey.containers</groupId>-->
        <!--            <artifactId>jersey-container-servlet-core</artifactId>-->
        <!--            <version>${jersey.version}</version>-->
        <!--        </dependency>-->
        <dependency>
            <groupId>org.opencb.opencga</groupId>
            <artifactId>opencga-analysis</artifactId>
            <version>${project.parent.version}</version>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.opencb.opencga</groupId>
            <artifactId>opencga-storage-core</artifactId>
            <version>${project.parent.version}</version>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.opencb.opencga</groupId>
            <artifactId>opencga-catalog</artifactId>
            <version>${project.parent.version}</version>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>
        <!--JLINE Terminal dependencies-->
        <dependency>
            <groupId>org.jline</groupId>
            <artifactId>jline-reader</artifactId>
            <version>${dep.jline.version}</version>
        </dependency>

        <dependency>
            <groupId>org.jline</groupId>
            <artifactId>jline-terminal</artifactId>
            <version>${dep.jline.version}</version>
        </dependency>
        <dependency>
            <groupId>org.jline</groupId>
            <artifactId>jline-terminal-jna</artifactId>
            <version>${dep.jline.version}</version>
            <scope>runtime</scope>
        </dependency>
    </dependencies>

    <build>
        <finalName>opencga-app</finalName>
        <sourceDirectory>src/main/java</sourceDirectory>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <targetPath>${project.basedir}/target/clients/R</targetPath>
                <includes>
                    <include>compileR.sh</include>
                </includes>
            </resource>
            <resource>
                <directory>app/cloud/docker/compose</directory>
                <filtering>true</filtering>
                <includes>
                    <include>docker-compose.yml</include>
                </includes>
                <targetPath>${project.basedir}/target/docker-compose</targetPath>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>appassembler-maven-plugin</artifactId>
                <version>1.10</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>assemble</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <repositoryName>libs</repositoryName>
                    <repositoryLayout>flat</repositoryLayout>
                    <useWildcardClassPath>false</useWildcardClassPath>
                    <!--By default, "etc".-->
                    <configurationDirectory>conf</configurationDirectory>
                    <!--Do we need to include the configuration folder in the classpath?-->
                    <includeConfigurationDirectoryInClasspath>false</includeConfigurationDirectoryInClasspath>
                    <environmentSetupFileName>../conf/${opencga.env.file}</environmentSetupFileName>
                    <programs>
                        <program>
                            <id>opencga.sh</id>
                            <mainClass>org.opencb.opencga.app.cli.main.OpencgaMain</mainClass>
                            <platforms>
                                <platform>unix</platform>
                            </platforms>
                        </program>
                        <program>
                            <id>opencga-admin.sh</id>
                            <mainClass>org.opencb.opencga.app.cli.admin.AdminMain</mainClass>
                            <platforms>
                                <platform>unix</platform>
                            </platforms>
                        </program>
                        <program>
                            <id>opencga-internal.sh</id>
                            <mainClass>org.opencb.opencga.app.cli.internal.InternalMain</mainClass>
                            <platforms>
                                <platform>unix</platform>
                            </platforms>
                        </program>
                        <program>
                            <id>opencga-clicompletion.sh</id>
                            <mainClass>org.opencb.opencga.app.cli.utils.CliCompletionMain</mainClass>
                            <platforms>
                                <platform>unix</platform>
                            </platforms>
                        </program>
                    </programs>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.8</version>
                <executions>
                    <execution>
                        <id>clean-libs</id>
                        <phase>clean</phase>
                        <configuration>
                            <target>
                                <echo>Preparing ${build.dir} folder</echo>
                                <exec executable="rm">
                                    <arg value="-rf"/>
                                    <arg value="${build.dir}"/>
                                </exec>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>install-app</id>
                        <phase>install</phase>
                        <configuration>
                            <target>
                                <echo>Preparing ${build.dir} folder</echo>
                                <exec executable="rm">
                                    <arg value="-rf"/>
                                    <arg value="${build.dir}"/>
                                </exec>

                                <exec executable="mkdir">
                                    <arg value="-p"/>
                                    <arg value="${build.dir}/bin/utils"/>
                                    <arg value="${build.dir}/clients"/>
                                    <arg value="${build.dir}/conf"/>
                                    <arg value="${build.dir}/test"/>
                                    <!--
                                    <arg value="${build.dir}/misc/solr/${solr.configset.name}-${project.parent.version}"/>
                                    -->
                                </exec>

                                <echo>Copying to ${build.dir}</echo>
                                <exec executable="cp">
                                    <arg value="-r"/>
                                    <arg value="${app.dir}/analysis"/>
                                    <arg value="${app.dir}/cloud"/>
                                    <arg value="${app.dir}/cloud/docker/.dockerignore"/>
                                    <arg value="${app.dir}/conf"/>
                                    <arg value="${app.dir}/misc"/>
                                    <arg value="${app.dir}/monitor"/>
                                    <arg value="${project.basedir}/target/appassembler/libs"/>
                                    <arg value="${project.basedir}/../LICENSE"/>
                                    <arg value="${project.basedir}/../README.md"/>
                                    <arg value="${build.dir}"/>
                                </exec>

                                <echo>Copying docker-compose files</echo>
                                <exec executable="cp">
                                    <arg value="${project.basedir}/target/docker-compose/docker-compose.yml"/>
                                    <arg value="${build.dir}/cloud/docker/compose"/>
                                </exec>
                                <exec executable="cp">
                                    <arg value="${project.basedir}/../opencga-core/src/main/resources/log4j2.xml"/>
                                    <arg value="${project.basedir}/../opencga-core/src/main/resources/log4j2.internal.xml"/>
                                    <arg value="${project.basedir}/../opencga-core/src/main/resources/log4j2.service.xml"/>
                                    <arg value="${build.dir}/cloud/docker/compose/conf"/>
                                </exec>

                                <exec executable="cp">
                                    <arg value="-r"/>
                                    <arg value="${project.basedir}/../opencga-analysis/src/main/R/"/>
                                    <arg value="${build.dir}/analysis"/>
                                </exec>

                                <echo>Copying command lines and completion scripts to ${build.dir}/bin and
                                    ${build.dir}/completion
                                </echo>
                                <exec executable="cp">
                                    <arg value="${project.basedir}/target/appassembler/bin/opencga.sh"/>
                                    <arg value="${project.basedir}/target/appassembler/bin/opencga-admin.sh"/>
                                    <arg value="${project.basedir}/target/appassembler/bin/opencga-internal.sh"/>
                                    <arg value="${build.dir}/bin"/>
                                </exec>
                                <exec executable="cp">
                                    <arg value="${project.basedir}/target/appassembler/bin/opencga-clicompletion.sh"/>
                                    <arg value="${build.dir}/bin/utils"/>
                                </exec>
                                <exec executable="${project.basedir}/target/appassembler/bin/opencga-clicompletion.sh">
                                    <arg value="${build.dir}/misc/completion"/>
                                </exec>

                                <exec executable="mkdir">
                                    <arg value="${build.dir}/misc/git"/>
                                </exec>
                                <exec executable="cp">
                                    <arg value="${project.basedir}/../opencga-core/target/generated-resources/org/opencb/opencga/core/git.properties"/>
                                    <arg value="${build.dir}/misc/git"/>
                                </exec>

                                <echo>Copying Python and R to ${build.dir}/clients</echo>
                                <exec executable="cp">
                                    <arg value="-r"/>
                                    <arg value="${project.basedir}/../opencga-client/src/main/python"/>
                                    <arg value="${build.dir}/clients"/>
                                </exec>

                                <exec executable="sed">
                                    <arg value="-i"/>
                                    <arg value="s/PYOPENCGA_VERSION/${pyopencga.version}/"/>
                                    <arg value="${build.dir}/clients/python/setup.py"/>
                                </exec>
                                <exec executable="cp">
                                    <arg value="-r"/>
                                    <arg value="${project.basedir}/../opencga-client/src/main/R"/>
                                    <arg value="${build.dir}/clients"/>
                                </exec>
                                <!-- We need to read DESCRIPTION from target folder because we have renamed the version -->
                                <exec executable="cp">
                                    <arg value="${project.basedir}/../opencga-client/target/classes/DESCRIPTION"/>
                                    <arg value="${build.dir}/clients/R/"/>
                                </exec>
                                <exec executable="cp">
                                    <arg value="-r"/>
                                    <arg value="${project.basedir}/../opencga-client/src/main/javascript"/>
                                    <arg value="${build.dir}/clients"/>
                                </exec>

                                <echo>Copying configuration files</echo>
                                <exec executable="cp">
                                    <arg value="${project.basedir}/../opencga-core/target/classes/configuration.yml"/>
                                    <arg value="${project.basedir}/../opencga-core/target/classes/log4j2.xml"/>
                                    <arg value="${project.basedir}/../opencga-core/target/classes/log4j2.service.xml"/>
                                    <arg value="${project.basedir}/../opencga-core/target/classes/log4j2.internal.xml"/>
                                    <arg value="${project.basedir}/../opencga-storage/opencga-storage-core/target/classes/storage-configuration.yml"/>
                                    <arg value="${project.basedir}/../opencga-client/target/classes/client-configuration.yml"/>
                                    <arg value="${build.dir}/conf"/>
                                </exec>

                                <exec executable="${project.basedir}/app/misc/solr/prepare_configsets.sh">
                                    <arg value="${project.basedir}/.."/>
                                    <arg value="${project.parent.version}"/>
                                </exec>

                                <echo>Copying war file</echo>
                                <exec executable="cp">
                                    <arg value="${project.basedir}/../opencga-server/target/${opencga.war.name}.war"/>
                                    <arg value="${build.dir}"/>
                                </exec>

                                <echo>Copying Acceptance testing files</echo>
                                <!--                                <exec executable="mvn">-->
                                <!--                                    <arg value="-f"/>-->
                                <!--                                    <arg value="${project.basedir}/../opencga-test/pom.xml"/>-->
                                <!--                                    <arg value="install"/>-->
                                <!--                                </exec>-->
                                <exec executable="cp">
                                    <arg value="-r"/>
                                    <arg value="${project.basedir}/../opencga-test/target/appassembler/bin/opencga-test.sh"/>
                                    <arg value="${build.dir}/bin"/>
                                </exec>
                                <exec executable="cp">
                                    <arg value="-r"/>
                                    <arg value="${project.basedir}/../opencga-test/target/appassembler/libs"/>
                                    <arg value="${build.dir}"/>
                                </exec>
                                <exec executable="sed">
                                    <arg value="-i"/>
                                    <arg value="s/REPLACEME_OPENCGA_VERSION/${project.parent.version}/"/>
                                    <arg value="${build.dir}/misc/demo/main.yml"/>
                                    <arg value="${build.dir}/misc/demo/corpasome/manifest.yml"/>
                                    <arg value="${build.dir}/cloud/docker/opencga-demo/README.md"/>
                                    <arg value="${build.dir}/cloud/kubernetes/charts/opencga/Chart.yaml"/>
                                    <arg value="${build.dir}/cloud/azure/arm-kubernetes/solr/solr-setup.sh"/>
                                </exec>
                                <exec executable="sed">
                                    <arg value="-i"/>
                                    <arg value="s/REPLACEME_IVA_VERSION/${iva.version}/"/>
                                    <arg value="${build.dir}/cloud/docker/opencga-demo/README.md"/>
                                    <arg value="${build.dir}/cloud/kubernetes/charts/iva/Chart.yaml"/>
                                </exec>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>opencga-client</id>
                        <phase>install</phase>
                        <configuration>
                            <target>
                                <echo>Preparing 'opencga-client' folder</echo>
                                <exec executable="mkdir">
                                    <arg value="${build.dir}/opencga-client-${project.parent.version}"/>
                                    <arg value="${build.dir}/opencga-client-${project.parent.version}/bin"/>
                                    <arg value="${build.dir}/opencga-client-${project.parent.version}/conf"/>
                                    <arg value="${build.dir}/opencga-client-${project.parent.version}/completion"/>
                                </exec>

                                <echo>Copying files to 'opencga-client' folder</echo>
                                <exec executable="cp">
                                    <arg value="-r"/>
                                    <arg value="${build.dir}/libs"/>
                                    <arg value="${build.dir}/clients/python"/>
                                    <arg value="${build.dir}/clients/R"/>
                                    <arg value="${build.dir}/clients/javascript"/>
                                    <arg value="${build.dir}/LICENSE"/>
                                    <arg value="${build.dir}/README.md"/>
                                    <arg value="${build.dir}/${opencga.client.dir}"/>
                                </exec>

                                <exec executable="cp">
                                    <arg value="${build.dir}/bin/opencga.sh"/>
                                    <arg value="${build.dir}/${opencga.client.dir}/bin"/>
                                </exec>

                                <exec executable="cp">
                                    <arg value="${build.dir}/conf/client-configuration.yml"/>
                                    <arg value="${build.dir}/${opencga.client.dir}/conf"/>
                                </exec>

                                <exec executable="cp">
                                    <arg value="${build.dir}/conf/client-configuration.yml"/>
                                    <arg value="${build.dir}/${opencga.client.dir}/conf"/>
                                </exec>

                                <exec executable="cp">
                                    <arg value="${build.dir}/misc/completion/opencga"/>
                                    <arg value="${build.dir}/misc/completion/README.md"/>
                                    <arg value="${build.dir}/${opencga.client.dir}/completion"/>
                                </exec>

                                <echo>Creating 'opencga-client' tar.gz file</echo>
                                <exec executable="tar">
                                    <arg value="-C"/>
                                    <arg value="${build.dir}"/>
                                    <arg value="-czf"/>
                                    <arg value="${build.dir}/${opencga.client.dir}.tar.gz"/>
                                    <arg value="${opencga.client.dir}"/>
                                </exec>

                                <echo>Deleting 'opencga-client' folder</echo>
                                <exec executable="rm">
                                    <arg value="-rf"/>
                                    <arg value="${build.dir}/${opencga.client.dir}"/>
                                </exec>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>storage-binaries</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>

            <dependencies>
                <dependency>
                    <groupId>org.opencb.opencga</groupId>
                    <artifactId>opencga-storage-benchmark</artifactId>
                    <version>${project.parent.version}</version>
                    <scope>provided</scope>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>1.8</version>
                        <executions>
                            <execution>
                                <id>install-storage-binaries</id>
                                <phase>install</phase>
                                <configuration>
                                    <target>
                                        <echo>Copying storage to ${build.dir}</echo>
                                        <exec executable="cp">
                                            <arg value="-r"/>
                                            <arg value="${project.basedir}/../opencga-storage/build/bin"/>
                                            <arg value="${project.basedir}/../opencga-storage/build/benchmark"/>
                                            <arg value="${project.basedir}/../opencga-storage/build/libs/"/>
                                            <arg value="${build.dir}"/>
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>storage-mongodb</id>
            <activation>
                <activeByDefault>true</activeByDefault>
                <property>
                    <name>storage-mongodb</name>
                </property>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>org.opencb.opencga</groupId>
                    <artifactId>opencga-storage-mongodb</artifactId>
                    <version>${project.parent.version}</version>
                </dependency>
            </dependencies>
            <properties>
                <!--<app.name>opencga-mongo.sh</app.name>-->
            </properties>
        </profile>
        <profile>
            <id>storage-hadoop</id>
            <activation>
                <property>
                    <name>storage-hadoop</name>
                </property>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>org.opencb.opencga</groupId>
                    <artifactId>opencga-storage-hadoop-core</artifactId>
                </dependency>
                <dependency>
                    <groupId>org.opencb.opencga</groupId>
                    <artifactId>${opencga-storage-hadoop-deps.artifactId}</artifactId>
                    <version>${project.parent.version}</version>
                    <classifier>shaded</classifier>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>1.8</version>
                        <executions>
                            <execution>
                                <id>install-hadoop</id>
                                <phase>install</phase>
                                <configuration>
                                    <target>
                                        <echo>Copying hadoop jar with dependencies to ${build.dir}</echo>
                                        <exec executable="cp">
                                            <arg value="${project.basedir}/../opencga-storage/opencga-storage-hadoop/opencga-storage-hadoop-core/target/opencga-storage-hadoop-core-${project.parent.version}-jar-with-dependencies.jar"/>
                                            <arg value="${build.dir}"/>
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>RClient</id>
            <activation>
                <activeByDefault>false</activeByDefault>
                <property>
                    <name>RClient</name>
                </property>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>org.opencb.opencga</groupId>
                    <artifactId>opencga-client</artifactId>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>1.8</version>
                        <executions>
                            <execution>
                                <id>R-client-compile</id>
                                <phase>install</phase>
                                <configuration>
                                    <target>
                                        <echo>Compiling R client</echo>
                                        <exec executable="${build.dir}/clients/R/build.sh">
                                            <arg value="${build.dir}/clients/R"/>
                                        </exec>
                                        <echo>Copying docker-compose files</echo>
                                        <echo>Moving R client to ${build.dir}/clients/R/</echo>
                                        <exec executable="cp">
                                            <arg value="/tmp/opencgaR_${opencgar.version}.tar.gz"/>
                                            <arg value="${build.dir}/clients/R/opencgaR_${project.parent.version}.tar.gz"/>
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
