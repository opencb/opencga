{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "_artifactsLocation": {
            "type": "string",
            "metadata": {
                "description": ""
            }
        },
        "_artifactsLocationSasToken": {
            "type": "string",
            "metadata": {
                "description": ""
            }
        },
        "rgPrefix": {
            "type": "string",
            "metadata": {
                "description": "The resource group prefix"
            }
        },
        "rgLocation": {
            "type": "string",
            "defaultValue": "UK South",
            "metadata": {
                "description": "Location for deployment"
            }
        },
        "HDInsightStorageOption": {
            "type": "string",
            "allowedValues": [
                "DataLake",
                "Blob"
            ],
            "metadata": {
                "description": "What type of storage will be used"
            }
        },
        "HDInsightClusterName": {
            "type": "string",
            "metadata": {
                "description": "The name of the HDInsight cluster to create."
            }
        },
        "HDInsightClusterLoginUserName": {
            "type": "string",
            "defaultValue": "admin",
            "metadata": {
                "description": "These credentials can be used to submit jobs to the cluster and to log into cluster dashboards."
            }
        },
        "HDInsightClusterLoginPassword": {
            "type": "securestring",
            "metadata": {
                "description": "The password must be at least 10 characters in length and must contain at least one digit, one non-alphanumeric character, and one upper or lower case letter."
            }
        },
        "HDInsightSshPassword": {
            "type": "securestring",
            "metadata": {
                "description": "The password must be at least 10 characters in length and must contain at least one digit, one non-alphanumeric character, and one upper or lower case letter."
            }
        },
        "nfsStorageOption": {
            "type": "string",
            "allowedValues": [
                "AvereCluster",
                "AzureFiles"
            ],
            "metadata": {
                "description": "What type of NFS storage do you want to use? Avere offers a high throughput SSD cache cluster over Azure Blob, AzureFiles offers modest read/write performance for smaller installations"
            }
        },
        "avereServicePrincipalAppId": {
            "type": "string",
            "metadata": {
                "description": "The ServicePrincipal which Avere will use to provision the storage cluster. This SP needs to have 'Owner' rights to the ResourceGroup."
            }
        },
        "avereServicePrincipalPassword": {
            "type": "securestring",
            "metadata": {
                "description": "The ServicePrincipal's Password."
            }
        },
        "avereSSHKeyData": {
            "type": "securestring",
            "metadata": {
                "description": "The RSA data for the SSH Public Key used to authenticate to Avere nodes."
            }
        },
        "avereAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "The password for the 'admin' user on the Avere cluster configuration portal."
            }
        },
        "webserversSSHKeyData": {
            "type": "securestring",
            "metadata": {
                "description": "The RSA data for the SSH Public Key used to authenticate to Avere nodes."
            }
        },
        "tomcatDockerImage": {
            "type": "string",
            "metadata": {
                "description": "The docker image and tag for running the tomcat service. For examples: 'repo/image:tag'"
            }
        },
        "ivaDockerImage": {
            "type": "string",
            "metadata": {
                "description": "The docker image and tag for running the IVA service. For examples: 'repo/image:tag'"
            }
        },
        "solrClusterLoginUserName": {
            "type": "string",
            "defaultValue": "opencgaadmin",
            "metadata": {
                "description": "Admin username"
            }
        },
        "solrClusterLoginPassword": {
            "type": "securestring",
            "metadata": {
                "description": "The password must be at least 10 characters in length and must contain at least one digit, one non-alphanumeric character, and one upper or lower case letter."
            }
        },
        "solrHighAvailability": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": ""
            }
        },
        "solrDiskSizeGB": {
            "type": "int",
            "defaultValue": 512,
            "metadata": {
                "description": "Size of the data disk for Solr."
            }
        },
        "solrVMSize": {
            "type": "string",
            "defaultValue": "Standard_E8_v3",
            "metadata": {
                "description": "Size of the VM"
            }
        },
        "zookeeperVMSize": {
            "type": "string",
            "defaultValue": "Standard_D2_v2",
            "metadata": {
                "description": "Size of the zookeeper VM"
            }
        },
        "solrDiskType": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS",
                "Premium_LRS"
            ],
            "metadata": {
                "description": "Storage Account type"
            }
        },
        "daemonVmAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "SSH Password (maybe change to key)"
            }
        },
        "initContainerImage": {
            "type": "string",
            "defaultValue": "dotjson/opencga-init",
            "metadata": {
                "description": "The init container image to run"
            }
        },
        "daemonContainerImage": {
            "type": "string",
            "defaultValue": "dotjson/opencga-daemon",
            "metadata": {
                "description": "The daemon container image to run"
            }
        },
        "catalogSecretKey": {
            "type": "securestring",
            "metadata": {
                "description": "Secret key used when initializing the catalog"
            }
        },
        "mongoVmSize": {
            "type": "string",
            "metadata": {
                "description": "Size of vm (e.g. Standard_D1_v2)"
            },
            "defaultValue": "Standard_D1_v2"
        },
        "mongoDnsLabelPrefix": {
            "type": "string",
            "metadata": {
                "description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
            }
        },
        "mongoCertificateEmail": {
            "type": "string",
            "metadata": {
                "description": "Email address used for mongoDB letsencrypt certificates"
            }
        },
        "mongoClusterSize": {
            "type": "int",
            "defaultValue": 3,
            "allowedValues": [
                3,
                5,
                7,
                9,
                11
            ],
            "metadata": {
                "description": "Amount of VMs to deploy for the mongodb replica set"
            }
        },
        "mongoAdminUsername": {
            "type": "string",
            "metadata": {
                "description": "The username for all mongoDB VMs (also used for connecting oer SSH)"
            }
        },
        "mongoAdminSSHKeyData": {
            "type": "string",
            "metadata": {
                "description": "The mongoDB VM public SSH key"
            }
        },
        "mongoDBUsername": {
            "type": "string",
            "defaultValue": "opencga",
            "metadata": {
                "description": "The username for connecting to mongoDB"
            }
        },
        "mongoDBPassword": {
            "type": "securestring",
            "metadata": {
                "description": "The password for connecting to mongoDB"
            }
        },
        "batchDockerImage": {
            "type": "string",
            "defaultValue": "dotjson/opencga-daemon:cat",
            "metadata": {
                "description": "The batch container image to run"
            }
        }
    },
    "variables": {
        "avereEnabled": "[equals(parameters('nfsStorageOption'), 'AvereCluster')]",
        "azureFilesEnabled": "[equals(parameters('nfsStorageOption'), 'AzureFiles')]",
        "webserverNamingPrefix": "[toLower(substring(concat('webservers', uniqueString(parameters('rgPrefix'))), 0, 16))]"
    },
    "resources": [
        {
            "type": "Microsoft.Resources/resourceGroups",
            "apiVersion": "2018-05-01",
            "location": "[parameters('rgLocation')]",
            "name": "[parameters('rgPrefix')]",
            "properties": {}
        },
        {
            "resourceGroup": "[parameters('rgPrefix')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "name": "vnet",
            "dependsOn": [
                "[parameters('rgPrefix')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('_artifactsLocation'), '/vnet/azuredeploy.json', parameters('_artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                }
            }
        },
        {
            "condition": "[variables('azureFilesEnabled')]",
            "resourceGroup": "[parameters('rgPrefix')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "name": "azurefiles",
            "dependsOn": [
                "[parameters('rgPrefix')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('_artifactsLocation'), '/azurefiles/azuredeploy.json', parameters('_artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                }
            }
        },
        {
            "resourceGroup": "[parameters('rgPrefix')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "name": "azureBatch",
            "dependsOn": [
                "[parameters('rgPrefix')]",
                "avere",
                "azurefiles",
                "vnet"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('_artifactsLocation'), '/azurebatch/azuredeploy.json', parameters('_artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    },
                    "virtualNetworkSubnetId": {
                        "value": "[reference('vnet').outputs.defaultSubnetId.value]"
                    },
                    "mountArgs": {
                        "value": "[if(equals(parameters('nfsStorageOption'), 'AzureFiles'), concat('azurefiles ', reference('azurefiles').outputs.accountName.value, ',', reference('azurefiles').outputs.shareName.value, ',' , reference('azurefiles').outputs.accountKey.value),concat('avere ', reference('avere').outputs.VSERVER_IPS.value))]"
                    }
                }
            }
        },
        {
            "resourceGroup": "[parameters('rgPrefix')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "name": "hdinsight-storage",
            "dependsOn": [
                "vnet",
                "[parameters('rgPrefix')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('_artifactsLocation'), '/hdinsight-storage/azuredeploy.json', parameters('_artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "networkAclsVirtualNetworkRule": {
                        "value": "[reference('vnet').outputs.hdinsightSubnetId.value]"
                    },
                    "isHnsEnabled": {
                        "value": "[if(equals(parameters('HDInsightstorageOption'), 'DataLake'), json('true'), json('false'))]"
                    }
                }
            }
        },
        {
            "comments": "This deploys a VM to run the OpenCGA daemon",
            "resourceGroup": "[parameters('rgPrefix')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "name": "daemonvm",
            "dependsOn": [
                "avere",
                "azurefiles",
                "vnet",
                "[parameters('rgPrefix')]",
                "azureBatch"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('_artifactsLocation'), '/daemonvm/azuredeploy.json', parameters('_artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {

                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    },
                    "virtualNetworkId": {
                        "value": "[reference('vnet').outputs.vnetId.value]"
                    },
                    "adminPassword": {
                        "value": "[parameters('daemonVmAdminPassword')]"
                    },
                    "hdInsightSshDns": {
                        "value":  "[reference('hdinsight').outputs.clusterSshDnsName.value]"
                    },
                    "hdInsightSshUsername": {
                        "value": "[reference('hdinsight').outputs.clusterSshUsername.value]"
                    },
                    "hdInsightSshPassword": {
                        "value":  "[reference('hdinsight').outputs.clusterSshPassword.value]"
                    },
                    "daemonContainerImage": {
                        "value": "[parameters('daemonContainerImage')]"
                    },
                    "initContainerImage": {
                        "value": "[parameters('initContainerImage')]"
                    },
                    "mountArgs": {
                        "value": "[if(equals(parameters('nfsStorageOption'), 'AzureFiles'), concat('azurefiles ', reference('azurefiles').outputs.accountName.value, ',', reference('azurefiles').outputs.shareName.value,',',reference('azurefiles').outputs.accountKey.value),concat('avere ', reference('avere').outputs.VSERVER_IPS.value))]"
                    },
                    "webserverNamingPrefix": {
                        "value": "[variables('webserverNamingPrefix')]"
                    },
                    "solrHosts": {
                        "value": "[reference('solr').outputs.solrConnectionDetails.value]"
                    },
                    "solrUser": {
                        "value": "todo"
                    },
                    "solrPassword": {
                        "value": "todo"
                    },
                    "mongoDbHosts": {
                        "value": "[reference('mongodb').outputs.dnsNames.value]"
                    },
                    "mongoDbUser": {
                        "value": "[reference('mongodb').outputs.mongoDBUser.value]"
                    },
                    "mongoDbPassword": {
                        "value": "[reference('mongodb').outputs.mongoDBPassword.value]"
                    },
                    "catalogSecretKey": {
                        "value": "[parameters('catalogSecretKey')]"
                    },
                    "batchAccountName": {
                        "value": "[reference('azureBatch').outputs.batchAccountName.value]"
                    },
                    "batchEndpoint": {
                        "value": "[reference('azureBatch').outputs.batchEndpoint.value]"
                    },
                    "batchAccountKey": {
                        "value": "[reference('azureBatch').outputs.batchAccountKey.value]"
                    },
                    "batchPoolId": {
                        "value": "[reference('azureBatch').outputs.batchPoolId.value]"
                    },
                    "batchDockerArgs": {
                        "value": "--mount type=bind,src=/media/primarynfs/conf,dst=/opt/opencga/conf,readonly --mount type=bind,src=/media/primarynfs/sessions,dst=/opt/opencga/sessions --mount type=bind,src=/media/primarynfs/variants,dst=/opt/opencga/variants --rm"
                    },
                    "batchDockerImage": {
                        "value": "[parameters('batchDockerImage')]"
                    },
                    "batchMaxConcurrentJobs": {
                        "value": "[reference('azureBatch').outputs.maxNodeCount.value]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/resourceGroups",
            "apiVersion": "2018-05-01",
            "location": "[parameters('rgLocation')]",
            "name": "[concat(parameters('rgPrefix'),'-hdinsight')]",
            "properties": {}
        },
        {
            "resourceGroup": "[concat(parameters('rgPrefix'),'-hdinsight')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "name": "hdinsight",
            "dependsOn": [
                "hdinsight-storage",
                "[concat(parameters('rgPrefix'),'-hdinsight')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('_artifactsLocation'), '/hdinsight/azuredeploy.json', parameters('_artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "clusterNamePrefix": {
                        "value": "[parameters('HDInsightClusterName')]"
                    },
                    "clusterLoginUserName": {
                        "value": "[parameters('HDInsightClusterLoginUserName')]"
                    },
                    "clusterLoginPassword": {
                        "value": "[parameters('HDInsightClusterLoginPassword')]"
                    },
                    "sshPassword": {
                        "value": "[parameters('HDInsightSshPassword')]"
                    },
                    "storageAccountName": {
                        "value": "[reference('hdinsight-storage').outputs.storageAccountName.value]"
                    },
                    "storageAccountKey": {
                        "value": "[reference('hdinsight-storage').outputs.storageAccountKey.value]"
                    },
                    "vnetId": {
                        "value": "[reference('vnet').outputs.vnetId.value]"
                    },
                    "subnetId": {
                        "value": "[reference('vnet').outputs.hdinsightSubnetId.value]"
                    },
                    "storageOption": {
                        "value": "[parameters('HDInsightstorageOption')]"
                    }
                }
            }
        },
        {
            "condition": "[variables('avereEnabled')]",
            "type": "Microsoft.Resources/resourceGroups",
            "apiVersion": "2018-05-01",
            "location": "[parameters('rgLocation')]",
            "name": "[concat(parameters('rgPrefix'),'-avere')]",
            "properties": {}
        },
        {
            "condition": "[variables('avereEnabled')]",
            "type": "Microsoft.Resources/deployments",
            "resourceGroup": "[concat(parameters('rgPrefix'),'-avere')]",
            "apiVersion": "2018-05-01",
            "name": "avere",
            "dependsOn": [
                "vnet",
                "[concat(parameters('rgPrefix'),'-avere')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('_artifactsLocation'), '/avere/azuredeploy.json', parameters('_artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "servicePrincipalTenant": {
                        "value": "[subscription().tenantId]"
                    },
                    "servicePrincipalAppId": {
                        "value": "[parameters('avereServicePrincipalAppId')]"
                    },
                    "servicePrincipalPassword": {
                        "value": "[parameters('avereServicePrincipalPassword')]"
                    },
                    "virtualNetworkName": {
                        "value": "[reference('vnet').outputs.virtualNetworkName.value]"
                    },
                    "virtualNetworkResourceGroup": {
                        "value": "[parameters('rgPrefix')]"
                    },
                    "virtualNetworkSubnetName": {
                        "value": "[reference('vnet').outputs.avereSubnetName.value]"
                    },
                    "virtualNetworkSubnetId": {
                        "value": "[reference('vnet').outputs.avereClusterSubnetId.value]"
                    },
                    "controllerAdminUsername": {
                        "value": "avere"
                    },
                    "controllerSSHKeyData": {
                        "value": "[parameters('avereSSHKeyData')]"
                    },
                    "adminPassword": {
                        "value": "[parameters('avereAdminPassword')]"
                    }
                }
            }
        },
        {
            "comments": "This deploys a VMSS which hosts the tomcat and IVA services behind a LB with healthchecking, autoscaling and rolling update",
            "type": "Microsoft.Resources/deployments",
            "resourceGroup": "[parameters('rgPrefix')]",
            "apiVersion": "2017-05-10",
            "name": "webservers",
            "dependsOn": [
                "avere",
                "azurefiles",
                "vnet",
                "daemonvm",
                "[parameters('rgPrefix')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('_artifactsLocation'), '/webservers/azuredeploy.json', parameters('_artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    },
                    "virtualNetworkSubnetId": {
                        "value": "[reference('vnet').outputs.hdinsightSubnetId.value]"
                    },
                    "mountArgs": {
                        "value": "[if(equals(parameters('nfsStorageOption'), 'AzureFiles'), concat('azurefiles ', reference('azurefiles').outputs.accountName.value, ',', reference('azurefiles').outputs.shareName.value, ',' , reference('azurefiles').outputs.accountKey.value),concat('avere ', reference('avere').outputs.VSERVER_IPS.value))]"
                    },
                    "SSHKeyData": {
                        "value": "[parameters('webserversSSHKeyData')]"
                    },
                    "tomcatDockerImage": {
                        "value": "[parameters('tomcatDockerImage')]"
                    },
                    "ivaDockerImage": {
                        "value": "[parameters('ivaDockerImage')]"
                    },
                    "namingPrefix": {
                        "value": "[variables('webserverNamingPrefix')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/resourceGroups",
            "apiVersion": "2018-05-01",
            "location": "[parameters('rgLocation')]",
            "name": "[concat(parameters('rgPrefix'),'-solr')]",
            "properties": {}
        },
        {
            "type": "Microsoft.Resources/deployments",
            "resourceGroup": "[concat(parameters('rgPrefix'),'-solr')]",
            "apiVersion": "2017-05-10",
            "name": "solr",
            "dependsOn": [
                "vnet"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('_artifactsLocation'), '/solr/azuredeploy.json', parameters('_artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "clusterName": {
                        "value": "opencga"
                    },
                    "subnetId": {
                        "value": "[reference('vnet').outputs.solrSubnetId.value]"
                    },
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    },
                    "location": {
                        "value": "[parameters('rgLocation')]"
                    },
                    "clusterLoginUserName": {
                        "value": "[parameters('solrClusterLoginUserName')]"
                    },
                    "clusterLoginPassword": {
                        "value": "[parameters('solrClusterLoginPassword')]"
                    },
                    "highAvailability": {
                        "value": "[parameters('solrHighAvailability')]"
                    },
                    "solrDiskSizeGB": {
                        "value": "[parameters('solrDiskSizeGB')]"
                    },
                    "solrVMSize": {
                        "value": "[parameters('solrVMSize')]"
                    },
                    "zookeeperVMSize": {
                        "value": "[parameters('zookeeperVMSize')]"
                    },
                    "diskType": {
                        "value": "[parameters('solrDiskType')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/resourceGroups",
            "apiVersion": "2018-05-01",
            "location": "[parameters('rgLocation')]",
            "name": "[concat(parameters('rgPrefix'),'-mongodb')]",
            "properties": {}
        },
        {
            "type": "Microsoft.Resources/deployments",
            "resourceGroup": "[concat(parameters('rgPrefix'),'-mongodb')]",
            "apiVersion": "2017-05-10",
            "name": "mongodb",
            "dependsOn": [
                "vnet",
                "[parameters('rgPrefix')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('_artifactsLocation'), '/mongodb/azuredeploy.json', parameters('_artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "subnetId": {
                        "value": "[reference('vnet').outputs.mongoSubnetId.value]"
                    },
                    "location": {
                        "value": "[parameters('rgLocation')]"
                    },
                    "vmSize": {
                        "value": "[parameters('mongoVmSize')]"
                    },
                    "dnsLabelPrefix": {
                        "value": "[parameters('mongoDnsLabelPrefix')]"
                    },
                    "certificateEmail": {
                        "value": "[parameters('mongoCertificateEmail')]"
                    },
                    "clusterSize": {
                        "value": "[parameters('mongoClusterSize')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('mongoAdminUsername')]"
                    },
                    "adminSSHKeyData": {
                        "value": "[parameters('mongoAdminSSHKeyData')]"
                    },
                    "mongoDBUsername": {
                        "value": "[parameters('mongoDBUsername')]"
                    },
                    "mongoDBPassword": {
                        "value": "[parameters('mongoDBPassword')]"
                    }
                }
            }
        }
    ],
    "outputs": {}
}
