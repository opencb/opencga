package org.opencb.opencga.app.cli.main.executors;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.opencb.commons.datastore.core.FacetField;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.commons.utils.PrintUtils;
import org.opencb.opencga.app.cli.main.*;
import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.app.cli.main.options.UserToolsCommandOptions;
import org.opencb.opencga.catalog.exceptions.CatalogAuthenticationException;
import org.opencb.opencga.catalog.utils.ParamUtils.AclAction;
import org.opencb.opencga.core.common.JacksonUtils;
import org.opencb.opencga.core.config.ExecutionQueue;
import org.opencb.opencga.core.exceptions.ClientException;
import org.opencb.opencga.core.models.common.InternalStatus;
import org.opencb.opencga.core.models.externalTool.Docker;
import org.opencb.opencga.core.models.externalTool.ExternalTool;
import org.opencb.opencga.core.models.externalTool.ExternalToolAclEntryList;
import org.opencb.opencga.core.models.externalTool.ExternalToolAclUpdateParams;
import org.opencb.opencga.core.models.externalTool.ExternalToolInternal;
import org.opencb.opencga.core.models.externalTool.ExternalToolScope;
import org.opencb.opencga.core.models.externalTool.Workflow;
import org.opencb.opencga.core.models.externalTool.WorkflowRepository;
import org.opencb.opencga.core.models.externalTool.WorkflowRepositoryParams;
import org.opencb.opencga.core.models.externalTool.WorkflowSystem;
import org.opencb.opencga.core.models.externalTool.custom.CustomToolCreateParams;
import org.opencb.opencga.core.models.externalTool.custom.CustomToolRunParams;
import org.opencb.opencga.core.models.externalTool.custom.CustomToolUpdateParams;
import org.opencb.opencga.core.models.externalTool.workflow.WorkflowCreateParams;
import org.opencb.opencga.core.models.externalTool.workflow.WorkflowUpdateParams;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.opencga.core.models.job.JobToolBuildDockerParams;
import org.opencb.opencga.core.models.job.JobToolBuildParams;
import org.opencb.opencga.core.models.job.MinimumRequirements;
import org.opencb.opencga.core.response.QueryType;
import org.opencb.opencga.core.response.RestResponse;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*  
*/
/**
 * This class contains methods for the User Tools command line.
 *    PATH: /{apiVersion}/tools
 */
public class UserToolsCommandExecutor extends OpencgaCommandExecutor {

    public String categoryName = "tools";
    public UserToolsCommandOptions userToolsCommandOptions;

    public UserToolsCommandExecutor(UserToolsCommandOptions userToolsCommandOptions) throws CatalogAuthenticationException {
        super(userToolsCommandOptions.commonCommandOptions);
        this.userToolsCommandOptions = userToolsCommandOptions;
    }

    @Override
    public void execute() throws Exception {

        logger.debug("Executing User Tools command line");

        String subCommandString = getParsedSubCommand(userToolsCommandOptions.jCommander);

        RestResponse queryResponse = null;

        switch (subCommandString) {
            case "acl-update":
                queryResponse = updateAcl();
                break;
            case "aggregationstats":
                queryResponse = aggregationStats();
                break;
            case "custom-build":
                queryResponse = buildCustom();
                break;
            case "custom-create":
                queryResponse = createCustom();
                break;
            case "custom-docker-run":
                queryResponse = runCustomDocker();
                break;
            case "custom-run":
                queryResponse = runCustom();
                break;
            case "custom-update":
                queryResponse = updateCustom();
                break;
            case "distinct":
                queryResponse = distinct();
                break;
            case "search":
                queryResponse = search();
                break;
            case "workflow-create":
                queryResponse = createWorkflow();
                break;
            case "workflow-import":
                queryResponse = importWorkflow();
                break;
            case "workflow-run":
                queryResponse = runWorkflow();
                break;
            case "workflow-update":
                queryResponse = updateWorkflow();
                break;
            case "acl":
                queryResponse = acl();
                break;
            case "delete":
                queryResponse = delete();
                break;
            case "info":
                queryResponse = info();
                break;
            default:
                logger.error("Subcommand not valid");
                break;
        }

        createOutput(queryResponse);

    }

    private RestResponse<ExternalToolAclEntryList> updateAcl() throws Exception {
        logger.debug("Executing updateAcl in User Tools command line");

        UserToolsCommandOptions.UpdateAclCommandOptions commandOptions = userToolsCommandOptions.updateAclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        ExternalToolAclUpdateParams externalToolAclUpdateParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<ExternalToolAclEntryList> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/tools/acl/{members}/update"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            externalToolAclUpdateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), ExternalToolAclUpdateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotNull(beanParams, "externalToolIds", commandOptions.externalToolIds, true);
            putNestedIfNotNull(beanParams, "permissions", commandOptions.permissions, true);

            externalToolAclUpdateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), ExternalToolAclUpdateParams.class);
        }
        return openCGAClient.getUserToolClient().updateAcl(commandOptions.members, commandOptions.action, externalToolAclUpdateParams, queryParams);
    }

    private RestResponse<FacetField> aggregationStats() throws Exception {
        logger.debug("Executing aggregationStats in User Tools command line");

        UserToolsCommandOptions.AggregationStatsCommandOptions commandOptions = userToolsCommandOptions.aggregationStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotNull("draft", commandOptions.draft);
        queryParams.putIfNotEmpty("internalRegistrationUserId", commandOptions.internalRegistrationUserId);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("scope", commandOptions.scope);
        queryParams.putIfNotEmpty("workflowRepositoryName", commandOptions.workflowRepositoryName);
        queryParams.putIfNotEmpty("dockerName", commandOptions.dockerName);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotNull("snapshot", commandOptions.snapshot);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        queryParams.putIfNotEmpty("field", commandOptions.field);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getUserToolClient().aggregationStats(queryParams);
    }

    private RestResponse<Job> buildCustom() throws Exception {
        logger.debug("Executing buildCustom in User Tools command line");

        UserToolsCommandOptions.BuildCustomCommandOptions commandOptions = userToolsCommandOptions.buildCustomCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("jobScheduledStartTime", commandOptions.jobScheduledStartTime);
        queryParams.putIfNotEmpty("jobPriority", commandOptions.jobPriority);
        queryParams.putIfNotNull("jobDryRun", commandOptions.jobDryRun);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        JobToolBuildParams jobToolBuildParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/tools/custom/build"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            jobToolBuildParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), JobToolBuildParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "gitRepository", commandOptions.gitRepository, true);
            putNestedIfNotEmpty(beanParams, "aptGet", commandOptions.aptGet, true);
            putNestedIfNotNull(beanParams, "installR", commandOptions.installR, true);
            putNestedIfNotEmpty(beanParams, "docker.organisation", commandOptions.dockerOrganisation, true);
            putNestedIfNotEmpty(beanParams, "docker.name", commandOptions.dockerName, true);
            putNestedIfNotEmpty(beanParams, "docker.tag", commandOptions.dockerTag, true);
            putNestedIfNotEmpty(beanParams, "docker.user", commandOptions.dockerUser, true);
            putNestedIfNotEmpty(beanParams, "docker.password", commandOptions.dockerPassword, true);

            jobToolBuildParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), JobToolBuildParams.class);
        }
        return openCGAClient.getUserToolClient().buildCustom(jobToolBuildParams, queryParams);
    }

    private RestResponse<ExternalTool> createCustom() throws Exception {
        logger.debug("Executing createCustom in User Tools command line");

        UserToolsCommandOptions.CreateCustomCommandOptions commandOptions = userToolsCommandOptions.createCustomCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        CustomToolCreateParams customToolCreateParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<ExternalTool> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/tools/custom/create"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            customToolCreateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), CustomToolCreateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "id", commandOptions.id, true);
            putNestedIfNotEmpty(beanParams, "name", commandOptions.name, true);
            putNestedIfNotEmpty(beanParams, "description", commandOptions.description, true);
            putNestedIfNotNull(beanParams, "scope", commandOptions.scope, true);
            putNestedIfNotEmpty(beanParams, "docker.name", commandOptions.dockerName, true);
            putNestedIfNotEmpty(beanParams, "docker.tag", commandOptions.dockerTag, true);
            putNestedIfNotEmpty(beanParams, "docker.commandLine", commandOptions.dockerCommandLine, true);
            putNestedIfNotEmpty(beanParams, "docker.user", commandOptions.dockerUser, true);
            putNestedIfNotEmpty(beanParams, "docker.password", commandOptions.dockerPassword, true);
            putNestedIfNotNull(beanParams, "tags", commandOptions.tags, true);
            putNestedIfNotEmpty(beanParams, "minimumRequirements.cpu", commandOptions.minimumRequirementsCpu, true);
            putNestedIfNotEmpty(beanParams, "minimumRequirements.memory", commandOptions.minimumRequirementsMemory, true);
            putNestedIfNotEmpty(beanParams, "minimumRequirements.disk", commandOptions.minimumRequirementsDisk, true);
            putNestedIfNotNull(beanParams, "minimumRequirements.processorType", commandOptions.minimumRequirementsProcessorType, true);
            putNestedIfNotEmpty(beanParams, "minimumRequirements.queue", commandOptions.minimumRequirementsQueue, true);
            putNestedIfNotNull(beanParams, "draft", commandOptions.draft, true);
            putNestedIfNotEmpty(beanParams, "internal.registrationDate", commandOptions.internalRegistrationDate, true);
            putNestedIfNotEmpty(beanParams, "internal.lastModified", commandOptions.internalLastModified, true);
            putNestedIfNotEmpty(beanParams, "internal.registrationUserId", commandOptions.internalRegistrationUserId, true);
            putNestedIfNotEmpty(beanParams, "creationDate", commandOptions.creationDate, true);
            putNestedIfNotEmpty(beanParams, "modificationDate", commandOptions.modificationDate, true);
            putNestedMapIfNotEmpty(beanParams, "attributes", commandOptions.attributes, true);

            customToolCreateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), CustomToolCreateParams.class);
        }
        return openCGAClient.getUserToolClient().createCustom(customToolCreateParams, queryParams);
    }

    private RestResponse<Job> runCustomDocker() throws Exception {
        logger.debug("Executing runCustomDocker in User Tools command line");

        UserToolsCommandOptions.RunCustomDockerCommandOptions commandOptions = userToolsCommandOptions.runCustomDockerCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("jobScheduledStartTime", commandOptions.jobScheduledStartTime);
        queryParams.putIfNotEmpty("jobPriority", commandOptions.jobPriority);
        queryParams.putIfNotNull("jobDryRun", commandOptions.jobDryRun);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        Docker docker = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/tools/custom/run"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            docker = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), Docker.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "name", commandOptions.name, true);
            putNestedIfNotEmpty(beanParams, "tag", commandOptions.tag, true);
            putNestedIfNotEmpty(beanParams, "commandLine", commandOptions.commandLine, true);
            putNestedIfNotEmpty(beanParams, "user", commandOptions.user, true);
            putNestedIfNotEmpty(beanParams, "password", commandOptions.password, true);

            docker = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), Docker.class);
        }
        return openCGAClient.getUserToolClient().runCustomDocker(docker, queryParams);
    }

    private RestResponse<Job> runCustom() throws Exception {
        logger.debug("Executing runCustom in User Tools command line");

        UserToolsCommandOptions.RunCustomCommandOptions commandOptions = userToolsCommandOptions.runCustomCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("version", commandOptions.version);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("jobScheduledStartTime", commandOptions.jobScheduledStartTime);
        queryParams.putIfNotEmpty("jobPriority", commandOptions.jobPriority);
        queryParams.putIfNotNull("jobDryRun", commandOptions.jobDryRun);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        CustomToolRunParams customToolRunParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/tools/custom/{toolId}/run"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            customToolRunParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), CustomToolRunParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "commandLine", commandOptions.commandLine, true);
            putNestedMapIfNotEmpty(beanParams, "params", commandOptions.params, true);

            customToolRunParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), CustomToolRunParams.class);
        }
        return openCGAClient.getUserToolClient().runCustom(commandOptions.toolId, customToolRunParams, queryParams);
    }

    private RestResponse<ExternalTool> updateCustom() throws Exception {
        logger.debug("Executing updateCustom in User Tools command line");

        UserToolsCommandOptions.UpdateCustomCommandOptions commandOptions = userToolsCommandOptions.updateCustomCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        CustomToolUpdateParams customToolUpdateParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<ExternalTool> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/tools/custom/{toolId}/update"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            customToolUpdateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), CustomToolUpdateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "name", commandOptions.name, true);
            putNestedIfNotEmpty(beanParams, "description", commandOptions.description, true);
            putNestedIfNotNull(beanParams, "scope", commandOptions.scope, true);
            putNestedIfNotNull(beanParams, "tags", commandOptions.tags, true);
            putNestedIfNotEmpty(beanParams, "minimumRequirements.cpu", commandOptions.minimumRequirementsCpu, true);
            putNestedIfNotEmpty(beanParams, "minimumRequirements.memory", commandOptions.minimumRequirementsMemory, true);
            putNestedIfNotEmpty(beanParams, "minimumRequirements.disk", commandOptions.minimumRequirementsDisk, true);
            putNestedIfNotNull(beanParams, "minimumRequirements.processorType", commandOptions.minimumRequirementsProcessorType, true);
            putNestedIfNotEmpty(beanParams, "minimumRequirements.queue", commandOptions.minimumRequirementsQueue, true);
            putNestedIfNotNull(beanParams, "draft", commandOptions.draft, true);
            putNestedIfNotEmpty(beanParams, "creationDate", commandOptions.creationDate, true);
            putNestedIfNotEmpty(beanParams, "modificationDate", commandOptions.modificationDate, true);
            putNestedMapIfNotEmpty(beanParams, "attributes", commandOptions.attributes, true);
            putNestedIfNotEmpty(beanParams, "docker.name", commandOptions.dockerName, true);
            putNestedIfNotEmpty(beanParams, "docker.tag", commandOptions.dockerTag, true);
            putNestedIfNotEmpty(beanParams, "docker.commandLine", commandOptions.dockerCommandLine, true);
            putNestedIfNotEmpty(beanParams, "docker.user", commandOptions.dockerUser, true);
            putNestedIfNotEmpty(beanParams, "docker.password", commandOptions.dockerPassword, true);

            customToolUpdateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), CustomToolUpdateParams.class);
        }
        return openCGAClient.getUserToolClient().updateCustom(commandOptions.toolId, customToolUpdateParams, queryParams);
    }

    private RestResponse<Object> distinct() throws Exception {
        logger.debug("Executing distinct in User Tools command line");

        UserToolsCommandOptions.DistinctCommandOptions commandOptions = userToolsCommandOptions.distinctCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotNull("draft", commandOptions.draft);
        queryParams.putIfNotEmpty("internalRegistrationUserId", commandOptions.internalRegistrationUserId);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("scope", commandOptions.scope);
        queryParams.putIfNotEmpty("workflowRepositoryName", commandOptions.workflowRepositoryName);
        queryParams.putIfNotEmpty("dockerName", commandOptions.dockerName);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotNull("snapshot", commandOptions.snapshot);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getUserToolClient().distinct(commandOptions.field, queryParams);
    }

    private RestResponse<ExternalTool> search() throws Exception {
        logger.debug("Executing search in User Tools command line");

        UserToolsCommandOptions.SearchCommandOptions commandOptions = userToolsCommandOptions.searchCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotNull("draft", commandOptions.draft);
        queryParams.putIfNotEmpty("internalRegistrationUserId", commandOptions.internalRegistrationUserId);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("scope", commandOptions.scope);
        queryParams.putIfNotEmpty("workflowRepositoryName", commandOptions.workflowRepositoryName);
        queryParams.putIfNotEmpty("dockerName", commandOptions.dockerName);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotNull("snapshot", commandOptions.snapshot);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getUserToolClient().search(queryParams);
    }

    private RestResponse<ExternalTool> createWorkflow() throws Exception {
        logger.debug("Executing createWorkflow in User Tools command line");

        UserToolsCommandOptions.CreateWorkflowCommandOptions commandOptions = userToolsCommandOptions.createWorkflowCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        WorkflowCreateParams workflowCreateParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<ExternalTool> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/tools/workflow/create"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            workflowCreateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), WorkflowCreateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "id", commandOptions.id, true);
            putNestedIfNotEmpty(beanParams, "name", commandOptions.name, true);
            putNestedIfNotEmpty(beanParams, "description", commandOptions.description, true);
            putNestedIfNotNull(beanParams, "scope", commandOptions.scope, true);
            putNestedIfNotNull(beanParams, "tags", commandOptions.tags, true);
            putNestedIfNotEmpty(beanParams, "minimumRequirements.cpu", commandOptions.minimumRequirementsCpu, true);
            putNestedIfNotEmpty(beanParams, "minimumRequirements.memory", commandOptions.minimumRequirementsMemory, true);
            putNestedIfNotEmpty(beanParams, "minimumRequirements.disk", commandOptions.minimumRequirementsDisk, true);
            putNestedIfNotNull(beanParams, "minimumRequirements.processorType", commandOptions.minimumRequirementsProcessorType, true);
            putNestedIfNotEmpty(beanParams, "minimumRequirements.queue", commandOptions.minimumRequirementsQueue, true);
            putNestedIfNotNull(beanParams, "draft", commandOptions.draft, true);
            putNestedIfNotEmpty(beanParams, "internal.registrationDate", commandOptions.internalRegistrationDate, true);
            putNestedIfNotEmpty(beanParams, "internal.lastModified", commandOptions.internalLastModified, true);
            putNestedIfNotEmpty(beanParams, "internal.registrationUserId", commandOptions.internalRegistrationUserId, true);
            putNestedIfNotEmpty(beanParams, "creationDate", commandOptions.creationDate, true);
            putNestedIfNotEmpty(beanParams, "modificationDate", commandOptions.modificationDate, true);
            putNestedMapIfNotEmpty(beanParams, "attributes", commandOptions.attributes, true);

            workflowCreateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), WorkflowCreateParams.class);
        }
        return openCGAClient.getUserToolClient().createWorkflow(workflowCreateParams, queryParams);
    }

    private RestResponse<ExternalTool> importWorkflow() throws Exception {
        logger.debug("Executing importWorkflow in User Tools command line");

        UserToolsCommandOptions.ImportWorkflowCommandOptions commandOptions = userToolsCommandOptions.importWorkflowCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        WorkflowRepositoryParams workflowRepositoryParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<ExternalTool> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/tools/workflow/import"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            workflowRepositoryParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), WorkflowRepositoryParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "name", commandOptions.name, true);
            putNestedIfNotEmpty(beanParams, "tag", commandOptions.tag, true);
            putNestedIfNotEmpty(beanParams, "user", commandOptions.user, true);
            putNestedIfNotEmpty(beanParams, "password", commandOptions.password, true);

            workflowRepositoryParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), WorkflowRepositoryParams.class);
        }
        return openCGAClient.getUserToolClient().importWorkflow(workflowRepositoryParams, queryParams);
    }

    private RestResponse<Job> runWorkflow() throws Exception {
        logger.debug("Executing runWorkflow in User Tools command line");

        UserToolsCommandOptions.RunWorkflowCommandOptions commandOptions = userToolsCommandOptions.runWorkflowCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("version", commandOptions.version);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("jobScheduledStartTime", commandOptions.jobScheduledStartTime);
        queryParams.putIfNotEmpty("jobPriority", commandOptions.jobPriority);
        queryParams.putIfNotNull("jobDryRun", commandOptions.jobDryRun);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        ObjectMap objectMap = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/tools/workflow/{toolId}/run"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            objectMap = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), ObjectMap.class);
        }
        return openCGAClient.getUserToolClient().runWorkflow(commandOptions.toolId, objectMap, queryParams);
    }

    private RestResponse<ExternalTool> updateWorkflow() throws Exception {
        logger.debug("Executing updateWorkflow in User Tools command line");

        UserToolsCommandOptions.UpdateWorkflowCommandOptions commandOptions = userToolsCommandOptions.updateWorkflowCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        WorkflowUpdateParams workflowUpdateParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<ExternalTool> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/tools/workflow/{toolId}/update"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            workflowUpdateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), WorkflowUpdateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "name", commandOptions.name, true);
            putNestedIfNotEmpty(beanParams, "description", commandOptions.description, true);
            putNestedIfNotNull(beanParams, "scope", commandOptions.scope, true);
            putNestedIfNotNull(beanParams, "tags", commandOptions.tags, true);
            putNestedIfNotEmpty(beanParams, "minimumRequirements.cpu", commandOptions.minimumRequirementsCpu, true);
            putNestedIfNotEmpty(beanParams, "minimumRequirements.memory", commandOptions.minimumRequirementsMemory, true);
            putNestedIfNotEmpty(beanParams, "minimumRequirements.disk", commandOptions.minimumRequirementsDisk, true);
            putNestedIfNotNull(beanParams, "minimumRequirements.processorType", commandOptions.minimumRequirementsProcessorType, true);
            putNestedIfNotEmpty(beanParams, "minimumRequirements.queue", commandOptions.minimumRequirementsQueue, true);
            putNestedIfNotNull(beanParams, "draft", commandOptions.draft, true);
            putNestedIfNotEmpty(beanParams, "creationDate", commandOptions.creationDate, true);
            putNestedIfNotEmpty(beanParams, "modificationDate", commandOptions.modificationDate, true);
            putNestedMapIfNotEmpty(beanParams, "attributes", commandOptions.attributes, true);

            workflowUpdateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), WorkflowUpdateParams.class);
        }
        return openCGAClient.getUserToolClient().updateWorkflow(commandOptions.toolId, workflowUpdateParams, queryParams);
    }

    private RestResponse<ExternalToolAclEntryList> acl() throws Exception {
        logger.debug("Executing acl in User Tools command line");

        UserToolsCommandOptions.AclCommandOptions commandOptions = userToolsCommandOptions.aclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("member", commandOptions.member);
        queryParams.putIfNotNull("silent", commandOptions.silent);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getUserToolClient().acl(commandOptions.tools, queryParams);
    }

    private RestResponse<ExternalTool> delete() throws Exception {
        logger.debug("Executing delete in User Tools command line");

        UserToolsCommandOptions.DeleteCommandOptions commandOptions = userToolsCommandOptions.deleteCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getUserToolClient().delete(commandOptions.tools, queryParams);
    }

    private RestResponse<ExternalTool> info() throws Exception {
        logger.debug("Executing info in User Tools command line");

        UserToolsCommandOptions.InfoCommandOptions commandOptions = userToolsCommandOptions.infoCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("version", commandOptions.version);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getUserToolClient().info(commandOptions.tools, queryParams);
    }
}