package org.opencb.opencga.app.cli.main.options;

import com.beust.jcommander.JCommander;
import com.beust.jcommander.Parameter;
import com.beust.jcommander.Parameters;
import com.beust.jcommander.DynamicParameter;
import com.beust.jcommander.ParametersDelegate;

import java.util.HashMap;
import java.util.Map;
import java.util.List;

import org.opencb.opencga.app.cli.main.parent.ParentExecutionsCommandOptions;

import static org.opencb.opencga.app.cli.GeneralCliOptions.*;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2022-07-05
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/


/**
 * This class contains methods for the Executions command line.
 *    OpenCGA version: 2.5.0-SNAPSHOT
 *    PATH: /{apiVersion}/executions
 */
@Parameters(commandNames = {"executions"}, commandDescription = "Executions commands")
public class ExecutionsCommandOptions extends ParentExecutionsCommandOptions {


        public UpdateAclCommandOptions updateAclCommandOptions;
        public CreateCommandOptions createCommandOptions;
        public DistinctCommandOptions distinctCommandOptions;
        public AggregationStatsJobsCommandOptions aggregationStatsJobsCommandOptions;
        public DistinctJobsCommandOptions distinctJobsCommandOptions;
        public SearchJobsCommandOptions searchJobsCommandOptions;
        public InfoJobsCommandOptions infoJobsCommandOptions;
        public UpdateJobsCommandOptions updateJobsCommandOptions;
        public HeadJobsLogCommandOptions headJobsLogCommandOptions;
        public TailJobsLogCommandOptions tailJobsLogCommandOptions;
        public RunPipelineCommandOptions runPipelineCommandOptions;
        public RetryCommandOptions retryCommandOptions;
        public SearchCommandOptions searchCommandOptions;
        public TopCommandOptions topCommandOptions;
        public AclCommandOptions aclCommandOptions;
        public DeleteCommandOptions deleteCommandOptions;
        public InfoCommandOptions infoCommandOptions;
        public UpdateCommandOptions updateCommandOptions;


    public ExecutionsCommandOptions(CommonCommandOptions commonCommandOptions, JCommander jCommander) {
    
        super(commonCommandOptions,jCommander);
        this.updateAclCommandOptions = new UpdateAclCommandOptions();
        this.createCommandOptions = new CreateCommandOptions();
        this.distinctCommandOptions = new DistinctCommandOptions();
        this.aggregationStatsJobsCommandOptions = new AggregationStatsJobsCommandOptions();
        this.distinctJobsCommandOptions = new DistinctJobsCommandOptions();
        this.searchJobsCommandOptions = new SearchJobsCommandOptions();
        this.infoJobsCommandOptions = new InfoJobsCommandOptions();
        this.updateJobsCommandOptions = new UpdateJobsCommandOptions();
        this.headJobsLogCommandOptions = new HeadJobsLogCommandOptions();
        this.tailJobsLogCommandOptions = new TailJobsLogCommandOptions();
        this.runPipelineCommandOptions = new RunPipelineCommandOptions();
        this.retryCommandOptions = new RetryCommandOptions();
        this.searchCommandOptions = new SearchCommandOptions();
        this.topCommandOptions = new TopCommandOptions();
        this.aclCommandOptions = new AclCommandOptions();
        this.deleteCommandOptions = new DeleteCommandOptions();
        this.infoCommandOptions = new InfoCommandOptions();
        this.updateCommandOptions = new UpdateCommandOptions();
    
    }
    
    @Parameters(commandNames = {"acl-update"}, commandDescription ="Update the set of permissions granted for the member")
    public class UpdateAclCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--members"}, description = "Comma separated list of user or group ids", required = true, arity = 1)
        public String members; 
    
        @Parameter(names = {"--action"}, description = "Action to be performed [ADD, SET, REMOVE or RESET].", required = true, arity = 1)
        public String action; 
    
        @Parameter(names = {"--permissions"}, description = "The body web service permissions parameter", required = true, arity = 1)
        public String permissions;
    
        @Parameter(names = {"--execution"}, description = "The body web service execution parameter", required = false, arity = 1)
        public String execution;
    
    }

    @Parameters(commandNames = {"create"}, commandDescription ="Register a past execution")
    public class CreateCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--include", "-I"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude", "-E"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--include-result"}, description = "Flag indicating to include the created or updated document result in the response", required = false, arity = 1)
        public Boolean includeResult; 
    
        @Parameter(names = {"--id"}, description = "The body web service id parameter", required = true, arity = 1)
        public String id;
    
        @Parameter(names = {"--description"}, description = "The body web service description parameter", required = false, arity = 1)
        public String description;
    
        @Parameter(names = {"--user-id"}, description = "The body web service userId parameter", required = false, arity = 1)
        public String userId;
    
        @Parameter(names = {"--creation-date", "--cd"}, description = "The body web service creationDate parameter", required = false, arity = 1)
        public String creationDate;
    
        @Parameter(names = {"--modification-date", "--md"}, description = "The body web service modificationDate parameter", required = false, arity = 1)
        public String modificationDate;
    
        @Parameter(names = {"--priority"}, description = "Enum param allowed values: URGENT, HIGH, MEDIUM, LOW, UNKNOWN", required = false, arity = 1)
        public String priority;
    
        @Parameter(names = {"--internal-registration-date"}, description = "Registration date of the internal object.", required = false, arity = 1)
        public String internalRegistrationDate;
    
        @Parameter(names = {"--internal-last-modified"}, description = "Date of the last modification of the internal object.", required = false, arity = 1)
        public String internalLastModified;
    
        @Parameter(names = {"--internal-tool-id"}, description = "The body web service toolId parameter", required = false, arity = 1)
        public String internalToolId;
    
        @DynamicParameter(names = {"--params"}, description = "The body web service params parameter. Use: --params key=value", required = false)
        public java.util.Map<java.lang.String,java.lang.Object> params = new HashMap<>(); //Dynamic parameters must be initialized;
    
        @Parameter(names = {"--tags"}, description = "The body web service tags parameter", required = false, arity = 1)
        public String tags;
    
        @Parameter(names = {"--pipeline-id"}, description = "The body web service id parameter", required = false, arity = 1)
        public String pipelineId;
    
        @Parameter(names = {"--visited"}, description = "The body web service visited parameter", required = false, arity = 1)
        public Boolean visited;
    
        @DynamicParameter(names = {"--attributes"}, description = "The body web service attributes parameter. Use: --attributes key=value", required = false)
        public java.util.Map<java.lang.String,java.lang.Object> attributes = new HashMap<>(); //Dynamic parameters must be initialized;
    
    }

    @Parameters(commandNames = {"distinct"}, commandDescription ="Execution distinct method")
    public class DistinctCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--other-studies"}, description = "Flag indicating the entries being queried can belong to any related study, not just the primary one.", required = false, arity = 1)
        public Boolean otherStudies; 
    
        @Parameter(names = {"--id"}, description = "Comma separated list of execution IDs up to a maximum of 100", required = false, arity = 1)
        public String id; 
    
        @Parameter(names = {"--uuid"}, description = "Comma separated list of execution UUIDs up to a maximum of 100", required = false, arity = 1)
        public String uuid; 
    
        @Parameter(names = {"--internal-tool-id"}, description = "Tool ID executed by the execution", required = false, arity = 1)
        public String internalToolId; 
    
        @Parameter(names = {"--user-id"}, description = "User that created the execution", required = false, arity = 1)
        public String userId; 
    
        @Parameter(names = {"--priority"}, description = "Priority of the execution", required = false, arity = 1)
        public String priority; 
    
        @Parameter(names = {"--internal-status"}, description = "Filter by internal status", required = false, arity = 1)
        public String internalStatus; 
    
        @Parameter(names = {"--creation-date", "--cd"}, description = "Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805", required = false, arity = 1)
        public String creationDate; 
    
        @Parameter(names = {"--modification-date", "--md"}, description = "Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805", required = false, arity = 1)
        public String modificationDate; 
    
        @Parameter(names = {"--visited"}, description = "Visited status of execution", required = false, arity = 1)
        public Boolean visited; 
    
        @Parameter(names = {"--is-pipeline"}, description = "Filter by pipeline/not pipeline executions", required = false, arity = 1)
        public Boolean isPipeline; 
    
        @Parameter(names = {"--tags"}, description = "Execution tags", required = false, arity = 1)
        public String tags; 
    
        @Parameter(names = {"--acl"}, description = "Filter entries for which a user has the provided permissions. Format: acl={user}:{permissions}. Example: acl=john:WRITE,WRITE_ANNOTATIONS will return all entries for which user john has both WRITE and WRITE_ANNOTATIONS permissions. Only study owners or administrators can query by this field. ", required = false, arity = 1)
        public String acl; 
    
        @Parameter(names = {"--release"}, description = "Release when it was created", required = false, arity = 1)
        public String release; 
    
        @Parameter(names = {"--deleted"}, description = "Boolean to retrieve deleted entries", required = false, arity = 1)
        public Boolean deleted; 
    
        @Parameter(names = {"--field"}, description = "Field for which to obtain the distinct values", required = true, arity = 1)
        public String field; 
    
    }

    @Parameters(commandNames = {"jobs-aggregation-stats"}, commandDescription ="Fetch catalog job stats")
    public class AggregationStatsJobsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--tool-id"}, description = "Tool id", required = false, arity = 1)
        public String toolId; 
    
        @Parameter(names = {"--tool-scope"}, description = "Tool scope", required = false, arity = 1)
        public String toolScope; 
    
        @Parameter(names = {"--tool-type"}, description = "Tool type", required = false, arity = 1)
        public String toolType; 
    
        @Parameter(names = {"--tool-resource"}, description = "Tool resource", required = false, arity = 1)
        public String toolResource; 
    
        @Parameter(names = {"--user-id"}, description = "User id", required = false, arity = 1)
        public String userId; 
    
        @Parameter(names = {"--priority"}, description = "Priority", required = false, arity = 1)
        public String priority; 
    
        @Parameter(names = {"--tags"}, description = "Tags", required = false, arity = 1)
        public String tags; 
    
        @Parameter(names = {"--executor-id"}, description = "Executor id", required = false, arity = 1)
        public String executorId; 
    
        @Parameter(names = {"--executor-framework"}, description = "Executor framework", required = false, arity = 1)
        public String executorFramework; 
    
        @Parameter(names = {"--creation-year"}, description = "Creation year", required = false, arity = 1)
        public String creationYear; 
    
        @Parameter(names = {"--creation-month"}, description = "Creation month (JANUARY, FEBRUARY...)", required = false, arity = 1)
        public String creationMonth; 
    
        @Parameter(names = {"--creation-day"}, description = "Creation day", required = false, arity = 1)
        public String creationDay; 
    
        @Parameter(names = {"--creation-day-of-week"}, description = "Creation day of week (MONDAY, TUESDAY...)", required = false, arity = 1)
        public String creationDayOfWeek; 
    
        @Parameter(names = {"--status"}, description = "Status", required = false, arity = 1)
        public String status; 
    
        @Parameter(names = {"--release"}, description = "Release", required = false, arity = 1)
        public String release; 
    
        @Parameter(names = {"--default"}, description = "Calculate default stats", required = false, arity = 1)
        public Boolean default_values; 
    
        @Parameter(names = {"--field"}, description = "List of fields separated by semicolons, e.g.: studies;type. For nested fields use >>, e.g.: studies>>biotype;type;numSamples[0..10]:1", required = false, arity = 1)
        public String field; 
    
    }

    @Parameters(commandNames = {"jobs-distinct"}, commandDescription ="Job distinct method")
    public class DistinctJobsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--other-studies"}, description = "Flag indicating the entries being queried can belong to any related study, not just the primary one.", required = false, arity = 1)
        public Boolean otherStudies; 
    
        @Parameter(names = {"--id"}, description = "Comma separated list of job IDs up to a maximum of 100", required = false, arity = 1)
        public String id; 
    
        @Parameter(names = {"--uuid"}, description = "Comma separated list of job UUIDs up to a maximum of 100", required = false, arity = 1)
        public String uuid; 
    
        @Parameter(names = {"--tool-id"}, description = "Tool ID executed by the job", required = false, arity = 1)
        public String toolId; 
    
        @Parameter(names = {"--tool-type"}, description = "Tool type executed by the job [OPERATION, ANALYSIS]", required = false, arity = 1)
        public String toolType; 
    
        @Parameter(names = {"--user-id"}, description = "User that created the job", required = false, arity = 1)
        public String userId; 
    
        @Parameter(names = {"--priority"}, description = "Priority of the job", required = false, arity = 1)
        public String priority; 
    
        @Parameter(names = {"--status"}, description = "Filter by status", required = false, arity = 1)
        public String status; 
    
        @Parameter(names = {"--internal-status"}, description = "Filter by internal status", required = false, arity = 1)
        public String internalStatus; 
    
        @Parameter(names = {"--creation-date", "--cd"}, description = "Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805", required = false, arity = 1)
        public String creationDate; 
    
        @Parameter(names = {"--modification-date", "--md"}, description = "Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805", required = false, arity = 1)
        public String modificationDate; 
    
        @Parameter(names = {"--visited"}, description = "Visited status of job", required = false, arity = 1)
        public Boolean visited; 
    
        @Parameter(names = {"--tags"}, description = "Execution tags", required = false, arity = 1)
        public String tags; 
    
        @Parameter(names = {"--input"}, description = "Comma separated list of file IDs used as input.", required = false, arity = 1)
        public String input; 
    
        @Parameter(names = {"--output"}, description = "Comma separated list of file IDs used as output.", required = false, arity = 1)
        public String output; 
    
        @Parameter(names = {"--acl"}, description = "Filter entries for which a user has the provided permissions. Format: acl={user}:{permissions}. Example: acl=john:WRITE,WRITE_ANNOTATIONS will return all entries for which user john has both WRITE and WRITE_ANNOTATIONS permissions. Only study owners or administrators can query by this field. ", required = false, arity = 1)
        public String acl; 
    
        @Parameter(names = {"--release"}, description = "Release when it was created", required = false, arity = 1)
        public String release; 
    
        @Parameter(names = {"--deleted"}, description = "Boolean to retrieve deleted entries", required = false, arity = 1)
        public Boolean deleted; 
    
        @Parameter(names = {"--field"}, description = "Field for which to obtain the distinct values", required = true, arity = 1)
        public String field; 
    
    }

    @Parameters(commandNames = {"jobs-search"}, commandDescription ="Job search method")
    public class SearchJobsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include", "-I"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude", "-E"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--limit"}, description = "Number of results to be returned", required = false, arity = 1)
        public Integer limit; 
    
        @Parameter(names = {"--skip"}, description = "Number of results to skip", required = false, arity = 1)
        public Integer skip; 
    
        @Parameter(names = {"--count"}, description = "Get the total number of results matching the query. Deactivated by default.", required = false, arity = 1)
        public Boolean count; 
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--other-studies"}, description = "Flag indicating the entries being queried can belong to any related study, not just the primary one.", required = false, arity = 1)
        public Boolean otherStudies; 
    
        @Parameter(names = {"--id"}, description = "Comma separated list of job IDs up to a maximum of 100", required = false, arity = 1)
        public String id; 
    
        @Parameter(names = {"--uuid"}, description = "Comma separated list of job UUIDs up to a maximum of 100", required = false, arity = 1)
        public String uuid; 
    
        @Parameter(names = {"--tool-id"}, description = "Tool ID executed by the job", required = false, arity = 1)
        public String toolId; 
    
        @Parameter(names = {"--tool-type"}, description = "Tool type executed by the job [OPERATION, ANALYSIS]", required = false, arity = 1)
        public String toolType; 
    
        @Parameter(names = {"--user-id"}, description = "User that created the job", required = false, arity = 1)
        public String userId; 
    
        @Parameter(names = {"--priority"}, description = "Priority of the job", required = false, arity = 1)
        public String priority; 
    
        @Parameter(names = {"--status"}, description = "Filter by status", required = false, arity = 1)
        public String status; 
    
        @Parameter(names = {"--internal-status"}, description = "Filter by internal status", required = false, arity = 1)
        public String internalStatus; 
    
        @Parameter(names = {"--creation-date", "--cd"}, description = "Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805", required = false, arity = 1)
        public String creationDate; 
    
        @Parameter(names = {"--modification-date", "--md"}, description = "Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805", required = false, arity = 1)
        public String modificationDate; 
    
        @Parameter(names = {"--visited"}, description = "Visited status of job", required = false, arity = 1)
        public Boolean visited; 
    
        @Parameter(names = {"--tags"}, description = "Execution tags", required = false, arity = 1)
        public String tags; 
    
        @Parameter(names = {"--input"}, description = "Comma separated list of file IDs used as input.", required = false, arity = 1)
        public String input; 
    
        @Parameter(names = {"--output"}, description = "Comma separated list of file IDs used as output.", required = false, arity = 1)
        public String output; 
    
        @Parameter(names = {"--acl"}, description = "Filter entries for which a user has the provided permissions. Format: acl={user}:{permissions}. Example: acl=john:WRITE,WRITE_ANNOTATIONS will return all entries for which user john has both WRITE and WRITE_ANNOTATIONS permissions. Only study owners or administrators can query by this field. ", required = false, arity = 1)
        public String acl; 
    
        @Parameter(names = {"--release"}, description = "Release when it was created", required = false, arity = 1)
        public String release; 
    
        @Parameter(names = {"--deleted"}, description = "Boolean to retrieve deleted entries", required = false, arity = 1)
        public Boolean deleted; 
    
    }

    @Parameters(commandNames = {"jobs-info"}, commandDescription ="Get job information")
    public class InfoJobsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include", "-I"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude", "-E"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--jobs"}, description = "Comma separated list of job IDs or UUIDs up to a maximum of 100", required = true, arity = 1)
        public String jobs; 
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--deleted"}, description = "Boolean to retrieve deleted jobs", required = false, arity = 1)
        public Boolean deleted; 
    
    }

    @Parameters(commandNames = {"jobs-update"}, commandDescription ="Update some job attributes")
    public class UpdateJobsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--include", "-I"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude", "-E"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--jobs"}, description = "Comma separated list of job IDs or UUIDs up to a maximum of 100", required = true, arity = 1)
        public String jobs; 
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--include-result"}, description = "Flag indicating to include the created or updated document result in the response", required = false, arity = 1)
        public Boolean includeResult; 
    
        @Parameter(names = {"--description"}, description = "The body web service description parameter", required = false, arity = 1)
        public String description;
    
        @Parameter(names = {"--tags"}, description = "The body web service tags parameter", required = false, arity = 1)
        public String tags;
    
        @Parameter(names = {"--visited"}, description = "The body web service visited parameter", required = false, arity = 1)
        public Boolean visited;
    
        @DynamicParameter(names = {"--attributes"}, description = "The body web service attributes parameter. Use: --attributes key=value", required = false)
        public java.util.Map<java.lang.String,java.lang.Object> attributes = new HashMap<>(); //Dynamic parameters must be initialized;
    
    }

    @Parameters(commandNames = {"jobs-log-head"}, commandDescription ="Show the first lines of a log file (up to a limit)")
    public class HeadJobsLogCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--job"}, description = "Job ID or UUID", required = true, arity = 1)
        public String job; 
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--offset"}, description = "Starting byte from which the file will be read", required = false, arity = 1)
        public Long offset; 
    
        @Parameter(names = {"--lines"}, description = "Maximum number of lines to be returned up to a maximum of 1000", required = false, arity = 1)
        public Integer lines; 
    
        @Parameter(names = {"--type"}, description = "Log file to be shown (stdout or stderr)", required = false, arity = 1)
        public String type; 
    
    }

    @Parameters(commandNames = {"jobs-log-tail"}, commandDescription ="Show the last lines of a log file (up to a limit)")
    public class TailJobsLogCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--job"}, description = "Job ID or UUID", required = true, arity = 1)
        public String job; 
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--lines"}, description = "Maximum number of lines to be returned up to a maximum of 1000", required = false, arity = 1)
        public Integer lines; 
    
        @Parameter(names = {"--type"}, description = "Log file to be shown (stdout or stderr)", required = false, arity = 1)
        public String type; 
    
    }

    @Parameters(commandNames = {"pipeline-run"}, commandDescription ="Execute a pipeline")
    public class RunPipelineCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--study", "-s"}, description = "study", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--pipeline-id"}, description = "Pipeline id", required = false, arity = 1)
        public String pipelineId; 
    
        @Parameter(names = {"--job-id"}, description = "Execution ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--execution-depends-on"}, description = "Comma separated list of existing execution IDs the execution will depend on.", required = false, arity = 1)
        public String executionDependsOn; 
    
        @Parameter(names = {"--execution-description"}, description = "Execution description", required = false, arity = 1)
        public String executionDescription; 
    
        @Parameter(names = {"--execution-tags"}, description = "Execution tags", required = false, arity = 1)
        public String executionTags; 
    
    }

    @Parameters(commandNames = {"retry"}, commandDescription ="Relaunch a failed execution")
    public class RetryCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--execution-id"}, description = "Execution ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String executionId; 
    
        @Parameter(names = {"--execution-description"}, description = "Execution description", required = false, arity = 1)
        public String executionDescription; 
    
        @Parameter(names = {"--execution-depends-on"}, description = "Comma separated list of existing execution IDs the execution will depend on.", required = false, arity = 1)
        public String executionDependsOn; 
    
        @Parameter(names = {"--execution-tags"}, description = "Execution tags", required = false, arity = 1)
        public String executionTags; 
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--execution"}, description = "The body web service execution parameter", required = false, arity = 1)
        public String execution;
    
    }

    @Parameters(commandNames = {"search"}, commandDescription ="Execution search method")
    public class SearchCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include", "-I"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude", "-E"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--limit"}, description = "Number of results to be returned", required = false, arity = 1)
        public Integer limit; 
    
        @Parameter(names = {"--skip"}, description = "Number of results to skip", required = false, arity = 1)
        public Integer skip; 
    
        @Parameter(names = {"--count"}, description = "Get the total number of results matching the query. Deactivated by default.", required = false, arity = 1)
        public Boolean count; 
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--other-studies"}, description = "Flag indicating the entries being queried can belong to any related study, not just the primary one.", required = false, arity = 1)
        public Boolean otherStudies; 
    
        @Parameter(names = {"--id"}, description = "Comma separated list of execution IDs up to a maximum of 100", required = false, arity = 1)
        public String id; 
    
        @Parameter(names = {"--uuid"}, description = "Comma separated list of execution UUIDs up to a maximum of 100", required = false, arity = 1)
        public String uuid; 
    
        @Parameter(names = {"--internal-tool-id"}, description = "Tool ID executed by the execution", required = false, arity = 1)
        public String internalToolId; 
    
        @Parameter(names = {"--user-id"}, description = "User that created the execution", required = false, arity = 1)
        public String userId; 
    
        @Parameter(names = {"--priority"}, description = "Priority of the execution", required = false, arity = 1)
        public String priority; 
    
        @Parameter(names = {"--internal-status"}, description = "Filter by internal status", required = false, arity = 1)
        public String internalStatus; 
    
        @Parameter(names = {"--creation-date", "--cd"}, description = "Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805", required = false, arity = 1)
        public String creationDate; 
    
        @Parameter(names = {"--modification-date", "--md"}, description = "Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805", required = false, arity = 1)
        public String modificationDate; 
    
        @Parameter(names = {"--visited"}, description = "Visited status of execution", required = false, arity = 1)
        public Boolean visited; 
    
        @Parameter(names = {"--is-pipeline"}, description = "Filter by pipeline/not pipeline executions", required = false, arity = 1)
        public Boolean isPipeline; 
    
        @Parameter(names = {"--tags"}, description = "Execution tags", required = false, arity = 1)
        public String tags; 
    
        @Parameter(names = {"--acl"}, description = "Filter entries for which a user has the provided permissions. Format: acl={user}:{permissions}. Example: acl=john:WRITE,WRITE_ANNOTATIONS will return all entries for which user john has both WRITE and WRITE_ANNOTATIONS permissions. Only study owners or administrators can query by this field. ", required = false, arity = 1)
        public String acl; 
    
        @Parameter(names = {"--release"}, description = "Release when it was created", required = false, arity = 1)
        public String release; 
    
        @Parameter(names = {"--deleted"}, description = "Boolean to retrieve deleted entries", required = false, arity = 1)
        public Boolean deleted; 
    
    }

    @Parameters(commandNames = {"acl"}, commandDescription ="Return the acl of the execution. If member is provided, it will only return the acl for the member.")
    public class AclCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--executions"}, description = "Comma separated list of execution IDs or UUIDs up to a maximum of 100", required = true, arity = 1)
        public String executions; 
    
        @Parameter(names = {"--member"}, description = "User or group id", required = false, arity = 1)
        public String member; 
    
        @Parameter(names = {"--silent"}, description = "Boolean to retrieve all possible entries that are queried for, false to raise an exception whenever one of the entries looked for cannot be shown for whichever reason", required = false, arity = 1)
        public Boolean silent; 
    
    }

    @Parameters(commandNames = {"delete"}, commandDescription ="Delete existing executions")
    public class DeleteCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--executions"}, description = "Comma separated list of execution ids", required = true, arity = 1)
        public String executions; 
    
    }

    @Parameters(commandNames = {"info"}, commandDescription ="Get execution information")
    public class InfoCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include", "-I"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude", "-E"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--executions"}, description = "Comma separated list of execution IDs or UUIDs up to a maximum of 100", required = true, arity = 1)
        public String executions; 
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--deleted"}, description = "Boolean to retrieve deleted executions", required = false, arity = 1)
        public Boolean deleted; 
    
    }

    @Parameters(commandNames = {"update"}, commandDescription ="Update some execution attributes")
    public class UpdateCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--include", "-I"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude", "-E"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--executions"}, description = "Comma separated list of execution IDs or UUIDs up to a maximum of 100", required = true, arity = 1)
        public String executions; 
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--include-result"}, description = "Flag indicating to include the created or updated document result in the response", required = false, arity = 1)
        public Boolean includeResult; 
    
        @Parameter(names = {"--pipeline-uid"}, description = "The body web service uid parameter", required = false, arity = 1)
        public Long pipelineUid;
    
        @Parameter(names = {"--pipeline-id"}, description = "The body web service id parameter", required = false, arity = 1)
        public String pipelineId;
    
        @Parameter(names = {"--pipeline-study-uid"}, description = "The body web service studyUid parameter", required = false, arity = 1)
        public Long pipelineStudyUid;
    
        @Parameter(names = {"--pipeline-uuid"}, description = "The body web service uuid parameter", required = false, arity = 1)
        public String pipelineUuid;
    
        @Parameter(names = {"--pipeline-description"}, description = "The body web service description parameter", required = false, arity = 1)
        public String pipelineDescription;
    
        @Parameter(names = {"--pipeline-disabled"}, description = "The body web service disabled parameter", required = false, arity = 1)
        public Boolean pipelineDisabled;
    
        @Parameter(names = {"--pipeline-release"}, description = "An integer describing the current data release.", required = false, arity = 1)
        public Integer pipelineRelease;
    
        @Parameter(names = {"--pipeline-version"}, description = "The body web service version parameter", required = false, arity = 1)
        public Integer pipelineVersion;
    
        @Parameter(names = {"--pipeline-creation-date"}, description = "The body web service creationDate parameter", required = false, arity = 1)
        public String pipelineCreationDate;
    
        @Parameter(names = {"--pipeline-modification-date"}, description = "The body web service modificationDate parameter", required = false, arity = 1)
        public String pipelineModificationDate;
    
        @DynamicParameter(names = {"--pipeline-params"}, description = "The body web service params parameter. Use: --pipeline-params key=value", required = false)
        public java.util.Map<java.lang.String,java.lang.Object> pipelineParams = new HashMap<>(); //Dynamic parameters must be initialized;
    
        @DynamicParameter(names = {"--params"}, description = "The body web service params parameter. Use: --params key=value", required = false)
        public java.util.Map<java.lang.String,java.lang.Object> params = new HashMap<>(); //Dynamic parameters must be initialized;
    
        @Parameter(names = {"--visited"}, description = "The body web service visited parameter", required = false, arity = 1)
        public Boolean visited;
    
        @Parameter(names = {"--out-dir-uid"}, description = "The body web service uid parameter", required = false, arity = 1)
        public Long outDirUid;
    
        @Parameter(names = {"--out-dir-id"}, description = "Object ID is a mandatory parameter when creating a new one, this ID cannot be changed at the moment.", required = false, arity = 1)
        public String outDirId;
    
        @Parameter(names = {"--out-dir-study-uid"}, description = "The body web service studyUid parameter", required = false, arity = 1)
        public Long outDirStudyUid;
    
        @Parameter(names = {"--out-dir-uuid"}, description = "Unique 32-character identifier assigned automatically by OpenCGA.", required = false, arity = 1)
        public String outDirUuid;
    
        @Parameter(names = {"--out-dir-name"}, description = "The name of the file.", required = false, arity = 1)
        public String outDirName;
    
        @Parameter(names = {"--out-dir-type"}, description = "The type can have the values FILE or DIRECTORY.", required = false, arity = 1)
        public String outDirType;
    
        @Parameter(names = {"--out-dir-format"}, description = "The format can have the values VCF, BCF, GVCF, TBI, BIGWIG, SAM, BAM, BAI, CRAM, CRAI, FASTQ, FASTA, PED, TAB_SEPARATED_VALUES, COMMA_SEPARATED_VALUES, XML, PROTOCOL_BUFFER, JSON, AVRO, PARQUET, IMAGE, PLAIN, BINARY, NONE and UNKNOWN.", required = false, arity = 1)
        public String outDirFormat;
    
        @Parameter(names = {"--out-dir-bioformat"}, description = "The bioformat can have the values MICROARRAY_EXPRESSION_ONECHANNEL_AGILENT, MICROARRAY_EXPRESSION_ONECHANNEL_AFFYMETRIX, MICROARRAY_EXPRESSION_ONECHANNEL_GENEPIX, MICROARRAY_EXPRESSION_TWOCHANNELS_AGILENT, MICROARRAY_EXPRESSION_TWOCHANNELS_GENEPIX, DATAMATRIX_EXPRESSION, IDLIST, IDLIST_RANKED, ANNOTATION_GENEVSANNOTATION, OTHER_NEWICK, OTHER_BLAST, OTHER_INTERACTION, OTHER_GENOTYPE, OTHER_PLINK, OTHER_VCF, OTHER_PED, @Deprecated VCF4, VARIANT, ALIGNMENT, COVERAGE, SEQUENCE, PEDIGREE, REFERENCE_GENOME, NONE and UNKNOWN.", required = false, arity = 1)
        public String outDirBioformat;
    
        @Parameter(names = {"--out-dir-checksum"}, description = "The checksum of the file.", required = false, arity = 1)
        public String outDirChecksum;
    
        @Parameter(names = {"--out-dir-path"}, description = "The path of the file.", required = false, arity = 1)
        public String outDirPath;
    
        @Parameter(names = {"--out-dir-release"}, description = "An integer describing the current data release.", required = false, arity = 1)
        public Integer outDirRelease;
    
        @Parameter(names = {"--out-dir-creation-date"}, description = "Autogenerated date following the format YYYYMMDDhhmmss containing the date when the entry was first registered.", required = false, arity = 1)
        public String outDirCreationDate;
    
        @Parameter(names = {"--out-dir-modification-date"}, description = "Autogenerated date following the format YYYYMMDDhhmmss containing the date when the entry was last modified.", required = false, arity = 1)
        public String outDirModificationDate;
    
        @Parameter(names = {"--out-dir-description"}, description = "Users may provide a description for the entry.", required = false, arity = 1)
        public String outDirDescription;
    
        @Parameter(names = {"--out-dir-external"}, description = "Indicates the file is external or not.", required = false, arity = 1)
        public Boolean outDirExternal;
    
        @Parameter(names = {"--out-dir-size"}, description = "The size of the file.", required = false, arity = 1)
        public Long outDirSize;
    
        @Parameter(names = {"--out-dir-sample-ids"}, description = "List of sample ids of the file.", required = false, arity = 1)
        public String outDirSampleIds;
    
        @Parameter(names = {"--out-dir-job-id"}, description = "File job id.", required = false, arity = 1)
        public String outDirJobId;
    
        @Parameter(names = {"--out-dir-tags"}, description = "File tags.", required = false, arity = 1)
        public String outDirTags;
    
        @DynamicParameter(names = {"--out-dir-stats"}, description = "Stats of the object.. Use: --out-dir-stats key=value", required = false)
        public java.util.Map<java.lang.String,java.lang.Object> outDirStats = new HashMap<>(); //Dynamic parameters must be initialized;
    
        @DynamicParameter(names = {"--out-dir-attributes"}, description = "You can use this field to store any other information, keep in mind this is not indexed so you cannot search by attributes.. Use: --out-dir-attributes key=value", required = false)
        public java.util.Map<java.lang.String,java.lang.Object> outDirAttributes = new HashMap<>(); //Dynamic parameters must be initialized;
    
    }

}