package org.opencb.opencga.app.cli.main.executors;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.DataInputStream;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.opencb.biodata.models.clinical.interpretation.Software;
import org.opencb.commons.datastore.core.FacetField;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.commons.utils.PrintUtils;
import org.opencb.opencga.app.cli.main.*;
import org.opencb.opencga.app.cli.main.custom.CustomFilesCommandExecutor;
import org.opencb.opencga.app.cli.main.custom.CustomFilesCommandOptions;
import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.app.cli.main.options.FilesCommandOptions;
import org.opencb.opencga.catalog.exceptions.CatalogAuthenticationException;
import org.opencb.opencga.catalog.utils.ParamUtils.AclAction;
import org.opencb.opencga.catalog.utils.ParamUtils.BasicUpdateAction;
import org.opencb.opencga.catalog.utils.ParamUtils.CompleteUpdateAction;
import org.opencb.opencga.core.common.JacksonUtils;
import org.opencb.opencga.core.exceptions.ClientException;
import org.opencb.opencga.core.models.alignment.AlignmentFileQualityControl;
import org.opencb.opencga.core.models.alignment.CoverageFileQualityControl;
import org.opencb.opencga.core.models.common.StatusParams;
import org.opencb.opencga.core.models.common.TsvAnnotationParams;
import org.opencb.opencga.core.models.file.File;
import org.opencb.opencga.core.models.file.File.Bioformat;
import org.opencb.opencga.core.models.file.File.Format;
import org.opencb.opencga.core.models.file.FileAclEntryList;
import org.opencb.opencga.core.models.file.FileAclUpdateParams;
import org.opencb.opencga.core.models.file.FileContent;
import org.opencb.opencga.core.models.file.FileCreateParams;
import org.opencb.opencga.core.models.file.FileExperiment;
import org.opencb.opencga.core.models.file.FileFetch;
import org.opencb.opencga.core.models.file.FileLinkInternalParams;
import org.opencb.opencga.core.models.file.FileLinkParams;
import org.opencb.opencga.core.models.file.FileLinkToolParams;
import org.opencb.opencga.core.models.file.FileMoveParams;
import org.opencb.opencga.core.models.file.FileQualityControl;
import org.opencb.opencga.core.models.file.FileStatus;
import org.opencb.opencga.core.models.file.FileTree;
import org.opencb.opencga.core.models.file.FileUpdateParams;
import org.opencb.opencga.core.models.file.MissingSamples;
import org.opencb.opencga.core.models.file.PostLinkToolParams;
import org.opencb.opencga.core.models.file.SmallFileInternal;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.opencga.core.models.variant.VariantFileQualityControl;
import org.opencb.opencga.core.response.QueryType;
import org.opencb.opencga.core.response.RestResponse;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*  
*/
/**
 * This class contains methods for the Files command line.
 *    PATH: /{apiVersion}/files
 */
public class FilesCommandExecutor extends OpencgaCommandExecutor {

    public String categoryName = "files";
    public FilesCommandOptions filesCommandOptions;

    public FilesCommandExecutor(FilesCommandOptions filesCommandOptions) throws CatalogAuthenticationException {
        super(filesCommandOptions.commonCommandOptions);
        this.filesCommandOptions = filesCommandOptions;
    }

    @Override
    public void execute() throws Exception {

        logger.debug("Executing Files command line");

        String subCommandString = getParsedSubCommand(filesCommandOptions.jCommander);

        RestResponse queryResponse = null;

        switch (subCommandString) {
            case "acl-update":
                queryResponse = updateAcl();
                break;
            case "aggregationstats":
                queryResponse = aggregationStats();
                break;
            case "annotation-sets-load":
                queryResponse = loadAnnotationSets();
                break;
            case "bioformats":
                queryResponse = bioformats();
                break;
            case "create":
                queryResponse = create();
                break;
            case "distinct":
                queryResponse = distinct();
                break;
            case "fetch":
                queryResponse = fetch();
                break;
            case "formats":
                queryResponse = formats();
                break;
            case "link":
                queryResponse = link();
                break;
            case "link-run":
                queryResponse = runLink();
                break;
            case "postlink-run":
                queryResponse = runPostlink();
                break;
            case "search":
                queryResponse = search();
                break;
            case "upload":
                queryResponse = upload();
                break;
            case "acl":
                queryResponse = acl();
                break;
            case "delete":
                queryResponse = delete();
                break;
            case "info":
                queryResponse = info();
                break;
            case "unlink":
                queryResponse = unlink();
                break;
            case "update":
                queryResponse = update();
                break;
            case "annotation-sets-annotations-update":
                queryResponse = updateAnnotationSetsAnnotations();
                break;
            case "download":
                queryResponse = download();
                break;
            case "grep":
                queryResponse = grep();
                break;
            case "head":
                queryResponse = head();
                break;
            case "image":
                queryResponse = image();
                break;
            case "move":
                queryResponse = move();
                break;
            case "refresh":
                queryResponse = refresh();
                break;
            case "tail":
                queryResponse = tail();
                break;
            case "list":
                queryResponse = list();
                break;
            case "tree":
                queryResponse = tree();
                break;
            default:
                logger.error("Subcommand not valid");
                break;
        }

        createOutput(queryResponse);

    }

    private RestResponse<FileAclEntryList> updateAcl() throws Exception {
        logger.debug("Executing updateAcl in Files command line");

        FilesCommandOptions.UpdateAclCommandOptions commandOptions = filesCommandOptions.updateAclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        FileAclUpdateParams fileAclUpdateParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<FileAclEntryList> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/files/acl/{members}/update"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            fileAclUpdateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), FileAclUpdateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "permissions", commandOptions.permissions, true);
            putNestedIfNotEmpty(beanParams, "file", commandOptions.file, true);
            putNestedIfNotEmpty(beanParams, "sample", commandOptions.sample, true);

            fileAclUpdateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), FileAclUpdateParams.class);
        }
        return openCGAClient.getFileClient().updateAcl(commandOptions.members, commandOptions.action, fileAclUpdateParams, queryParams);
    }

    private RestResponse<FacetField> aggregationStats() throws Exception {
        logger.debug("Executing aggregationStats in Files command line");

        FilesCommandOptions.AggregationStatsCommandOptions commandOptions = filesCommandOptions.aggregationStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotEmpty("path", commandOptions.path);
        queryParams.putIfNotEmpty("uri", commandOptions.uri);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("bioformat", commandOptions.bioformat);
        queryParams.putIfNotEmpty("format", commandOptions.format);
        queryParams.putIfNotNull("external", commandOptions.external);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("internalVariantIndexStatus", commandOptions.internalVariantIndexStatus);
        queryParams.putIfNotEmpty("softwareName", commandOptions.softwareName);
        queryParams.putIfNotEmpty("directory", commandOptions.directory);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("description", commandOptions.description);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotEmpty("size", commandOptions.size);
        queryParams.putIfNotEmpty("sampleIds", commandOptions.sampleIds);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("annotation", commandOptions.annotation);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotEmpty("field", commandOptions.field);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getFileClient().aggregationStats(queryParams);
    }

    private RestResponse<Job> loadAnnotationSets() throws Exception {
        logger.debug("Executing loadAnnotationSets in Files command line");

        FilesCommandOptions.LoadAnnotationSetsCommandOptions commandOptions = filesCommandOptions.loadAnnotationSetsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("parents", commandOptions.parents);
        queryParams.putIfNotEmpty("annotationSetId", commandOptions.annotationSetId);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        TsvAnnotationParams tsvAnnotationParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/files/annotationSets/load"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            tsvAnnotationParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), TsvAnnotationParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "content", commandOptions.content, true);

            tsvAnnotationParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), TsvAnnotationParams.class);
        }
        return openCGAClient.getFileClient().loadAnnotationSets(commandOptions.variableSetId, commandOptions.path, tsvAnnotationParams, queryParams);
    }

    private RestResponse<File.Bioformat> bioformats() throws Exception {
        logger.debug("Executing bioformats in Files command line");

        FilesCommandOptions.BioformatsCommandOptions commandOptions = filesCommandOptions.bioformatsCommandOptions;
        return openCGAClient.getFileClient().bioformats();
    }

    private RestResponse<File> create() throws Exception {
        logger.debug("Executing create in Files command line");

        FilesCommandOptions.CreateCommandOptions commandOptions = filesCommandOptions.createCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("parents", commandOptions.parents);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        FileCreateParams fileCreateParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<File> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/files/create"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            fileCreateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), FileCreateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "content", commandOptions.content, true);
            putNestedIfNotEmpty(beanParams, "path", commandOptions.path, true);
            putNestedIfNotEmpty(beanParams, "description", commandOptions.description, true);
            putNestedIfNotNull(beanParams, "type", commandOptions.type, true);
            putNestedIfNotNull(beanParams, "format", commandOptions.format, true);
            putNestedIfNotNull(beanParams, "bioformat", commandOptions.bioformat, true);
            putNestedIfNotNull(beanParams, "sampleIds", commandOptions.sampleIds, true);
            putNestedIfNotEmpty(beanParams, "software.name", commandOptions.softwareName, true);
            putNestedIfNotEmpty(beanParams, "software.version", commandOptions.softwareVersion, true);
            putNestedIfNotEmpty(beanParams, "software.repository", commandOptions.softwareRepository, true);
            putNestedIfNotEmpty(beanParams, "software.commit", commandOptions.softwareCommit, true);
            putNestedIfNotEmpty(beanParams, "software.website", commandOptions.softwareWebsite, true);
            putNestedMapIfNotEmpty(beanParams, "software.params", commandOptions.softwareParams, true);
            putNestedIfNotNull(beanParams, "tags", commandOptions.tags, true);
            putNestedIfNotEmpty(beanParams, "jobId", commandOptions.jobId, true);
            putNestedIfNotEmpty(beanParams, "creationDate", commandOptions.creationDate, true);
            putNestedIfNotEmpty(beanParams, "modificationDate", commandOptions.modificationDate, true);
            putNestedIfNotEmpty(beanParams, "status.id", commandOptions.statusId, true);
            putNestedIfNotEmpty(beanParams, "status.name", commandOptions.statusName, true);
            putNestedIfNotEmpty(beanParams, "status.description", commandOptions.statusDescription, true);
            putNestedMapIfNotEmpty(beanParams, "attributes", commandOptions.attributes, true);

            fileCreateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), FileCreateParams.class);
        }
        return openCGAClient.getFileClient().create(fileCreateParams, queryParams);
    }

    private RestResponse<Object> distinct() throws Exception {
        logger.debug("Executing distinct in Files command line");

        FilesCommandOptions.DistinctCommandOptions commandOptions = filesCommandOptions.distinctCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotEmpty("path", commandOptions.path);
        queryParams.putIfNotEmpty("uri", commandOptions.uri);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("bioformat", commandOptions.bioformat);
        queryParams.putIfNotEmpty("format", commandOptions.format);
        queryParams.putIfNotNull("external", commandOptions.external);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("internalVariantIndexStatus", commandOptions.internalVariantIndexStatus);
        queryParams.putIfNotEmpty("softwareName", commandOptions.softwareName);
        queryParams.putIfNotEmpty("directory", commandOptions.directory);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("description", commandOptions.description);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotEmpty("size", commandOptions.size);
        queryParams.putIfNotEmpty("sampleIds", commandOptions.sampleIds);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("annotation", commandOptions.annotation);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getFileClient().distinct(commandOptions.field, queryParams);
    }

    private RestResponse<Job> fetch() throws Exception {
        logger.debug("Executing fetch in Files command line");

        FilesCommandOptions.FetchCommandOptions commandOptions = filesCommandOptions.fetchCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("jobScheduledStartTime", commandOptions.jobScheduledStartTime);
        queryParams.putIfNotEmpty("jobPriority", commandOptions.jobPriority);
        queryParams.putIfNotNull("jobDryRun", commandOptions.jobDryRun);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        FileFetch fileFetch = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/files/fetch"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            fileFetch = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), FileFetch.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "url", commandOptions.url, true);
            putNestedIfNotEmpty(beanParams, "path", commandOptions.path, true);

            fileFetch = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), FileFetch.class);
        }
        return openCGAClient.getFileClient().fetch(fileFetch, queryParams);
    }

    private RestResponse<File.Format> formats() throws Exception {
        logger.debug("Executing formats in Files command line");

        FilesCommandOptions.FormatsCommandOptions commandOptions = filesCommandOptions.formatsCommandOptions;
        return openCGAClient.getFileClient().formats();
    }

    private RestResponse<File> link() throws Exception {
        logger.debug("Executing link in Files command line");

        FilesCommandOptions.LinkCommandOptions commandOptions = filesCommandOptions.linkCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("parents", commandOptions.parents);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        FileLinkParams fileLinkParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<File> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/files/link"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            fileLinkParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), FileLinkParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "uri", commandOptions.uri, true);
            putNestedIfNotEmpty(beanParams, "path", commandOptions.path, true);
            putNestedIfNotEmpty(beanParams, "description", commandOptions.description, true);
            putNestedIfNotEmpty(beanParams, "creationDate", commandOptions.creationDate, true);
            putNestedIfNotEmpty(beanParams, "modificationDate", commandOptions.modificationDate, true);
            putNestedIfNotEmpty(beanParams, "virtualFileName", commandOptions.virtualFileName, true);
            putNestedIfNotEmpty(beanParams, "status.id", commandOptions.statusId, true);
            putNestedIfNotEmpty(beanParams, "status.name", commandOptions.statusName, true);
            putNestedIfNotEmpty(beanParams, "status.description", commandOptions.statusDescription, true);
            putNestedMapIfNotEmpty(beanParams, "internal.sampleMap", commandOptions.internalSampleMap, true);

            fileLinkParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), FileLinkParams.class);
        }
        return openCGAClient.getFileClient().link(fileLinkParams, queryParams);
    }

    private RestResponse<Job> runLink() throws Exception {
        logger.debug("Executing runLink in Files command line");

        FilesCommandOptions.RunLinkCommandOptions commandOptions = filesCommandOptions.runLinkCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("jobScheduledStartTime", commandOptions.jobScheduledStartTime);
        queryParams.putIfNotEmpty("jobPriority", commandOptions.jobPriority);
        queryParams.putIfNotNull("jobDryRun", commandOptions.jobDryRun);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        FileLinkToolParams fileLinkToolParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/files/link/run"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            fileLinkToolParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), FileLinkToolParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotNull(beanParams, "uri", commandOptions.uri, true);
            putNestedIfNotEmpty(beanParams, "path", commandOptions.path, true);
            putNestedIfNotEmpty(beanParams, "description", commandOptions.description, true);
            putNestedIfNotEmpty(beanParams, "virtualFileName", commandOptions.virtualFileName, true);
            putNestedIfNotNull(beanParams, "parents", commandOptions.parents, true);
            putNestedIfNotNull(beanParams, "skipPostLink", commandOptions.skipPostLink, true);

            fileLinkToolParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), FileLinkToolParams.class);
        }
        return openCGAClient.getFileClient().runLink(fileLinkToolParams, queryParams);
    }

    private RestResponse<Job> runPostlink() throws Exception {
        logger.debug("Executing runPostlink in Files command line");

        FilesCommandOptions.RunPostlinkCommandOptions commandOptions = filesCommandOptions.runPostlinkCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("jobScheduledStartTime", commandOptions.jobScheduledStartTime);
        queryParams.putIfNotEmpty("jobPriority", commandOptions.jobPriority);
        queryParams.putIfNotNull("jobDryRun", commandOptions.jobDryRun);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        PostLinkToolParams postLinkToolParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/files/postlink/run"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            postLinkToolParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), PostLinkToolParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotNull(beanParams, "files", commandOptions.files, true);
            putNestedIfNotNull(beanParams, "batchSize", commandOptions.batchSize, true);

            postLinkToolParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), PostLinkToolParams.class);
        }
        return openCGAClient.getFileClient().runPostlink(postLinkToolParams, queryParams);
    }

    private RestResponse<File> search() throws Exception {
        logger.debug("Executing search in Files command line");

        FilesCommandOptions.SearchCommandOptions commandOptions = filesCommandOptions.searchCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotNull("flattenAnnotations", commandOptions.flattenAnnotations);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotEmpty("path", commandOptions.path);
        queryParams.putIfNotEmpty("uri", commandOptions.uri);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("bioformat", commandOptions.bioformat);
        queryParams.putIfNotEmpty("format", commandOptions.format);
        queryParams.putIfNotNull("external", commandOptions.external);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("internalVariantIndexStatus", commandOptions.internalVariantIndexStatus);
        queryParams.putIfNotEmpty("softwareName", commandOptions.softwareName);
        queryParams.putIfNotEmpty("directory", commandOptions.directory);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("description", commandOptions.description);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotEmpty("size", commandOptions.size);
        queryParams.putIfNotEmpty("sampleIds", commandOptions.sampleIds);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("annotation", commandOptions.annotation);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getFileClient().search(queryParams);
    }

    private RestResponse<File> upload() throws Exception {
        logger.debug("Executing upload in Files command line");

        CustomFilesCommandOptions.UploadCommandOptions commandOptions = filesCommandOptions.uploadCommandOptions;
        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("file", commandOptions.file);
        queryParams.putIfNotEmpty("fileName", commandOptions.fileName);
        queryParams.putIfNotNull("fileFormat", commandOptions.fileFormat);
        queryParams.putIfNotNull("bioformat", commandOptions.bioformat);
        queryParams.putIfNotEmpty("checksum", commandOptions.checksum);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("relativeFilePath", commandOptions.relativeFilePath);
        queryParams.putIfNotEmpty("description", commandOptions.description);
        queryParams.putIfNotNull("parents", commandOptions.parents);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }
        CustomFilesCommandExecutor customFilesCommandExecutor = new CustomFilesCommandExecutor(queryParams, token, clientConfiguration, getSessionManager(), appHome, getLogger());
        return customFilesCommandExecutor.upload(commandOptions);
    }

    private RestResponse<FileAclEntryList> acl() throws Exception {
        logger.debug("Executing acl in Files command line");

        FilesCommandOptions.AclCommandOptions commandOptions = filesCommandOptions.aclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("member", commandOptions.member);
        queryParams.putIfNotNull("silent", commandOptions.silent);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getFileClient().acl(commandOptions.files, queryParams);
    }

    private RestResponse<Job> delete() throws Exception {
        logger.debug("Executing delete in Files command line");

        FilesCommandOptions.DeleteCommandOptions commandOptions = filesCommandOptions.deleteCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("skipTrash", commandOptions.skipTrash);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getFileClient().delete(commandOptions.files, queryParams);
    }

    private RestResponse<File> info() throws Exception {
        logger.debug("Executing info in Files command line");

        FilesCommandOptions.InfoCommandOptions commandOptions = filesCommandOptions.infoCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("flattenAnnotations", commandOptions.flattenAnnotations);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getFileClient().info(commandOptions.files, queryParams);
    }

    private RestResponse<Job> unlink() throws Exception {
        logger.debug("Executing unlink in Files command line");

        FilesCommandOptions.UnlinkCommandOptions commandOptions = filesCommandOptions.unlinkCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getFileClient().unlink(commandOptions.files, queryParams);
    }

    private RestResponse<File> update() throws Exception {
        logger.debug("Executing update in Files command line");

        FilesCommandOptions.UpdateCommandOptions commandOptions = filesCommandOptions.updateCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("sampleIdsAction", commandOptions.sampleIdsAction);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        FileUpdateParams fileUpdateParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<File> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/files/{files}/update"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            fileUpdateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), FileUpdateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "description", commandOptions.description, true);
            putNestedIfNotEmpty(beanParams, "creationDate", commandOptions.creationDate, true);
            putNestedIfNotEmpty(beanParams, "modificationDate", commandOptions.modificationDate, true);
            putNestedIfNotNull(beanParams, "sampleIds", commandOptions.sampleIds, true);
            putNestedIfNotNull(beanParams, "format", commandOptions.format, true);
            putNestedIfNotNull(beanParams, "bioformat", commandOptions.bioformat, true);
            putNestedIfNotEmpty(beanParams, "software.name", commandOptions.softwareName, true);
            putNestedIfNotEmpty(beanParams, "software.version", commandOptions.softwareVersion, true);
            putNestedIfNotEmpty(beanParams, "software.repository", commandOptions.softwareRepository, true);
            putNestedIfNotEmpty(beanParams, "software.commit", commandOptions.softwareCommit, true);
            putNestedIfNotEmpty(beanParams, "software.website", commandOptions.softwareWebsite, true);
            putNestedMapIfNotEmpty(beanParams, "software.params", commandOptions.softwareParams, true);
            putNestedIfNotNull(beanParams, "experiment.technology", commandOptions.experimentTechnology, true);
            putNestedIfNotNull(beanParams, "experiment.method", commandOptions.experimentMethod, true);
            putNestedIfNotNull(beanParams, "experiment.nucleicAcidType", commandOptions.experimentNucleicAcidType, true);
            putNestedIfNotEmpty(beanParams, "experiment.manufacturer", commandOptions.experimentManufacturer, true);
            putNestedIfNotEmpty(beanParams, "experiment.platform", commandOptions.experimentPlatform, true);
            putNestedIfNotEmpty(beanParams, "experiment.library", commandOptions.experimentLibrary, true);
            putNestedIfNotEmpty(beanParams, "experiment.date", commandOptions.experimentDate, true);
            putNestedIfNotEmpty(beanParams, "experiment.center", commandOptions.experimentCenter, true);
            putNestedIfNotEmpty(beanParams, "experiment.lab", commandOptions.experimentLab, true);
            putNestedIfNotEmpty(beanParams, "experiment.responsible", commandOptions.experimentResponsible, true);
            putNestedIfNotEmpty(beanParams, "experiment.description", commandOptions.experimentDescription, true);
            putNestedMapIfNotEmpty(beanParams, "experiment.attributes", commandOptions.experimentAttributes, true);
            putNestedIfNotNull(beanParams, "tags", commandOptions.tags, true);
            putNestedIfNotEmpty(beanParams, "status.id", commandOptions.statusId, true);
            putNestedIfNotEmpty(beanParams, "status.name", commandOptions.statusName, true);
            putNestedIfNotEmpty(beanParams, "status.description", commandOptions.statusDescription, true);
            putNestedIfNotNull(beanParams, "qualityControl.files", commandOptions.qualityControlFiles, true);
            putNestedMapIfNotEmpty(beanParams, "stats", commandOptions.stats, true);
            putNestedMapIfNotEmpty(beanParams, "attributes", commandOptions.attributes, true);

            fileUpdateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), FileUpdateParams.class);
        }
        return openCGAClient.getFileClient().update(commandOptions.files, fileUpdateParams, queryParams);
    }

    private RestResponse<File> updateAnnotationSetsAnnotations() throws Exception {
        logger.debug("Executing updateAnnotationSetsAnnotations in Files command line");

        FilesCommandOptions.UpdateAnnotationSetsAnnotationsCommandOptions commandOptions = filesCommandOptions.updateAnnotationSetsAnnotationsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("action", commandOptions.action);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        ObjectMap objectMap = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<File> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/files/{file}/annotationSets/{annotationSet}/annotations/update"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            objectMap = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), ObjectMap.class);
        }
        return openCGAClient.getFileClient().updateAnnotationSetsAnnotations(commandOptions.file, commandOptions.annotationSet, objectMap, queryParams);
    }

    private RestResponse<DataInputStream> download() throws Exception {
        logger.debug("Executing download in Files command line");

        FilesCommandOptions.DownloadCommandOptions commandOptions = filesCommandOptions.downloadCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getFileClient().download(commandOptions.file, queryParams);
    }

    private RestResponse<FileContent> grep() throws Exception {
        logger.debug("Executing grep in Files command line");

        FilesCommandOptions.GrepCommandOptions commandOptions = filesCommandOptions.grepCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("pattern", commandOptions.pattern);
        queryParams.putIfNotNull("ignoreCase", commandOptions.ignoreCase);
        queryParams.putIfNotNull("maxCount", commandOptions.maxCount);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getFileClient().grep(commandOptions.file, queryParams);
    }

    private RestResponse<FileContent> head() throws Exception {
        logger.debug("Executing head in Files command line");

        FilesCommandOptions.HeadCommandOptions commandOptions = filesCommandOptions.headCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("offset", commandOptions.offset);
        queryParams.putIfNotNull("lines", commandOptions.lines);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getFileClient().head(commandOptions.file, queryParams);
    }

    private RestResponse<FileContent> image() throws Exception {
        logger.debug("Executing image in Files command line");

        FilesCommandOptions.ImageCommandOptions commandOptions = filesCommandOptions.imageCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getFileClient().image(commandOptions.file, queryParams);
    }

    private RestResponse<File> move() throws Exception {
        logger.debug("Executing move in Files command line");

        FilesCommandOptions.MoveCommandOptions commandOptions = filesCommandOptions.moveCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        FileMoveParams fileMoveParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<File> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/files/{file}/move"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            fileMoveParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), FileMoveParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "path", commandOptions.path, true);

            fileMoveParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), FileMoveParams.class);
        }
        return openCGAClient.getFileClient().move(commandOptions.file, fileMoveParams, queryParams);
    }

    private RestResponse<File> refresh() throws Exception {
        logger.debug("Executing refresh in Files command line");

        FilesCommandOptions.RefreshCommandOptions commandOptions = filesCommandOptions.refreshCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getFileClient().refresh(commandOptions.file, queryParams);
    }

    private RestResponse<FileContent> tail() throws Exception {
        logger.debug("Executing tail in Files command line");

        FilesCommandOptions.TailCommandOptions commandOptions = filesCommandOptions.tailCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("lines", commandOptions.lines);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getFileClient().tail(commandOptions.file, queryParams);
    }

    private RestResponse<File> list() throws Exception {
        logger.debug("Executing list in Files command line");

        FilesCommandOptions.ListCommandOptions commandOptions = filesCommandOptions.listCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getFileClient().list(commandOptions.folder, queryParams);
    }

    private RestResponse<FileTree> tree() throws Exception {
        logger.debug("Executing tree in Files command line");

        FilesCommandOptions.TreeCommandOptions commandOptions = filesCommandOptions.treeCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("maxDepth", commandOptions.maxDepth);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getFileClient().tree(commandOptions.folder, queryParams);
    }
}