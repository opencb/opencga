package org.opencb.opencga.app.cli.main.executors;

import org.opencb.commons.datastore.core.FacetField;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.commons.utils.PrintUtils;
import org.opencb.opencga.app.cli.main.OpencgaMain;
import org.opencb.opencga.app.cli.main.options.ExecutionsCommandOptions;
import org.opencb.opencga.app.cli.main.parent.ParentExecutionsCommandExecutor;
import org.opencb.opencga.catalog.exceptions.CatalogAuthenticationException;
import org.opencb.opencga.core.common.JacksonUtils;
import org.opencb.opencga.core.models.common.EntryParam;
import org.opencb.opencga.core.models.common.Enums;
import org.opencb.opencga.core.models.file.File;
import org.opencb.opencga.core.models.file.FileContent;
import org.opencb.opencga.core.models.job.*;
import org.opencb.opencga.core.response.QueryType;
import org.opencb.opencga.core.response.RestResponse;

import java.util.HashMap;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2022-07-05
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/


/**
 * This class contains methods for the Executions command line.
 *    OpenCGA version: 2.5.0-SNAPSHOT
 *    PATH: /{apiVersion}/executions
 */
public class ExecutionsCommandExecutor extends ParentExecutionsCommandExecutor {

    private ExecutionsCommandOptions executionsCommandOptions;

    public ExecutionsCommandExecutor(ExecutionsCommandOptions executionsCommandOptions) throws CatalogAuthenticationException {
        super(executionsCommandOptions.commonCommandOptions,executionsCommandOptions);
        this.executionsCommandOptions = executionsCommandOptions;
    }

    @Override
    public void execute() throws Exception {

        logger.debug("Executing Executions command line");

        String subCommandString = getParsedSubCommand(executionsCommandOptions.jCommander);

        RestResponse queryResponse = null;

        switch (subCommandString) {
            case "acl-update":
                queryResponse = updateAcl();
                break;
            case "create":
                queryResponse = create();
                break;
            case "distinct":
                queryResponse = distinct();
                break;
            case "jobs-aggregation-stats":
                queryResponse = aggregationStatsJobs();
                break;
            case "jobs-distinct":
                queryResponse = distinctJobs();
                break;
            case "jobs-search":
                queryResponse = searchJobs();
                break;
            case "jobs-info":
                queryResponse = infoJobs();
                break;
            case "jobs-update":
                queryResponse = updateJobs();
                break;
            case "jobs-log-head":
                queryResponse = headJobsLog();
                break;
            case "jobs-log-tail":
                queryResponse = tailJobsLog();
                break;
            case "pipeline-run":
                queryResponse = runPipeline();
                break;
            case "retry":
                queryResponse = retry();
                break;
            case "search":
                queryResponse = search();
                break;
            case "top":
                queryResponse = top();
                break;
            case "acl":
                queryResponse = acl();
                break;
            case "delete":
                queryResponse = delete();
                break;
            case "info":
                queryResponse = info();
                break;
            case "update":
                queryResponse = update();
                break;
            default:
                logger.error("Subcommand not valid");
                break;
        }

        createOutput(queryResponse);

    }

    private RestResponse<ObjectMap> updateAcl() throws Exception {

        logger.debug("Executing updateAcl in Executions command line");

        ExecutionsCommandOptions.UpdateAclCommandOptions commandOptions = executionsCommandOptions.updateAclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        ExecutionAclUpdateParams executionAclUpdateParams = new ExecutionAclUpdateParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<ObjectMap> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(executionAclUpdateParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            executionAclUpdateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), ExecutionAclUpdateParams.class);
        } else {
            executionAclUpdateParams.setPermissions(commandOptions.permissions);
            executionAclUpdateParams.setExecution(commandOptions.execution);

        }
        return openCGAClient.getExecutionClient().updateAcl(commandOptions.members, commandOptions.action, executionAclUpdateParams, queryParams);
    }

    private RestResponse<Execution> create() throws Exception {

        logger.debug("Executing create in Executions command line");

        ExecutionsCommandOptions.CreateCommandOptions commandOptions = executionsCommandOptions.createCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        ExecutionCreateParams executionCreateParams = new ExecutionCreateParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Execution> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(executionCreateParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            executionCreateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), ExecutionCreateParams.class);
        } else {
            // Generate beans for nested objects
            ExecutionInternal internalParam = new ExecutionInternal();
            //internalParam.setStatus(commandOptions.internalStatus);  // Unsupported param. FIXME
            internalParam.setRegistrationDate(commandOptions.internalRegistrationDate);
            internalParam.setLastModified(commandOptions.internalLastModified);
            internalParam.setToolId(commandOptions.internalToolId);
            //internalParam.setWebhook(commandOptions.internalWebhook);  // Unsupported param. FIXME
            //internalParam.setEvents(commandOptions.internalEvents);  // Unsupported param. FIXME
            //internalParam.setStart(commandOptions.internalStart);  // Unsupported param. FIXME
            //internalParam.setEnd(commandOptions.internalEnd);  // Unsupported param. FIXME

            EntryParam pipelineParam = new EntryParam();
            pipelineParam.setId(commandOptions.pipelineId);

            //Set main body params
            executionCreateParams.setId(commandOptions.id);
            executionCreateParams.setDescription(commandOptions.description);
            executionCreateParams.setUserId(commandOptions.userId);
            executionCreateParams.setCreationDate(commandOptions.creationDate);
            executionCreateParams.setModificationDate(commandOptions.modificationDate);
            executionCreateParams.setPriority(commandOptions.priority == null ? null : Enums.Priority.valueOf(commandOptions.priority));
            executionCreateParams.setInternal(internalParam);
            executionCreateParams.setParams(new HashMap<>(commandOptions.params));
            executionCreateParams.setTags(splitWithTrim(commandOptions.tags));
            //executionCreateParams.setDependsOn(commandOptions.dependsOn); // Unsupported param. FIXME 
            executionCreateParams.setPipeline(pipelineParam);
            //executionCreateParams.setJobs(commandOptions.jobs); // Unsupported param. FIXME 
            executionCreateParams.setAttributes(new HashMap<>(commandOptions.attributes));

            if (commandOptions.visited != null) {
                executionCreateParams.setVisited(commandOptions.visited);
            }
        }
        return openCGAClient.getExecutionClient().create(executionCreateParams, queryParams);
    }

    private RestResponse<Object> distinct() throws Exception {

        logger.debug("Executing distinct in Executions command line");

        ExecutionsCommandOptions.DistinctCommandOptions commandOptions = executionsCommandOptions.distinctCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("otherStudies", commandOptions.otherStudies);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("internalToolId", commandOptions.internalToolId);
        queryParams.putIfNotEmpty("userId", commandOptions.userId);
        queryParams.putIfNotEmpty("priority", commandOptions.priority);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotNull("visited", commandOptions.visited);
        queryParams.putIfNotNull("isPipeline", commandOptions.isPipeline);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getExecutionClient().distinct(commandOptions.field, queryParams);
    }

    private RestResponse<FacetField> aggregationStatsJobs() throws Exception {

        logger.debug("Executing aggregationStatsJobs in Executions command line");

        ExecutionsCommandOptions.AggregationStatsJobsCommandOptions commandOptions = executionsCommandOptions.aggregationStatsJobsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("toolId", commandOptions.toolId);
        queryParams.putIfNotEmpty("toolScope", commandOptions.toolScope);
        queryParams.putIfNotEmpty("toolType", commandOptions.toolType);
        queryParams.putIfNotEmpty("toolResource", commandOptions.toolResource);
        queryParams.putIfNotEmpty("userId", commandOptions.userId);
        queryParams.putIfNotEmpty("priority", commandOptions.priority);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotEmpty("executorId", commandOptions.executorId);
        queryParams.putIfNotEmpty("executorFramework", commandOptions.executorFramework);
        queryParams.putIfNotEmpty("creationYear", commandOptions.creationYear);
        queryParams.putIfNotEmpty("creationMonth", commandOptions.creationMonth);
        queryParams.putIfNotEmpty("creationDay", commandOptions.creationDay);
        queryParams.putIfNotEmpty("creationDayOfWeek", commandOptions.creationDayOfWeek);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotNull("default_values", commandOptions.default_values);
        queryParams.putIfNotEmpty("field", commandOptions.field);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getExecutionClient().aggregationStatsJobs(queryParams);
    }

    private RestResponse<Object> distinctJobs() throws Exception {

        logger.debug("Executing distinctJobs in Executions command line");

        ExecutionsCommandOptions.DistinctJobsCommandOptions commandOptions = executionsCommandOptions.distinctJobsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("otherStudies", commandOptions.otherStudies);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("toolId", commandOptions.toolId);
        queryParams.putIfNotEmpty("toolType", commandOptions.toolType);
        queryParams.putIfNotEmpty("userId", commandOptions.userId);
        queryParams.putIfNotEmpty("priority", commandOptions.priority);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotNull("visited", commandOptions.visited);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotEmpty("input", commandOptions.input);
        queryParams.putIfNotEmpty("output", commandOptions.output);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getExecutionClient().distinctJobs(commandOptions.field, queryParams);
    }

    private RestResponse<Job> searchJobs() throws Exception {

        logger.debug("Executing searchJobs in Executions command line");

        ExecutionsCommandOptions.SearchJobsCommandOptions commandOptions = executionsCommandOptions.searchJobsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("otherStudies", commandOptions.otherStudies);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("toolId", commandOptions.toolId);
        queryParams.putIfNotEmpty("toolType", commandOptions.toolType);
        queryParams.putIfNotEmpty("userId", commandOptions.userId);
        queryParams.putIfNotEmpty("priority", commandOptions.priority);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotNull("visited", commandOptions.visited);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotEmpty("input", commandOptions.input);
        queryParams.putIfNotEmpty("output", commandOptions.output);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getExecutionClient().searchJobs(queryParams);
    }

    private RestResponse<Job> infoJobs() throws Exception {

        logger.debug("Executing infoJobs in Executions command line");

        ExecutionsCommandOptions.InfoJobsCommandOptions commandOptions = executionsCommandOptions.infoJobsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getExecutionClient().infoJobs(commandOptions.jobs, queryParams);
    }

    private RestResponse<Job> updateJobs() throws Exception {

        logger.debug("Executing updateJobs in Executions command line");

        ExecutionsCommandOptions.UpdateJobsCommandOptions commandOptions = executionsCommandOptions.updateJobsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        JobUpdateParams jobUpdateParams = new JobUpdateParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(jobUpdateParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            jobUpdateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), JobUpdateParams.class);
        } else {
            jobUpdateParams.setDescription(commandOptions.description);
            jobUpdateParams.setTags(splitWithTrim(commandOptions.tags));
            jobUpdateParams.setAttributes(new HashMap<>(commandOptions.attributes));

            if (commandOptions.visited != null) {
                jobUpdateParams.setVisited(commandOptions.visited);
            }
        }
        return openCGAClient.getExecutionClient().updateJobs(commandOptions.jobs, jobUpdateParams, queryParams);
    }

    private RestResponse<FileContent> headJobsLog() throws Exception {

        logger.debug("Executing headJobsLog in Executions command line");

        ExecutionsCommandOptions.HeadJobsLogCommandOptions commandOptions = executionsCommandOptions.headJobsLogCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("offset", commandOptions.offset);
        queryParams.putIfNotNull("lines", commandOptions.lines);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getExecutionClient().headExecutionsJobsLog(commandOptions.job, queryParams);
    }

    private RestResponse<FileContent> tailJobsLog() throws Exception {

        logger.debug("Executing tailJobsLog in Executions command line");

        ExecutionsCommandOptions.TailJobsLogCommandOptions commandOptions = executionsCommandOptions.tailJobsLogCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("lines", commandOptions.lines);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getExecutionClient().tailExecutionsJobsLog(commandOptions.job, queryParams);
    }

    private RestResponse<Execution> runPipeline() throws Exception {

        logger.debug("Executing runPipeline in Executions command line");

        ExecutionsCommandOptions.RunPipelineCommandOptions commandOptions = executionsCommandOptions.runPipelineCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("pipelineId", commandOptions.pipelineId);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("executionDependsOn", commandOptions.executionDependsOn);
        queryParams.putIfNotEmpty("executionDescription", commandOptions.executionDescription);
        queryParams.putIfNotEmpty("executionTags", commandOptions.executionTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        ObjectMap objectMap = new ObjectMap();
        if (commandOptions.jsonDataModel) {
            RestResponse<Execution> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(objectMap));
            return res;
        } else if (commandOptions.jsonFile != null) {
            objectMap = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), ObjectMap.class);
        }
        return openCGAClient.getExecutionClient().runPipeline(commandOptions.pipelineId, objectMap, queryParams);
    }

    private RestResponse<Execution> retry() throws Exception {

        logger.debug("Executing retry in Executions command line");

        ExecutionsCommandOptions.RetryCommandOptions commandOptions = executionsCommandOptions.retryCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("executionId", commandOptions.executionId);
        queryParams.putIfNotEmpty("executionDescription", commandOptions.executionDescription);
        queryParams.putIfNotEmpty("executionDependsOn", commandOptions.executionDependsOn);
        queryParams.putIfNotEmpty("executionTags", commandOptions.executionTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        ExecutionRetryParams executionRetryParams = new ExecutionRetryParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Execution> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(executionRetryParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            executionRetryParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), ExecutionRetryParams.class);
        } else {
            executionRetryParams.setExecution(commandOptions.execution);

        }
        return openCGAClient.getExecutionClient().retry(executionRetryParams, queryParams);
    }

    private RestResponse<Execution> search() throws Exception {

        logger.debug("Executing search in Executions command line");

        ExecutionsCommandOptions.SearchCommandOptions commandOptions = executionsCommandOptions.searchCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("otherStudies", commandOptions.otherStudies);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("internalToolId", commandOptions.internalToolId);
        queryParams.putIfNotEmpty("userId", commandOptions.userId);
        queryParams.putIfNotEmpty("priority", commandOptions.priority);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotNull("visited", commandOptions.visited);
        queryParams.putIfNotNull("isPipeline", commandOptions.isPipeline);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getExecutionClient().search(queryParams);
    }

    protected RestResponse<ExecutionTop> top() throws Exception {

        logger.debug("Executing top in Executions command line");

        return super.top();

    }

    private RestResponse<ObjectMap> acl() throws Exception {

        logger.debug("Executing acl in Executions command line");

        ExecutionsCommandOptions.AclCommandOptions commandOptions = executionsCommandOptions.aclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("member", commandOptions.member);
        queryParams.putIfNotNull("silent", commandOptions.silent);

        return openCGAClient.getExecutionClient().acl(commandOptions.executions, queryParams);
    }

    private RestResponse<Execution> delete() throws Exception {

        logger.debug("Executing delete in Executions command line");

        ExecutionsCommandOptions.DeleteCommandOptions commandOptions = executionsCommandOptions.deleteCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getExecutionClient().delete(commandOptions.executions, queryParams);
    }

    private RestResponse<Execution> info() throws Exception {

        logger.debug("Executing info in Executions command line");

        ExecutionsCommandOptions.InfoCommandOptions commandOptions = executionsCommandOptions.infoCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getExecutionClient().info(commandOptions.executions, queryParams);
    }

    private RestResponse<Execution> update() throws Exception {

        logger.debug("Executing update in Executions command line");

        ExecutionsCommandOptions.UpdateCommandOptions commandOptions = executionsCommandOptions.updateCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        ExecutionUpdateParams executionUpdateParams = new ExecutionUpdateParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Execution> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(executionUpdateParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            executionUpdateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), ExecutionUpdateParams.class);
        } else {
            // Generate beans for nested objects
            Pipeline pipelineParam = new Pipeline();
            pipelineParam.setUid(commandOptions.pipelineUid);
            pipelineParam.setId(commandOptions.pipelineId);
            pipelineParam.setStudyUid(commandOptions.pipelineStudyUid);
            pipelineParam.setUuid(commandOptions.pipelineUuid);
            pipelineParam.setDescription(commandOptions.pipelineDescription);
            pipelineParam.setDisabled(commandOptions.pipelineDisabled);
            pipelineParam.setRelease(commandOptions.pipelineRelease);
            pipelineParam.setVersion(commandOptions.pipelineVersion);
            pipelineParam.setCreationDate(commandOptions.pipelineCreationDate);
            pipelineParam.setModificationDate(commandOptions.pipelineModificationDate);
            //pipelineParam.setInternal(commandOptions.pipelineInternal);  // Unsupported param. FIXME
            pipelineParam.setParams(new HashMap<>(commandOptions.pipelineParams));
            //pipelineParam.setConfig(commandOptions.pipelineConfig);  // Unsupported param. FIXME
            //pipelineParam.setJobs(commandOptions.pipelineJobs);  // Unsupported param. FIXME

            File outDirParam = new File();
            outDirParam.setUid(commandOptions.outDirUid);
            outDirParam.setId(commandOptions.outDirId);
            outDirParam.setStudyUid(commandOptions.outDirStudyUid);
            //outDirParam.setAnnotationSets(commandOptions.outDirAnnotationSets);  // Unsupported param. FIXME
            outDirParam.setUuid(commandOptions.outDirUuid);
            outDirParam.setName(commandOptions.outDirName);
            outDirParam.setType(commandOptions.outDirType == null ? null : File.Type.valueOf(commandOptions.outDirType));
            outDirParam.setFormat(commandOptions.outDirFormat == null ? null : File.Format.valueOf(commandOptions.outDirFormat));
            outDirParam.setBioformat(commandOptions.outDirBioformat == null ? null : File.Bioformat.valueOf(commandOptions.outDirBioformat));
            outDirParam.setChecksum(commandOptions.outDirChecksum);
            //outDirParam.setUri(commandOptions.outDirUri);  // Unsupported param. FIXME
            outDirParam.setPath(commandOptions.outDirPath);
            outDirParam.setRelease(commandOptions.outDirRelease);
            outDirParam.setCreationDate(commandOptions.outDirCreationDate);
            outDirParam.setModificationDate(commandOptions.outDirModificationDate);
            outDirParam.setDescription(commandOptions.outDirDescription);
            outDirParam.setExternal(commandOptions.outDirExternal);
            outDirParam.setSize(commandOptions.outDirSize);
            //outDirParam.setSoftware(commandOptions.outDirSoftware);  // Unsupported param. FIXME
            //outDirParam.setExperiment(commandOptions.outDirExperiment);  // Unsupported param. FIXME
            outDirParam.setSampleIds(splitWithTrim(commandOptions.outDirSampleIds));
            outDirParam.setJobId(commandOptions.outDirJobId);
            outDirParam.setTags(splitWithTrim(commandOptions.outDirTags));
            //outDirParam.setRelatedFiles(commandOptions.outDirRelatedFiles);  // Unsupported param. FIXME
            //outDirParam.setQualityControl(commandOptions.outDirQualityControl);  // Unsupported param. FIXME
            outDirParam.setStats(new HashMap<>(commandOptions.outDirStats));
            //outDirParam.setStatus(commandOptions.outDirStatus);  // Unsupported param. FIXME
            //outDirParam.setInternal(commandOptions.outDirInternal);  // Unsupported param. FIXME
            outDirParam.setAttributes(new HashMap<>(commandOptions.outDirAttributes));

            //Set main body params
            executionUpdateParams.setPipeline(pipelineParam);
            executionUpdateParams.setParams(new HashMap<>(commandOptions.params));
            executionUpdateParams.setOutDir(outDirParam);

            if (commandOptions.visited != null) {
                executionUpdateParams.setVisited(commandOptions.visited);
            }
        }
        return openCGAClient.getExecutionClient().update(commandOptions.executions, executionUpdateParams, queryParams);
    }
}