package org.opencb.opencga.app.cli.main.options;

import com.beust.jcommander.JCommander;
import com.beust.jcommander.Parameter;
import com.beust.jcommander.Parameters;
import com.beust.jcommander.DynamicParameter;
import com.beust.jcommander.ParametersDelegate;

import java.util.HashMap;
import java.util.Map;
import java.util.List;

import static org.opencb.opencga.app.cli.GeneralCliOptions.*;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*  
*/

/**
 * This class contains methods for the Admin command line.
 *    PATH: /{apiVersion}/admin
 */
@Parameters(commandNames = {"admin"}, commandDescription = "Admin commands")
public class AdminCommandOptions {

        public JCommander jCommander;
        public CommonCommandOptions commonCommandOptions;

        public GroupByAuditCommandOptions groupByAuditCommandOptions;
        public InstallCatalogCommandOptions installCatalogCommandOptions;
        public JwtCatalogCommandOptions jwtCatalogCommandOptions;
        public DownloadAllResourceCommandOptions downloadAllResourceCommandOptions;
        public CreateUsersCommandOptions createUsersCommandOptions;
        public ImportUsersCommandOptions importUsersCommandOptions;
        public PermissionsUsersCommandOptions permissionsUsersCommandOptions;
        public SearchUsersCommandOptions searchUsersCommandOptions;
        public SyncUsersCommandOptions syncUsersCommandOptions;
        public UsersUpdateGroupsCommandOptions usersUpdateGroupsCommandOptions;


    public AdminCommandOptions(CommonCommandOptions commonCommandOptions, JCommander jCommander) {
    
        this.jCommander = jCommander;
        this.commonCommandOptions = commonCommandOptions;
        this.groupByAuditCommandOptions = new GroupByAuditCommandOptions();
        this.installCatalogCommandOptions = new InstallCatalogCommandOptions();
        this.jwtCatalogCommandOptions = new JwtCatalogCommandOptions();
        this.downloadAllResourceCommandOptions = new DownloadAllResourceCommandOptions();
        this.createUsersCommandOptions = new CreateUsersCommandOptions();
        this.importUsersCommandOptions = new ImportUsersCommandOptions();
        this.permissionsUsersCommandOptions = new PermissionsUsersCommandOptions();
        this.searchUsersCommandOptions = new SearchUsersCommandOptions();
        this.syncUsersCommandOptions = new SyncUsersCommandOptions();
        this.usersUpdateGroupsCommandOptions = new UsersUpdateGroupsCommandOptions();
    
    }
    
    @Parameters(commandNames = {"audit-group-by"}, commandDescription ="Group by operation")
    public class GroupByAuditCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--count"}, description = "Count the number of elements matching the group", required = false, help = true, arity = 0)
        public boolean count = false; 
    
        @Parameter(names = {"--limit"}, description = "Maximum number of documents (groups) to be returned", required = false, arity = 1)
        public Integer limit = 50; 
    
        @Parameter(names = {"--fields"}, description = "Comma separated list of fields by which to group by.", required = true, arity = 1)
        public String fields; 
    
        @Parameter(names = {"--entity"}, description = "Entity to be grouped by.", required = true, arity = 1)
        public String entity; 
    
        @Parameter(names = {"--action"}, description = "Action performed", required = false, arity = 1)
        public String action; 
    
        @Parameter(names = {"--before"}, description = "Object before update", required = false, arity = 1)
        public String before; 
    
        @Parameter(names = {"--after"}, description = "Object after update", required = false, arity = 1)
        public String after; 
    
        @Parameter(names = {"--date"}, description = "Date <,<=,>,>=(Format: yyyyMMddHHmmss) and yyyyMMddHHmmss-yyyyMMddHHmmss", required = false, arity = 1)
        public String date; 
    
    }

    @Parameters(commandNames = {"catalog-install"}, commandDescription ="Install OpenCGA database")
    public class InstallCatalogCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--secret-key"}, description = "The body web service secretKey parameter", required = false, arity = 1)
        public String secretKey;
    
        @Parameter(names = {"--password"}, description = "The body web service password parameter", required = false, arity = 1)
        public String password;
    
        @Parameter(names = {"--email"}, description = "The body web service email parameter", required = false, arity = 1)
        public String email;
    
    }

    @Parameters(commandNames = {"catalog-jwt"}, commandDescription ="Change JWT secret key")
    public class JwtCatalogCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--organization"}, description = "Organization id", required = false, arity = 1)
        public String organization; 
    
        @Parameter(names = {"--secret-key"}, description = "The body web service secretKey parameter", required = false, arity = 1)
        public String secretKey;
    
    }

    @Parameters(commandNames = {"resource-download-all"}, commandDescription ="Fetch resources from the public server and save them into the OpenCGA local installation")
    public class DownloadAllResourceCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--job-scheduled-start-time"}, description = "Time when the job is scheduled to start.", required = false, arity = 1)
        public String jobScheduledStartTime; 
    
        @Parameter(names = {"--job-priority"}, description = "Priority of the job", required = false, arity = 1)
        public String jobPriority; 
    
        @Parameter(names = {"--job-dry-run"}, description = "Flag indicating that the job will be executed in dry-run mode. In this mode, OpenCGA will validate that all parameters and prerequisites are correctly set for successful execution, but the job will not actually run.", required = false, arity = 1)
        public Boolean jobDryRun; 
    
        @Parameter(names = {"--resources"}, description = "List of resources to fetch; use '*' to fetch all resources.", required = false, arity = 1)
        public String resources;
    
    }

    @Parameters(commandNames = {"users-create"}, commandDescription ="Create a new user")
    public class CreateUsersCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--id"}, description = "The body web service id parameter", required = false, arity = 1)
        public String id;
    
        @Parameter(names = {"--name", "-n"}, description = "The body web service name parameter", required = false, arity = 1)
        public String name;
    
        @Parameter(names = {"--email"}, description = "The body web service email parameter", required = false, arity = 1)
        public String email;
    
        @Parameter(names = {"--password"}, description = "The body web service password parameter", required = false, arity = 1)
        public String password;
    
        @Parameter(names = {"--organization"}, description = "The body web service organization parameter", required = false, arity = 1)
        public String organization;
    
    }

    @Parameters(commandNames = {"users-import"}, commandDescription ="Import users or a group of users from LDAP or AAD")
    public class ImportUsersCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--organization"}, description = "Organization id", required = false, arity = 1)
        public String organization; 
    
        @Parameter(names = {"--authentication-origin-id"}, description = "The body web service authenticationOriginId parameter", required = false, arity = 1)
        public String authenticationOriginId;
    
        @Parameter(names = {"--id"}, description = "The body web service id parameter", required = false, arity = 1)
        public String id;
    
        @Parameter(names = {"--resource-type"}, description = "The body web service resourceType parameter", required = false, arity = 1)
        public String resourceType;
    
        @Parameter(names = {"--study", "-s"}, description = "The body web service study parameter", required = false, arity = 1)
        public String study;
    
        @Parameter(names = {"--study-group"}, description = "The body web service studyGroup parameter", required = false, arity = 1)
        public String studyGroup;
    
    }

    @Parameters(commandNames = {"users-permissions"}, commandDescription ="User permissions")
    public class PermissionsUsersCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[organization@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--entry-ids"}, description = "Comma separated list of entry ids.", required = false, arity = 1)
        public String entryIds; 
    
        @Parameter(names = {"--permissions"}, description = "Comma separated list of permissions to be retrieved.", required = false, arity = 1)
        public String permissions; 
    
        @Parameter(names = {"--category"}, description = "Category corresponding to the id's provided.", required = false, arity = 1)
        public String category; 
    
    }

    @Parameters(commandNames = {"users-search"}, commandDescription ="User search method")
    public class SearchUsersCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include", "-I"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude", "-E"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--limit"}, description = "Number of results to be returned", required = false, arity = 1)
        public Integer limit; 
    
        @Parameter(names = {"--skip"}, description = "Number of results to skip", required = false, arity = 1)
        public Integer skip; 
    
        @Parameter(names = {"--count"}, description = "Get the total number of results matching the query. Deactivated by default.", required = false, help = true, arity = 0)
        public boolean count = false; 
    
        @Parameter(names = {"--organization"}, description = "Organization id", required = false, arity = 1)
        public String organization; 
    
        @Parameter(names = {"--user", "-u"}, description = "User ID", required = false, arity = 1)
        public String user; 
    
        @Parameter(names = {"--authentication-id"}, description = "Authentication origin ID", required = false, arity = 1)
        public String authenticationId; 
    
    }

    @Parameters(commandNames = {"users-sync"}, commandDescription ="Synchronise a group of users from an authentication origin with a group in a study from catalog")
    public class SyncUsersCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--organization"}, description = "Organization id", required = false, arity = 1)
        public String organization; 
    
        @Parameter(names = {"--authentication-origin-id"}, description = "The body web service authenticationOriginId parameter", required = false, arity = 1)
        public String authenticationOriginId;
    
        @Parameter(names = {"--from"}, description = "The body web service from parameter", required = false, arity = 1)
        public String from;
    
        @Parameter(names = {"--to"}, description = "The body web service to parameter", required = false, arity = 1)
        public String to;
    
        @Parameter(names = {"--study", "-s"}, description = "The body web service study parameter", required = false, arity = 1)
        public String study;
    
        @Parameter(names = {"--sync-all"}, description = "The body web service syncAll parameter", required = false, help = true, arity = 0)
        public boolean syncAll = false;
    
        @Parameter(names = {"--force"}, description = "The body web service force parameter", required = false, help = true, arity = 0)
        public boolean force = false;
    
    }

    @Parameters(commandNames = {"update-groups-users"}, commandDescription ="Add or remove users from existing groups")
    public class UsersUpdateGroupsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--organization"}, description = "Organization id", required = false, arity = 1)
        public String organization; 
    
        @Parameter(names = {"--user", "-u"}, description = "User ID", required = true, arity = 1)
        public String user; 
    
        @Parameter(names = {"--action"}, description = "Action to be performed: ADD or REMOVE user to/from groups", required = false, arity = 1)
        public String action = "ADD"; 
    
        @Parameter(names = {"--study-ids"}, description = "The body web service studyIds parameter", required = false, arity = 1)
        public String studyIds;
    
        @Parameter(names = {"--group-ids"}, description = "The body web service groupIds parameter", required = false, arity = 1)
        public String groupIds;
    
    }

}