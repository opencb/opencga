package org.opencb.opencga.app.cli.main.executors;

import com.fasterxml.jackson.databind.DeserializationFeature;
import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.app.cli.main.*;
import org.opencb.opencga.core.response.RestResponse;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.commons.datastore.core.ObjectMap;

import org.opencb.opencga.catalog.exceptions.CatalogAuthenticationException;
import org.opencb.opencga.core.common.JacksonUtils;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.List;
import java.util.HashMap;
import org.opencb.opencga.core.response.QueryType;
import org.opencb.commons.utils.PrintUtils;

import org.opencb.opencga.app.cli.main.options.AnalysisClinicalCommandOptions;

import org.opencb.biodata.models.clinical.ClinicalDiscussion;
import org.opencb.biodata.models.clinical.ClinicalProperty;
import org.opencb.biodata.models.clinical.interpretation.ClinicalVariant;
import org.opencb.biodata.models.clinical.interpretation.InterpretationMethod;
import org.opencb.commons.datastore.core.FacetField;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.opencga.catalog.utils.ParamUtils.AclAction;
import org.opencb.opencga.catalog.utils.ParamUtils.AddRemoveReplaceAction;
import org.opencb.opencga.catalog.utils.ParamUtils.BasicUpdateAction;
import org.opencb.opencga.catalog.utils.ParamUtils.SaveInterpretationAs;
import org.opencb.opencga.catalog.utils.ParamUtils.UpdateAction;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByGeneSummary;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByIndividual;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByIndividualSummary;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByVariant;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByVariantSummary;
import org.opencb.opencga.core.models.analysis.knockout.RgaKnockoutByGene;
import org.opencb.opencga.core.models.clinical.CancerTieringInterpretationAnalysisParams;
import org.opencb.opencga.core.models.clinical.ClinicalAnalysis;
import org.opencb.opencga.core.models.clinical.ClinicalAnalysisAclEntryList;
import org.opencb.opencga.core.models.clinical.ClinicalAnalysisAclUpdateParams;
import org.opencb.opencga.core.models.clinical.ClinicalAnalysisCreateParams;
import org.opencb.opencga.core.models.clinical.ClinicalAnalysisQualityControl;
import org.opencb.opencga.core.models.clinical.ClinicalAnalysisQualityControlUpdateParam;
import org.opencb.opencga.core.models.clinical.ClinicalAnalysisUpdateParams;
import org.opencb.opencga.core.models.clinical.ClinicalAnalystParam;
import org.opencb.opencga.core.models.clinical.ClinicalReport;
import org.opencb.opencga.core.models.clinical.DisorderReferenceParam;
import org.opencb.opencga.core.models.clinical.ExomiserInterpretationAnalysisParams;
import org.opencb.opencga.core.models.clinical.FamilyParam;
import org.opencb.opencga.core.models.clinical.Interpretation;
import org.opencb.opencga.core.models.clinical.InterpretationCreateParams;
import org.opencb.opencga.core.models.clinical.InterpretationUpdateParams;
import org.opencb.opencga.core.models.clinical.PriorityParam;
import org.opencb.opencga.core.models.clinical.ProbandParam;
import org.opencb.opencga.core.models.clinical.RgaAnalysisParams;
import org.opencb.opencga.core.models.clinical.TeamInterpretationAnalysisParams;
import org.opencb.opencga.core.models.clinical.TieringInterpretationAnalysisParams;
import org.opencb.opencga.core.models.clinical.ZettaInterpretationAnalysisParams;
import org.opencb.opencga.core.models.common.StatusParam;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.opencga.core.models.study.configuration.ClinicalAnalysisStudyConfiguration;
import org.opencb.opencga.core.models.study.configuration.ClinicalConsentAnnotationParam;
import org.opencb.opencga.core.models.study.configuration.ClinicalConsentConfiguration;
import org.opencb.opencga.core.models.study.configuration.InterpretationStudyConfiguration;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*  
*/
/**
 * This class contains methods for the Analysis - Clinical command line.
 *    PATH: /{apiVersion}/analysis/clinical
 */
public class AnalysisClinicalCommandExecutor extends OpencgaCommandExecutor {

    public AnalysisClinicalCommandOptions analysisClinicalCommandOptions;

    public AnalysisClinicalCommandExecutor(AnalysisClinicalCommandOptions analysisClinicalCommandOptions) throws CatalogAuthenticationException {
        super(analysisClinicalCommandOptions.commonCommandOptions);
        this.analysisClinicalCommandOptions = analysisClinicalCommandOptions;
    }

    @Override
    public void execute() throws Exception {

        logger.debug("Executing Analysis - Clinical command line");

        String subCommandString = getParsedSubCommand(analysisClinicalCommandOptions.jCommander);

        RestResponse queryResponse = null;

        switch (subCommandString) {
            case "acl-update":
                queryResponse = updateAcl();
                break;
            case "clinical-configuration-update":
                queryResponse = updateClinicalConfiguration();
                break;
            case "create":
                queryResponse = create();
                break;
            case "distinct":
                queryResponse = distinct();
                break;
            case "interpretation-distinct":
                queryResponse = distinctInterpretation();
                break;
            case "interpretation-search":
                queryResponse = searchInterpretation();
                break;
            case "interpretation-info":
                queryResponse = infoInterpretation();
                break;
            case "interpreter-cancer-tiering-run":
                queryResponse = runInterpreterCancerTiering();
                break;
            case "interpreter-exomiser-run":
                queryResponse = runInterpreterExomiser();
                break;
            case "interpreter-team-run":
                queryResponse = runInterpreterTeam();
                break;
            case "interpreter-tiering-run":
                queryResponse = runInterpreterTiering();
                break;
            case "interpreter-zetta-run":
                queryResponse = runInterpreterZetta();
                break;
            case "rga-aggregation-stats":
                queryResponse = aggregationStatsRga();
                break;
            case "rga-gene-query":
                queryResponse = queryRgaGene();
                break;
            case "rga-gene-summary":
                queryResponse = summaryRgaGene();
                break;
            case "rga-index-run":
                queryResponse = runRgaIndex();
                break;
            case "rga-individual-query":
                queryResponse = queryRgaIndividual();
                break;
            case "rga-individual-summary":
                queryResponse = summaryRgaIndividual();
                break;
            case "rga-variant-query":
                queryResponse = queryRgaVariant();
                break;
            case "rga-variant-summary":
                queryResponse = summaryRgaVariant();
                break;
            case "search":
                queryResponse = search();
                break;
            case "variant-query":
                queryResponse = queryVariant();
                break;
            case "acl":
                queryResponse = acl();
                break;
            case "delete":
                queryResponse = delete();
                break;
            case "update":
                queryResponse = update();
                break;
            case "info":
                queryResponse = info();
                break;
            case "interpretation-create":
                queryResponse = createInterpretation();
                break;
            case "interpretation-clear":
                queryResponse = clearInterpretation();
                break;
            case "interpretation-delete":
                queryResponse = deleteInterpretation();
                break;
            case "interpretation-revert":
                queryResponse = revertInterpretation();
                break;
            case "interpretation-update":
                queryResponse = updateInterpretation();
                break;
            default:
                logger.error("Subcommand not valid");
                break;
        }

        createOutput(queryResponse);

    }

    private RestResponse<ClinicalAnalysisAclEntryList> updateAcl() throws Exception {
        logger.debug("Executing updateAcl in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.UpdateAclCommandOptions commandOptions = analysisClinicalCommandOptions.updateAclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("propagate", commandOptions.propagate);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        ClinicalAnalysisAclUpdateParams clinicalAnalysisAclUpdateParams = null;
        if (commandOptions.jsonDataModel) {
            clinicalAnalysisAclUpdateParams = new ClinicalAnalysisAclUpdateParams();
            RestResponse<ClinicalAnalysisAclEntryList> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(clinicalAnalysisAclUpdateParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            clinicalAnalysisAclUpdateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), ClinicalAnalysisAclUpdateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "permissions",commandOptions.permissions, true);
            putNestedIfNotEmpty(beanParams, "clinicalAnalysis",commandOptions.clinicalAnalysis, true);

            clinicalAnalysisAclUpdateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), ClinicalAnalysisAclUpdateParams.class);
        }
        return openCGAClient.getClinicalAnalysisClient().updateAcl(commandOptions.members, commandOptions.action, clinicalAnalysisAclUpdateParams, queryParams);
    }

    private RestResponse<ObjectMap> updateClinicalConfiguration() throws Exception {
        logger.debug("Executing updateClinicalConfiguration in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.UpdateClinicalConfigurationCommandOptions commandOptions = analysisClinicalCommandOptions.updateClinicalConfigurationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        ClinicalAnalysisStudyConfiguration clinicalAnalysisStudyConfiguration = null;
        if (commandOptions.jsonDataModel) {
            clinicalAnalysisStudyConfiguration = new ClinicalAnalysisStudyConfiguration();
            RestResponse<ObjectMap> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(clinicalAnalysisStudyConfiguration));
            return res;
        } else if (commandOptions.jsonFile != null) {
            clinicalAnalysisStudyConfiguration = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), ClinicalAnalysisStudyConfiguration.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotNull(beanParams, "interpretation.defaultFilter",commandOptions.interpretationDefaultFilter, true);

            clinicalAnalysisStudyConfiguration = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), ClinicalAnalysisStudyConfiguration.class);
        }
        return openCGAClient.getClinicalAnalysisClient().updateClinicalConfiguration(clinicalAnalysisStudyConfiguration, queryParams);
    }

    private RestResponse<ClinicalAnalysis> create() throws Exception {
        logger.debug("Executing create in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.CreateCommandOptions commandOptions = analysisClinicalCommandOptions.createCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("skipCreateDefaultInterpretation", commandOptions.skipCreateDefaultInterpretation);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        ClinicalAnalysisCreateParams clinicalAnalysisCreateParams = null;
        if (commandOptions.jsonDataModel) {
            clinicalAnalysisCreateParams = new ClinicalAnalysisCreateParams();
            RestResponse<ClinicalAnalysis> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(clinicalAnalysisCreateParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            clinicalAnalysisCreateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), ClinicalAnalysisCreateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "id",commandOptions.id, true);
            putNestedIfNotEmpty(beanParams, "description",commandOptions.description, true);
            putNestedIfNotNull(beanParams, "type",commandOptions.type, true);
            putNestedIfNotEmpty(beanParams, "disorder.id",commandOptions.disorderId, true);
            putNestedIfNotEmpty(beanParams, "proband.id",commandOptions.probandId, true);
            putNestedIfNotEmpty(beanParams, "family.id",commandOptions.familyId, true);
            putNestedIfNotNull(beanParams, "panelLock",commandOptions.panelLock, true);
            putNestedIfNotEmpty(beanParams, "analyst.id",commandOptions.analystId, true);
            putNestedIfNotEmpty(beanParams, "report.title",commandOptions.reportTitle, true);
            putNestedIfNotEmpty(beanParams, "report.overview",commandOptions.reportOverview, true);
            putNestedIfNotEmpty(beanParams, "report.logo",commandOptions.reportLogo, true);
            putNestedIfNotEmpty(beanParams, "report.signedBy",commandOptions.reportSignedBy, true);
            putNestedIfNotEmpty(beanParams, "report.signature",commandOptions.reportSignature, true);
            putNestedIfNotEmpty(beanParams, "report.date",commandOptions.reportDate, true);
            putNestedIfNotEmpty(beanParams, "interpretation.description",commandOptions.interpretationDescription, true);
            putNestedIfNotEmpty(beanParams, "interpretation.clinicalAnalysisId",commandOptions.interpretationClinicalAnalysisId, true);
            putNestedIfNotEmpty(beanParams, "interpretation.creationDate",commandOptions.interpretationCreationDate, true);
            putNestedIfNotEmpty(beanParams, "interpretation.modificationDate",commandOptions.interpretationModificationDate, true);
            putNestedIfNotNull(beanParams, "interpretation.locked",commandOptions.interpretationLocked, true);
            putNestedIfNotNull(beanParams, "interpretation.attributes",commandOptions.interpretationAttributes, true);
            putNestedIfNotNull(beanParams, "qualityControl.summary",commandOptions.qualityControlSummary, true);
            putNestedIfNotEmpty(beanParams, "creationDate",commandOptions.creationDate, true);
            putNestedIfNotEmpty(beanParams, "modificationDate",commandOptions.modificationDate, true);
            putNestedIfNotEmpty(beanParams, "dueDate",commandOptions.dueDate, true);
            putNestedIfNotEmpty(beanParams, "priority.id",commandOptions.priorityId, true);
            putNestedIfNotNull(beanParams, "attributes",commandOptions.attributes, true);
            putNestedIfNotEmpty(beanParams, "status.id",commandOptions.statusId, true);

            clinicalAnalysisCreateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), ClinicalAnalysisCreateParams.class);
        }
        return openCGAClient.getClinicalAnalysisClient().create(clinicalAnalysisCreateParams, queryParams);
    }

    private RestResponse<ObjectMap> distinct() throws Exception {
        logger.debug("Executing distinct in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.DistinctCommandOptions commandOptions = analysisClinicalCommandOptions.distinctCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("disorder", commandOptions.disorder);
        queryParams.putIfNotEmpty("files", commandOptions.files);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("individual", commandOptions.individual);
        queryParams.putIfNotEmpty("proband", commandOptions.proband);
        queryParams.putIfNotEmpty("probandSamples", commandOptions.probandSamples);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("familyMembers", commandOptions.familyMembers);
        queryParams.putIfNotEmpty("familyMemberSamples", commandOptions.familyMemberSamples);
        queryParams.putIfNotEmpty("panels", commandOptions.panels);
        queryParams.putIfNotNull("locked", commandOptions.locked);
        queryParams.putIfNotEmpty("analystId", commandOptions.analystId);
        queryParams.putIfNotEmpty("priority", commandOptions.priority);
        queryParams.putIfNotEmpty("flags", commandOptions.flags);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("dueDate", commandOptions.dueDate);
        queryParams.putIfNotEmpty("qualityControlSummary", commandOptions.qualityControlSummary);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().distinct(commandOptions.field, queryParams);
    }

    private RestResponse<ObjectMap> distinctInterpretation() throws Exception {
        logger.debug("Executing distinctInterpretation in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.DistinctInterpretationCommandOptions commandOptions = analysisClinicalCommandOptions.distinctInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("clinicalAnalysisId", commandOptions.clinicalAnalysisId);
        queryParams.putIfNotEmpty("analystId", commandOptions.analystId);
        queryParams.putIfNotEmpty("methodName", commandOptions.methodName);
        queryParams.putIfNotEmpty("panels", commandOptions.panels);
        queryParams.putIfNotEmpty("primaryFindings", commandOptions.primaryFindings);
        queryParams.putIfNotEmpty("secondaryFindings", commandOptions.secondaryFindings);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().distinctInterpretation(commandOptions.field, queryParams);
    }

    private RestResponse<Interpretation> searchInterpretation() throws Exception {
        logger.debug("Executing searchInterpretation in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.SearchInterpretationCommandOptions commandOptions = analysisClinicalCommandOptions.searchInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("sort", commandOptions.sort);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("clinicalAnalysisId", commandOptions.clinicalAnalysisId);
        queryParams.putIfNotEmpty("analystId", commandOptions.analystId);
        queryParams.putIfNotEmpty("methodName", commandOptions.methodName);
        queryParams.putIfNotEmpty("panels", commandOptions.panels);
        queryParams.putIfNotEmpty("primaryFindings", commandOptions.primaryFindings);
        queryParams.putIfNotEmpty("secondaryFindings", commandOptions.secondaryFindings);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().searchInterpretation(queryParams);
    }

    private RestResponse<Interpretation> infoInterpretation() throws Exception {
        logger.debug("Executing infoInterpretation in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.InfoInterpretationCommandOptions commandOptions = analysisClinicalCommandOptions.infoInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("version", commandOptions.version);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().infoInterpretation(commandOptions.interpretations, queryParams);
    }

    private RestResponse<Job> runInterpreterCancerTiering() throws Exception {
        logger.debug("Executing runInterpreterCancerTiering in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.RunInterpreterCancerTieringCommandOptions commandOptions = analysisClinicalCommandOptions.runInterpreterCancerTieringCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        CancerTieringInterpretationAnalysisParams cancerTieringInterpretationAnalysisParams = null;
        if (commandOptions.jsonDataModel) {
            cancerTieringInterpretationAnalysisParams = new CancerTieringInterpretationAnalysisParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(cancerTieringInterpretationAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            cancerTieringInterpretationAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), CancerTieringInterpretationAnalysisParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "clinicalAnalysis",commandOptions.clinicalAnalysis, true);
            putNestedIfNotNull(beanParams, "discardedVariants",commandOptions.discardedVariants, true);
            putNestedIfNotNull(beanParams, "primary",commandOptions.primary, true);

            cancerTieringInterpretationAnalysisParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), CancerTieringInterpretationAnalysisParams.class);
        }
        return openCGAClient.getClinicalAnalysisClient().runInterpreterCancerTiering(cancerTieringInterpretationAnalysisParams, queryParams);
    }

    private RestResponse<Job> runInterpreterExomiser() throws Exception {
        logger.debug("Executing runInterpreterExomiser in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.RunInterpreterExomiserCommandOptions commandOptions = analysisClinicalCommandOptions.runInterpreterExomiserCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        ExomiserInterpretationAnalysisParams exomiserInterpretationAnalysisParams = null;
        if (commandOptions.jsonDataModel) {
            exomiserInterpretationAnalysisParams = new ExomiserInterpretationAnalysisParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(exomiserInterpretationAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            exomiserInterpretationAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), ExomiserInterpretationAnalysisParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "clinicalAnalysis",commandOptions.clinicalAnalysis, true);

            exomiserInterpretationAnalysisParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), ExomiserInterpretationAnalysisParams.class);
        }
        return openCGAClient.getClinicalAnalysisClient().runInterpreterExomiser(exomiserInterpretationAnalysisParams, queryParams);
    }

    private RestResponse<Job> runInterpreterTeam() throws Exception {
        logger.debug("Executing runInterpreterTeam in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.RunInterpreterTeamCommandOptions commandOptions = analysisClinicalCommandOptions.runInterpreterTeamCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        TeamInterpretationAnalysisParams teamInterpretationAnalysisParams = null;
        if (commandOptions.jsonDataModel) {
            teamInterpretationAnalysisParams = new TeamInterpretationAnalysisParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(teamInterpretationAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            teamInterpretationAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), TeamInterpretationAnalysisParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "clinicalAnalysis",commandOptions.clinicalAnalysis, true);
            putNestedIfNotNull(beanParams, "panels",commandOptions.panels, true);
            putNestedIfNotEmpty(beanParams, "familySegregation",commandOptions.familySegregation, true);
            putNestedIfNotNull(beanParams, "primary",commandOptions.primary, true);

            teamInterpretationAnalysisParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), TeamInterpretationAnalysisParams.class);
        }
        return openCGAClient.getClinicalAnalysisClient().runInterpreterTeam(teamInterpretationAnalysisParams, queryParams);
    }

    private RestResponse<Job> runInterpreterTiering() throws Exception {
        logger.debug("Executing runInterpreterTiering in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.RunInterpreterTieringCommandOptions commandOptions = analysisClinicalCommandOptions.runInterpreterTieringCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        TieringInterpretationAnalysisParams tieringInterpretationAnalysisParams = null;
        if (commandOptions.jsonDataModel) {
            tieringInterpretationAnalysisParams = new TieringInterpretationAnalysisParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(tieringInterpretationAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            tieringInterpretationAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), TieringInterpretationAnalysisParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "clinicalAnalysis",commandOptions.clinicalAnalysis, true);
            putNestedIfNotNull(beanParams, "panels",commandOptions.panels, true);
            putNestedIfNotNull(beanParams, "penetrance",commandOptions.penetrance, true);
            putNestedIfNotNull(beanParams, "primary",commandOptions.primary, true);

            tieringInterpretationAnalysisParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), TieringInterpretationAnalysisParams.class);
        }
        return openCGAClient.getClinicalAnalysisClient().runInterpreterTiering(tieringInterpretationAnalysisParams, queryParams);
    }

    private RestResponse<Job> runInterpreterZetta() throws Exception {
        logger.debug("Executing runInterpreterZetta in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.RunInterpreterZettaCommandOptions commandOptions = analysisClinicalCommandOptions.runInterpreterZettaCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        ZettaInterpretationAnalysisParams zettaInterpretationAnalysisParams = null;
        if (commandOptions.jsonDataModel) {
            zettaInterpretationAnalysisParams = new ZettaInterpretationAnalysisParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(zettaInterpretationAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            zettaInterpretationAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), ZettaInterpretationAnalysisParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "clinicalAnalysis",commandOptions.clinicalAnalysis, true);
            putNestedIfNotNull(beanParams, "id",commandOptions.id, true);
            putNestedIfNotEmpty(beanParams, "region",commandOptions.region, true);
            putNestedIfNotEmpty(beanParams, "type",commandOptions.type, true);
            putNestedIfNotEmpty(beanParams, "study",commandOptions.bodyStudy, true);
            putNestedIfNotEmpty(beanParams, "file",commandOptions.file, true);
            putNestedIfNotEmpty(beanParams, "filter",commandOptions.filter, true);
            putNestedIfNotEmpty(beanParams, "qual",commandOptions.qual, true);
            putNestedIfNotEmpty(beanParams, "fileData",commandOptions.fileData, true);
            putNestedIfNotEmpty(beanParams, "sample",commandOptions.sample, true);
            putNestedIfNotEmpty(beanParams, "sampleData",commandOptions.sampleData, true);
            putNestedIfNotEmpty(beanParams, "sampleAnnotation",commandOptions.sampleAnnotation, true);
            putNestedIfNotEmpty(beanParams, "sampleMetadata",commandOptions.sampleMetadata, true);
            putNestedIfNotEmpty(beanParams, "cohort",commandOptions.cohort, true);
            putNestedIfNotEmpty(beanParams, "cohortStatsRef",commandOptions.cohortStatsRef, true);
            putNestedIfNotEmpty(beanParams, "cohortStatsAlt",commandOptions.cohortStatsAlt, true);
            putNestedIfNotEmpty(beanParams, "cohortStatsMaf",commandOptions.cohortStatsMaf, true);
            putNestedIfNotEmpty(beanParams, "cohortStatsMgf",commandOptions.cohortStatsMgf, true);
            putNestedIfNotEmpty(beanParams, "cohortStatsPass",commandOptions.cohortStatsPass, true);
            putNestedIfNotEmpty(beanParams, "score",commandOptions.score, true);
            putNestedIfNotEmpty(beanParams, "family",commandOptions.family, true);
            putNestedIfNotEmpty(beanParams, "familyDisorder",commandOptions.familyDisorder, true);
            putNestedIfNotEmpty(beanParams, "familySegregation",commandOptions.familySegregation, true);
            putNestedIfNotEmpty(beanParams, "familyMembers",commandOptions.familyMembers, true);
            putNestedIfNotEmpty(beanParams, "familyProband",commandOptions.familyProband, true);
            putNestedIfNotEmpty(beanParams, "gene",commandOptions.gene, true);
            putNestedIfNotEmpty(beanParams, "ct",commandOptions.ct, true);
            putNestedIfNotEmpty(beanParams, "xref",commandOptions.xref, true);
            putNestedIfNotEmpty(beanParams, "biotype",commandOptions.biotype, true);
            putNestedIfNotEmpty(beanParams, "proteinSubstitution",commandOptions.proteinSubstitution, true);
            putNestedIfNotEmpty(beanParams, "conservation",commandOptions.conservation, true);
            putNestedIfNotEmpty(beanParams, "populationFrequencyAlt",commandOptions.populationFrequencyAlt, true);
            putNestedIfNotEmpty(beanParams, "populationFrequencyRef",commandOptions.populationFrequencyRef, true);
            putNestedIfNotEmpty(beanParams, "populationFrequencyMaf",commandOptions.populationFrequencyMaf, true);
            putNestedIfNotEmpty(beanParams, "transcriptFlag",commandOptions.transcriptFlag, true);
            putNestedIfNotEmpty(beanParams, "geneTraitId",commandOptions.geneTraitId, true);
            putNestedIfNotEmpty(beanParams, "go",commandOptions.go, true);
            putNestedIfNotEmpty(beanParams, "expression",commandOptions.expression, true);
            putNestedIfNotEmpty(beanParams, "proteinKeyword",commandOptions.proteinKeyword, true);
            putNestedIfNotEmpty(beanParams, "drug",commandOptions.drug, true);
            putNestedIfNotEmpty(beanParams, "functionalScore",commandOptions.functionalScore, true);
            putNestedIfNotEmpty(beanParams, "clinical",commandOptions.clinical, true);
            putNestedIfNotEmpty(beanParams, "clinicalSignificance",commandOptions.clinicalSignificance, true);
            putNestedIfNotNull(beanParams, "clinicalConfirmedStatus",commandOptions.clinicalConfirmedStatus, true);
            putNestedIfNotEmpty(beanParams, "customAnnotation",commandOptions.customAnnotation, true);
            putNestedIfNotEmpty(beanParams, "panel",commandOptions.panel, true);
            putNestedIfNotEmpty(beanParams, "panelModeOfInheritance",commandOptions.panelModeOfInheritance, true);
            putNestedIfNotEmpty(beanParams, "panelConfidence",commandOptions.panelConfidence, true);
            putNestedIfNotEmpty(beanParams, "panelRoleInCancer",commandOptions.panelRoleInCancer, true);
            putNestedIfNotEmpty(beanParams, "trait",commandOptions.trait, true);
            putNestedIfNotNull(beanParams, "primary",commandOptions.primary, true);

            zettaInterpretationAnalysisParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), ZettaInterpretationAnalysisParams.class);
        }
        return openCGAClient.getClinicalAnalysisClient().runInterpreterZetta(zettaInterpretationAnalysisParams, queryParams);
    }

    private RestResponse<FacetField> aggregationStatsRga() throws Exception {
        logger.debug("Executing aggregationStatsRga in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.AggregationStatsRgaCommandOptions commandOptions = analysisClinicalCommandOptions.aggregationStatsRgaCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().aggregationStatsRga(commandOptions.field, queryParams);
    }

    private RestResponse<RgaKnockoutByGene> queryRgaGene() throws Exception {
        logger.debug("Executing queryRgaGene in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.QueryRgaGeneCommandOptions commandOptions = analysisClinicalCommandOptions.queryRgaGeneCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("includeIndividual", commandOptions.includeIndividual);
        queryParams.putIfNotNull("skipIndividual", commandOptions.skipIndividual);
        queryParams.putIfNotNull("limitIndividual", commandOptions.limitIndividual);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().queryRgaGene(queryParams);
    }

    private RestResponse<KnockoutByGeneSummary> summaryRgaGene() throws Exception {
        logger.debug("Executing summaryRgaGene in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.SummaryRgaGeneCommandOptions commandOptions = analysisClinicalCommandOptions.summaryRgaGeneCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().summaryRgaGene(queryParams);
    }

    private RestResponse<Job> runRgaIndex() throws Exception {
        logger.debug("Executing runRgaIndex in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.RunRgaIndexCommandOptions commandOptions = analysisClinicalCommandOptions.runRgaIndexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotNull("auxiliarIndex", commandOptions.auxiliarIndex);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        RgaAnalysisParams rgaAnalysisParams = null;
        if (commandOptions.jsonDataModel) {
            rgaAnalysisParams = new RgaAnalysisParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(rgaAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            rgaAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), RgaAnalysisParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "file",commandOptions.file, true);

            rgaAnalysisParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), RgaAnalysisParams.class);
        }
        return openCGAClient.getClinicalAnalysisClient().runRgaIndex(rgaAnalysisParams, queryParams);
    }

    private RestResponse<KnockoutByIndividual> queryRgaIndividual() throws Exception {
        logger.debug("Executing queryRgaIndividual in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.QueryRgaIndividualCommandOptions commandOptions = analysisClinicalCommandOptions.queryRgaIndividualCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().queryRgaIndividual(queryParams);
    }

    private RestResponse<KnockoutByIndividualSummary> summaryRgaIndividual() throws Exception {
        logger.debug("Executing summaryRgaIndividual in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.SummaryRgaIndividualCommandOptions commandOptions = analysisClinicalCommandOptions.summaryRgaIndividualCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().summaryRgaIndividual(queryParams);
    }

    private RestResponse<KnockoutByVariant> queryRgaVariant() throws Exception {
        logger.debug("Executing queryRgaVariant in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.QueryRgaVariantCommandOptions commandOptions = analysisClinicalCommandOptions.queryRgaVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("includeIndividual", commandOptions.includeIndividual);
        queryParams.putIfNotNull("skipIndividual", commandOptions.skipIndividual);
        queryParams.putIfNotNull("limitIndividual", commandOptions.limitIndividual);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().queryRgaVariant(queryParams);
    }

    private RestResponse<KnockoutByVariantSummary> summaryRgaVariant() throws Exception {
        logger.debug("Executing summaryRgaVariant in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.SummaryRgaVariantCommandOptions commandOptions = analysisClinicalCommandOptions.summaryRgaVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().summaryRgaVariant(queryParams);
    }

    private RestResponse<ClinicalAnalysis> search() throws Exception {
        logger.debug("Executing search in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.SearchCommandOptions commandOptions = analysisClinicalCommandOptions.searchCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("disorder", commandOptions.disorder);
        queryParams.putIfNotEmpty("files", commandOptions.files);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("individual", commandOptions.individual);
        queryParams.putIfNotEmpty("proband", commandOptions.proband);
        queryParams.putIfNotEmpty("probandSamples", commandOptions.probandSamples);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("familyMembers", commandOptions.familyMembers);
        queryParams.putIfNotEmpty("familyMemberSamples", commandOptions.familyMemberSamples);
        queryParams.putIfNotEmpty("panels", commandOptions.panels);
        queryParams.putIfNotNull("locked", commandOptions.locked);
        queryParams.putIfNotEmpty("analystId", commandOptions.analystId);
        queryParams.putIfNotEmpty("priority", commandOptions.priority);
        queryParams.putIfNotEmpty("flags", commandOptions.flags);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("dueDate", commandOptions.dueDate);
        queryParams.putIfNotEmpty("qualityControlSummary", commandOptions.qualityControlSummary);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().search(queryParams);
    }

    private RestResponse<ClinicalVariant> queryVariant() throws Exception {
        logger.debug("Executing queryVariant in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.QueryVariantCommandOptions commandOptions = analysisClinicalCommandOptions.queryVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotNull("approximateCount", commandOptions.approximateCount);
        queryParams.putIfNotNull("approximateCountSamplingSize", commandOptions.approximateCountSamplingSize);
        queryParams.putIfNotEmpty("savedFilter", commandOptions.savedFilter);
        queryParams.putIfNotEmpty("includeInterpretation", commandOptions.includeInterpretation);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("qual", commandOptions.qual);
        queryParams.putIfNotEmpty("fileData", commandOptions.fileData);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("sampleData", commandOptions.sampleData);
        queryParams.putIfNotEmpty("sampleAnnotation", commandOptions.sampleAnnotation);
        queryParams.putIfNotEmpty("cohort", commandOptions.cohort);
        queryParams.putIfNotEmpty("cohortStatsRef", commandOptions.cohortStatsRef);
        queryParams.putIfNotEmpty("cohortStatsAlt", commandOptions.cohortStatsAlt);
        queryParams.putIfNotEmpty("cohortStatsMaf", commandOptions.cohortStatsMaf);
        queryParams.putIfNotEmpty("cohortStatsMgf", commandOptions.cohortStatsMgf);
        queryParams.putIfNotEmpty("cohortStatsPass", commandOptions.cohortStatsPass);
        queryParams.putIfNotEmpty("missingAlleles", commandOptions.missingAlleles);
        queryParams.putIfNotEmpty("missingGenotypes", commandOptions.missingGenotypes);
        queryParams.putIfNotEmpty("score", commandOptions.score);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("familyDisorder", commandOptions.familyDisorder);
        queryParams.putIfNotEmpty("familySegregation", commandOptions.familySegregation);
        queryParams.putIfNotEmpty("familyMembers", commandOptions.familyMembers);
        queryParams.putIfNotEmpty("familyProband", commandOptions.familyProband);
        queryParams.putIfNotEmpty("gene", commandOptions.gene);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("xref", commandOptions.xref);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("proteinSubstitution", commandOptions.proteinSubstitution);
        queryParams.putIfNotEmpty("conservation", commandOptions.conservation);
        queryParams.putIfNotEmpty("populationFrequencyAlt", commandOptions.populationFrequencyAlt);
        queryParams.putIfNotEmpty("populationFrequencyRef", commandOptions.populationFrequencyRef);
        queryParams.putIfNotEmpty("populationFrequencyMaf", commandOptions.populationFrequencyMaf);
        queryParams.putIfNotEmpty("transcriptFlag", commandOptions.transcriptFlag);
        queryParams.putIfNotEmpty("geneTraitId", commandOptions.geneTraitId);
        queryParams.putIfNotEmpty("go", commandOptions.go);
        queryParams.putIfNotEmpty("expression", commandOptions.expression);
        queryParams.putIfNotEmpty("proteinKeyword", commandOptions.proteinKeyword);
        queryParams.putIfNotEmpty("drug", commandOptions.drug);
        queryParams.putIfNotEmpty("functionalScore", commandOptions.functionalScore);
        queryParams.putIfNotEmpty("clinical", commandOptions.clinical);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotNull("clinicalConfirmedStatus", commandOptions.clinicalConfirmedStatus);
        queryParams.putIfNotEmpty("customAnnotation", commandOptions.customAnnotation);
        queryParams.putIfNotEmpty("panel", commandOptions.panel);
        queryParams.putIfNotEmpty("panelModeOfInheritance", commandOptions.panelModeOfInheritance);
        queryParams.putIfNotEmpty("panelConfidence", commandOptions.panelConfidence);
        queryParams.putIfNotEmpty("panelRoleInCancer", commandOptions.panelRoleInCancer);
        queryParams.putIfNotEmpty("panelFeatureType", commandOptions.panelFeatureType);
        queryParams.putIfNotNull("panelIntersection", commandOptions.panelIntersection);
        queryParams.putIfNotEmpty("trait", commandOptions.trait);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().queryVariant(queryParams);
    }

    private RestResponse<ClinicalAnalysisAclEntryList> acl() throws Exception {
        logger.debug("Executing acl in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.AclCommandOptions commandOptions = analysisClinicalCommandOptions.aclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("member", commandOptions.member);
        queryParams.putIfNotNull("silent", commandOptions.silent);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().acl(commandOptions.clinicalAnalyses, queryParams);
    }

    private RestResponse<ClinicalAnalysis> delete() throws Exception {
        logger.debug("Executing delete in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.DeleteCommandOptions commandOptions = analysisClinicalCommandOptions.deleteCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("force", commandOptions.force);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().delete(commandOptions.clinicalAnalyses, queryParams);
    }

    private RestResponse<ClinicalAnalysis> update() throws Exception {
        logger.debug("Executing update in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.UpdateCommandOptions commandOptions = analysisClinicalCommandOptions.updateCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        ClinicalAnalysisUpdateParams clinicalAnalysisUpdateParams = null;
        if (commandOptions.jsonDataModel) {
            clinicalAnalysisUpdateParams = new ClinicalAnalysisUpdateParams();
            RestResponse<ClinicalAnalysis> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(clinicalAnalysisUpdateParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            clinicalAnalysisUpdateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), ClinicalAnalysisUpdateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "id",commandOptions.id, true);
            putNestedIfNotEmpty(beanParams, "description",commandOptions.description, true);
            putNestedIfNotNull(beanParams, "type",commandOptions.type, true);
            putNestedIfNotEmpty(beanParams, "disorder.id",commandOptions.disorderId, true);
            putNestedIfNotNull(beanParams, "panelLock",commandOptions.panelLock, true);
            putNestedIfNotEmpty(beanParams, "proband.id",commandOptions.probandId, true);
            putNestedIfNotEmpty(beanParams, "family.id",commandOptions.familyId, true);
            putNestedIfNotNull(beanParams, "locked",commandOptions.locked, true);
            putNestedIfNotEmpty(beanParams, "analyst.id",commandOptions.analystId, true);
            putNestedIfNotEmpty(beanParams, "report.title",commandOptions.reportTitle, true);
            putNestedIfNotEmpty(beanParams, "report.overview",commandOptions.reportOverview, true);
            putNestedIfNotEmpty(beanParams, "report.logo",commandOptions.reportLogo, true);
            putNestedIfNotEmpty(beanParams, "report.signedBy",commandOptions.reportSignedBy, true);
            putNestedIfNotEmpty(beanParams, "report.signature",commandOptions.reportSignature, true);
            putNestedIfNotEmpty(beanParams, "report.date",commandOptions.reportDate, true);
            putNestedIfNotNull(beanParams, "qualityControl.summary",commandOptions.qualityControlSummary, true);
            putNestedIfNotEmpty(beanParams, "creationDate",commandOptions.creationDate, true);
            putNestedIfNotEmpty(beanParams, "modificationDate",commandOptions.modificationDate, true);
            putNestedIfNotEmpty(beanParams, "dueDate",commandOptions.dueDate, true);
            putNestedIfNotEmpty(beanParams, "priority.id",commandOptions.priorityId, true);
            putNestedIfNotNull(beanParams, "attributes",commandOptions.attributes, true);
            putNestedIfNotEmpty(beanParams, "status.id",commandOptions.statusId, true);

            clinicalAnalysisUpdateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), ClinicalAnalysisUpdateParams.class);
        }
        return openCGAClient.getClinicalAnalysisClient().update(commandOptions.clinicalAnalyses, clinicalAnalysisUpdateParams, queryParams);
    }

    private RestResponse<ClinicalAnalysis> info() throws Exception {
        logger.debug("Executing info in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.InfoCommandOptions commandOptions = analysisClinicalCommandOptions.infoCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().info(commandOptions.clinicalAnalysis, queryParams);
    }

    private RestResponse<Interpretation> createInterpretation() throws Exception {
        logger.debug("Executing createInterpretation in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.CreateInterpretationCommandOptions commandOptions = analysisClinicalCommandOptions.createInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("setAs", commandOptions.setAs);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        InterpretationCreateParams interpretationCreateParams = null;
        if (commandOptions.jsonDataModel) {
            interpretationCreateParams = new InterpretationCreateParams();
            RestResponse<Interpretation> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(interpretationCreateParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            interpretationCreateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), InterpretationCreateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "description",commandOptions.description, true);
            putNestedIfNotEmpty(beanParams, "clinicalAnalysisId",commandOptions.clinicalAnalysisId, true);
            putNestedIfNotEmpty(beanParams, "creationDate",commandOptions.creationDate, true);
            putNestedIfNotEmpty(beanParams, "modificationDate",commandOptions.modificationDate, true);
            putNestedIfNotEmpty(beanParams, "analyst.id",commandOptions.analystId, true);
            putNestedIfNotEmpty(beanParams, "method.name",commandOptions.methodName, true);
            putNestedIfNotEmpty(beanParams, "method.version",commandOptions.methodVersion, true);
            putNestedIfNotEmpty(beanParams, "method.commit",commandOptions.methodCommit, true);
            putNestedIfNotNull(beanParams, "locked",commandOptions.locked, true);
            putNestedIfNotEmpty(beanParams, "status.id",commandOptions.statusId, true);
            putNestedIfNotNull(beanParams, "attributes",commandOptions.attributes, true);

            interpretationCreateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), InterpretationCreateParams.class);
        }
        return openCGAClient.getClinicalAnalysisClient().createInterpretation(commandOptions.clinicalAnalysis, interpretationCreateParams, queryParams);
    }

    private RestResponse<Interpretation> clearInterpretation() throws Exception {
        logger.debug("Executing clearInterpretation in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.ClearInterpretationCommandOptions commandOptions = analysisClinicalCommandOptions.clearInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().clearInterpretation(commandOptions.clinicalAnalysis, commandOptions.interpretations, queryParams);
    }

    private RestResponse<Interpretation> deleteInterpretation() throws Exception {
        logger.debug("Executing deleteInterpretation in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.DeleteInterpretationCommandOptions commandOptions = analysisClinicalCommandOptions.deleteInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("setAsPrimary", commandOptions.setAsPrimary);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().deleteInterpretation(commandOptions.clinicalAnalysis, commandOptions.interpretations, queryParams);
    }

    private RestResponse<Interpretation> revertInterpretation() throws Exception {
        logger.debug("Executing revertInterpretation in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.RevertInterpretationCommandOptions commandOptions = analysisClinicalCommandOptions.revertInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().revertInterpretation(commandOptions.clinicalAnalysis, commandOptions.interpretation, commandOptions.version, queryParams);
    }

    private RestResponse<Interpretation> updateInterpretation() throws Exception {
        logger.debug("Executing updateInterpretation in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.UpdateInterpretationCommandOptions commandOptions = analysisClinicalCommandOptions.updateInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("setAs", commandOptions.setAs);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        InterpretationUpdateParams interpretationUpdateParams = null;
        if (commandOptions.jsonDataModel) {
            interpretationUpdateParams = new InterpretationUpdateParams();
            RestResponse<Interpretation> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(interpretationUpdateParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            interpretationUpdateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), InterpretationUpdateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "description",commandOptions.description, true);
            putNestedIfNotEmpty(beanParams, "analyst.id",commandOptions.analystId, true);
            putNestedIfNotEmpty(beanParams, "method.name",commandOptions.methodName, true);
            putNestedIfNotEmpty(beanParams, "method.version",commandOptions.methodVersion, true);
            putNestedIfNotEmpty(beanParams, "method.commit",commandOptions.methodCommit, true);
            putNestedIfNotEmpty(beanParams, "creationDate",commandOptions.creationDate, true);
            putNestedIfNotEmpty(beanParams, "modificationDate",commandOptions.modificationDate, true);
            putNestedIfNotEmpty(beanParams, "status.id",commandOptions.statusId, true);
            putNestedIfNotNull(beanParams, "locked",commandOptions.locked, true);
            putNestedIfNotNull(beanParams, "attributes",commandOptions.attributes, true);

            interpretationUpdateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), InterpretationUpdateParams.class);
        }
        return openCGAClient.getClinicalAnalysisClient().updateInterpretation(commandOptions.clinicalAnalysis, commandOptions.interpretation, interpretationUpdateParams, queryParams);
    }
}