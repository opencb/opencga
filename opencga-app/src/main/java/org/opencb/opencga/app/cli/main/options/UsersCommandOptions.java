package org.opencb.opencga.app.cli.main.options;

import com.beust.jcommander.JCommander;
import com.beust.jcommander.Parameter;
import com.beust.jcommander.Parameters;
import com.beust.jcommander.DynamicParameter;
import com.beust.jcommander.ParametersDelegate;

import java.util.HashMap;
import java.util.Map;
import java.util.List;

import org.opencb.opencga.app.cli.main.custom.CustomUsersCommandOptions;

import static org.opencb.opencga.app.cli.GeneralCliOptions.*;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*  
*/

/**
 * This class contains methods for the Users command line.
 *    PATH: /{apiVersion}/users
 */
@Parameters(commandNames = {"users"}, commandDescription = "Users commands")
public class UsersCommandOptions extends CustomUsersCommandOptions {


        public AnonymousCommandOptions anonymousCommandOptions;
        public CreateCommandOptions createCommandOptions;
        public LoginCommandOptions loginCommandOptions;
        public PasswordCommandOptions passwordCommandOptions;
        public SearchCommandOptions searchCommandOptions;
        public SyncCommandOptions syncCommandOptions;
        public InfoCommandOptions infoCommandOptions;
        public ConfigsCommandOptions configsCommandOptions;
        public UpdateConfigsCommandOptions updateConfigsCommandOptions;
        public FiltersCommandOptions filtersCommandOptions;
        public ResetPasswordCommandOptions resetPasswordCommandOptions;
        public UpdateCommandOptions updateCommandOptions;


    public UsersCommandOptions(CommonCommandOptions commonCommandOptions, JCommander jCommander) {
    
        super(commonCommandOptions,jCommander);
        this.anonymousCommandOptions = new AnonymousCommandOptions();
        this.createCommandOptions = new CreateCommandOptions();
        this.loginCommandOptions = new LoginCommandOptions();
        this.passwordCommandOptions = new PasswordCommandOptions();
        this.searchCommandOptions = new SearchCommandOptions();
        this.syncCommandOptions = new SyncCommandOptions();
        this.infoCommandOptions = new InfoCommandOptions();
        this.configsCommandOptions = new ConfigsCommandOptions();
        this.updateConfigsCommandOptions = new UpdateConfigsCommandOptions();
        this.filtersCommandOptions = new FiltersCommandOptions();
        this.resetPasswordCommandOptions = new ResetPasswordCommandOptions();
        this.updateCommandOptions = new UpdateCommandOptions();
    
    }
    
    @Parameters(commandNames = {"anonymous"}, commandDescription ="Get an anonymous token to gain access to the system")
    public class AnonymousCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--organization"}, description = "Organization id", required = true, arity = 1)
        public String organization; 
    
    }

    @Parameters(commandNames = {"create"}, commandDescription ="Create a new user")
    public class CreateCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--id"}, description = "The body web service id parameter", required = true, arity = 1)
        public String id;
    
        @Parameter(names = {"--name", "-n"}, description = "The body web service name parameter", required = false, arity = 1)
        public String name;
    
        @Parameter(names = {"--email"}, description = "The body web service email parameter", required = false, arity = 1)
        public String email;
    
        @Parameter(names = {"--password"}, description = "The body web service password parameter", required = false, arity = 1)
        public String password;
    
        @Parameter(names = {"--organization"}, description = "The body web service organization parameter", required = false, arity = 1)
        public String organization;
    
    }

    @Parameters(commandNames = {"password"}, commandDescription ="Change the password of a user")
    public class PasswordCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--organization-id"}, description = "The body web service organizationId parameter", required = false, arity = 1)
        public String organizationId;
    
        @Parameter(names = {"--user", "-u"}, description = "The body web service user parameter", required = false, arity = 1)
        public String user;
    
        @Parameter(names = {"--password"}, description = "The body web service password parameter", required = false, arity = 1)
        public String password;
    
        @Parameter(names = {"--new-password"}, description = "The body web service newPassword parameter", required = false, arity = 1)
        public String newPassword;
    
        @Parameter(names = {"--reset"}, description = "The body web service reset parameter", required = false, arity = 1)
        public String reset;
    
    }

    @Parameters(commandNames = {"search"}, commandDescription ="User search method")
    public class SearchCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include", "-I"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude", "-E"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--limit"}, description = "Number of results to be returned", required = false, arity = 1)
        public Integer limit; 
    
        @Parameter(names = {"--skip"}, description = "Number of results to skip", required = false, arity = 1)
        public Integer skip; 
    
        @Parameter(names = {"--count"}, description = "Get the total number of results matching the query. Deactivated by default.", required = false, help = true, arity = 0)
        public boolean count = false; 
    
        @Parameter(names = {"--organization"}, description = "Organization id", required = false, arity = 1)
        public String organization; 
    
        @Parameter(names = {"--id"}, description = "Comma separated list user IDs up to a maximum of 100. Also admits basic regular expressions using the operator '~', i.e. '~{perl-regex}' e.g. '~value' for case sensitive, '~/value/i' for case insensitive search.", required = false, arity = 1)
        public String id; 
    
        @Parameter(names = {"--authentication-id"}, description = "Authentication origin ID", required = false, arity = 1)
        public String authenticationId; 
    
    }

    @Parameters(commandNames = {"sync"}, commandDescription ="Synchronise a group of users from an authentication origin with a group in a study from catalog")
    public class SyncCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--authentication-origin-id"}, description = "The body web service authenticationOriginId parameter", required = false, arity = 1)
        public String authenticationOriginId;
    
        @Parameter(names = {"--from"}, description = "The body web service from parameter", required = false, arity = 1)
        public String from;
    
        @Parameter(names = {"--to"}, description = "The body web service to parameter", required = false, arity = 1)
        public String to;
    
        @Parameter(names = {"--study", "-s"}, description = "The body web service study parameter", required = false, arity = 1)
        public String study;
    
        @Parameter(names = {"--sync-all"}, description = "The body web service syncAll parameter", required = false, help = true, arity = 0)
        public boolean syncAll = false;
    
        @Parameter(names = {"--force"}, description = "The body web service force parameter", required = false, help = true, arity = 0)
        public boolean force = false;
    
    }

    @Parameters(commandNames = {"info"}, commandDescription ="Return the user information including its projects and studies")
    public class InfoCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include", "-I"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude", "-E"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--organization"}, description = "Organization id", required = false, arity = 1)
        public String organization; 
    
        @Parameter(names = {"--users"}, description = "Comma separated list of user IDs", required = true, arity = 1)
        public String users; 
    
    }

    @Parameters(commandNames = {"configs"}, commandDescription ="Fetch a user configuration")
    public class ConfigsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--user", "-u"}, description = "User ID", required = true, arity = 1)
        public String user; 
    
        @Parameter(names = {"--name", "-n"}, description = "Unique name (typically the name of the application).", required = false, arity = 1)
        public String name; 
    
    }

    @Parameters(commandNames = {"configs-update"}, commandDescription ="Add or remove a custom user configuration")
    public class UpdateConfigsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--user", "-u"}, description = "User ID", required = true, arity = 1)
        public String user; 
    
        @Parameter(names = {"--action"}, description = "Action to be performed: ADD or REMOVE a group", required = false, arity = 1)
        public String action = "ADD"; 
    
        @Parameter(names = {"--id"}, description = "The body web service id parameter", required = false, arity = 1)
        public String id;
    
        @DynamicParameter(names = {"--configuration"}, description = "The body web service configuration parameter. Use: --configuration key=value", required = false)
        public java.util.Map<java.lang.String,java.lang.Object> configuration = new HashMap<>(); //Dynamic parameters must be initialized;
    
    }

    @Parameters(commandNames = {"filters"}, commandDescription ="Fetch user filters")
    public class FiltersCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--user", "-u"}, description = "User ID", required = true, arity = 1)
        public String user; 
    
        @Parameter(names = {"--id"}, description = "Filter id. If provided, it will only fetch the specified filter", required = false, arity = 1)
        public String id; 
    
    }

    @Parameters(commandNames = {"password-reset"}, commandDescription ="Reset password")
    public class ResetPasswordCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--user", "-u"}, description = "User ID", required = true, arity = 1)
        public String user; 
    
    }

    @Parameters(commandNames = {"update"}, commandDescription ="Update some user attributes")
    public class UpdateCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--include", "-I"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude", "-E"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--user", "-u"}, description = "User ID", required = true, arity = 1)
        public String user; 
    
        @Parameter(names = {"--include-result"}, description = "Flag indicating to include the created or updated document result in the response", required = false, help = true, arity = 0)
        public boolean includeResult = false; 
    
        @Parameter(names = {"--name", "-n"}, description = "The body web service name parameter", required = false, arity = 1)
        public String name;
    
        @Parameter(names = {"--email"}, description = "The body web service email parameter", required = false, arity = 1)
        public String email;
    
    }

}