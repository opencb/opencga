package org.opencb.opencga.app.cli.main.executors;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import org.opencb.commons.datastore.core.FacetField;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.commons.utils.PrintUtils;
import org.opencb.opencga.app.cli.main.*;
import org.opencb.opencga.app.cli.main.custom.CustomJobsCommandExecutor;
import org.opencb.opencga.app.cli.main.custom.CustomJobsCommandOptions;
import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.app.cli.main.options.JobsCommandOptions;
import org.opencb.opencga.catalog.exceptions.CatalogAuthenticationException;
import org.opencb.opencga.catalog.utils.ParamUtils.AclAction;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.opencga.core.common.JacksonUtils;
import org.opencb.opencga.core.models.common.Enums;
import org.opencb.opencga.core.models.file.FileContent;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.opencga.core.models.job.JobAclEntryList;
import org.opencb.opencga.core.models.job.JobAclUpdateParams;
import org.opencb.opencga.core.models.job.JobCreateParams;
import org.opencb.opencga.core.models.job.JobRetryParams;
import org.opencb.opencga.core.models.job.JobRunDockerParams;
import org.opencb.opencga.core.models.job.JobRunGitParams;
import org.opencb.opencga.core.models.job.JobRunParams;
import org.opencb.opencga.core.models.job.JobToolBuildDockerParams;
import org.opencb.opencga.core.models.job.JobToolBuildParams;
import org.opencb.opencga.core.models.job.JobTop;
import org.opencb.opencga.core.models.job.JobType;
import org.opencb.opencga.core.models.job.JobUpdateParams;
import org.opencb.opencga.core.models.job.MinimumRequirements;
import org.opencb.opencga.core.models.job.ToolInfo;
import org.opencb.opencga.core.response.QueryType;
import org.opencb.opencga.core.response.RestResponse;
import org.opencb.opencga.core.tools.annotations.Tool;
import org.opencb.opencga.core.tools.result.ExecutionResult;
import org.opencb.opencga.core.tools.result.ExecutorInfo;
import org.opencb.opencga.core.tools.result.Status;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*  
*/
/**
 * This class contains methods for the Jobs command line.
 *    PATH: /{apiVersion}/jobs
 */
public class JobsCommandExecutor extends OpencgaCommandExecutor {

    public String categoryName = "jobs";
    public JobsCommandOptions jobsCommandOptions;

    public JobsCommandExecutor(JobsCommandOptions jobsCommandOptions) throws CatalogAuthenticationException {
        super(jobsCommandOptions.commonCommandOptions);
        this.jobsCommandOptions = jobsCommandOptions;
    }

    @Override
    public void execute() throws Exception {

        logger.debug("Executing Jobs command line");

        String subCommandString = getParsedSubCommand(jobsCommandOptions.jCommander);

        RestResponse queryResponse = null;

        switch (subCommandString) {
            case "acl-update":
                queryResponse = updateAcl();
                break;
            case "aggregationstats":
                queryResponse = aggregationStats();
                break;
            case "create":
                queryResponse = create();
                break;
            case "distinct":
                queryResponse = distinct();
                break;
            case "retry":
                queryResponse = retry();
                break;
            case "search":
                queryResponse = search();
                break;
            case "tool-build":
                queryResponse = buildTool();
                break;
            case "tool-run":
                queryResponse = runTool();
                break;
            case "top":
                queryResponse = top();
                break;
            case "acl":
                queryResponse = acl();
                break;
            case "delete":
                queryResponse = delete();
                break;
            case "info":
                queryResponse = info();
                break;
            case "update":
                queryResponse = update();
                break;
            case "kill":
                queryResponse = kill();
                break;
            case "log-head":
                queryResponse = headLog();
                break;
            case "log-tail":
                queryResponse = tailLog();
                break;
            case "log":
                CustomJobsCommandExecutor customJobsCommandExecutor = new CustomJobsCommandExecutor(
                        new ObjectMap(jobsCommandOptions.commonCommandOptions.params), token,
                        clientConfiguration, getSessionManager(), appHome, getLogger());
                queryResponse = customJobsCommandExecutor.log(jobsCommandOptions.logCommandOptions);
                break;
            default:
                logger.error("Subcommand not valid");
                break;
        }

        createOutput(queryResponse);

    }

    private RestResponse<JobAclEntryList> updateAcl() throws Exception {
        logger.debug("Executing updateAcl in Jobs command line");

        JobsCommandOptions.UpdateAclCommandOptions commandOptions = jobsCommandOptions.updateAclCommandOptions;

        JobAclUpdateParams jobAclUpdateParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<JobAclEntryList> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/jobs/acl/{members}/update"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            jobAclUpdateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), JobAclUpdateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "permissions", commandOptions.permissions, true);
            putNestedIfNotEmpty(beanParams, "job", commandOptions.job, true);

            jobAclUpdateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), JobAclUpdateParams.class);
        }
        return openCGAClient.getJobClient().updateAcl(commandOptions.members, commandOptions.action, jobAclUpdateParams);
    }

    private RestResponse<FacetField> aggregationStats() throws Exception {
        logger.debug("Executing aggregationStats in Jobs command line");

        JobsCommandOptions.AggregationStatsCommandOptions commandOptions = jobsCommandOptions.aggregationStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("otherStudies", commandOptions.otherStudies);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("toolId", commandOptions.toolId);
        queryParams.putIfNotEmpty("toolType", commandOptions.toolType);
        queryParams.putIfNotEmpty("userId", commandOptions.userId);
        queryParams.putIfNotEmpty("priority", commandOptions.priority);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotNull("visited", commandOptions.visited);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotEmpty("input", commandOptions.input);
        queryParams.putIfNotEmpty("output", commandOptions.output);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        queryParams.putIfNotEmpty("field", commandOptions.field);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getJobClient().aggregationStats(queryParams);
    }

    private RestResponse<Job> create() throws Exception {
        logger.debug("Executing create in Jobs command line");

        JobsCommandOptions.CreateCommandOptions commandOptions = jobsCommandOptions.createCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        JobCreateParams jobCreateParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/jobs/create"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            jobCreateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), JobCreateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "id", commandOptions.id, true);
            putNestedIfNotEmpty(beanParams, "description", commandOptions.description, true);
            putNestedIfNotEmpty(beanParams, "tool.id", commandOptions.toolId, true);
            putNestedIfNotEmpty(beanParams, "tool.description", commandOptions.toolDescription, true);
            putNestedIfNotNull(beanParams, "tool.scope", commandOptions.toolScope, true);
            putNestedIfNotNull(beanParams, "tool.type", commandOptions.toolType, true);
            putNestedIfNotNull(beanParams, "tool.resource", commandOptions.toolResource, true);
            putNestedIfNotNull(beanParams, "type", commandOptions.type, true);
            putNestedIfNotNull(beanParams, "priority", commandOptions.priority, true);
            putNestedIfNotEmpty(beanParams, "commandLine", commandOptions.commandLine, true);
            putNestedMapIfNotEmpty(beanParams, "params", commandOptions.params, true);
            putNestedIfNotEmpty(beanParams, "creationDate", commandOptions.creationDate, true);
            putNestedIfNotEmpty(beanParams, "modificationDate", commandOptions.modificationDate, true);
            putNestedIfNotEmpty(beanParams, "outDir.path", commandOptions.outDirPath, true);
            putNestedIfNotNull(beanParams, "tags", commandOptions.tags, true);
            putNestedIfNotEmpty(beanParams, "result.id", commandOptions.resultId, true);
            putNestedMapIfNotEmpty(beanParams, "result.attributes", commandOptions.resultAttributes, true);
            putNestedIfNotEmpty(beanParams, "stdout.path", commandOptions.stdoutPath, true);
            putNestedIfNotEmpty(beanParams, "stderr.path", commandOptions.stderrPath, true);
            putNestedMapIfNotEmpty(beanParams, "attributes", commandOptions.attributes, true);

            jobCreateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), JobCreateParams.class);
        }
        return openCGAClient.getJobClient().create(jobCreateParams, queryParams);
    }

    private RestResponse<Object> distinct() throws Exception {
        logger.debug("Executing distinct in Jobs command line");

        JobsCommandOptions.DistinctCommandOptions commandOptions = jobsCommandOptions.distinctCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("otherStudies", commandOptions.otherStudies);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("toolId", commandOptions.toolId);
        queryParams.putIfNotEmpty("toolType", commandOptions.toolType);
        queryParams.putIfNotEmpty("toolExternalExecutorId", commandOptions.toolExternalExecutorId);
        queryParams.putIfNotEmpty("parentId", commandOptions.parentId);
        queryParams.putIfNotNull("dryRun", commandOptions.dryRun);
        queryParams.putIfNotNull("internalKillJobRequested", commandOptions.internalKillJobRequested);
        queryParams.putIfNotEmpty("userId", commandOptions.userId);
        queryParams.putIfNotEmpty("priority", commandOptions.priority);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotNull("visited", commandOptions.visited);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotEmpty("input", commandOptions.input);
        queryParams.putIfNotEmpty("output", commandOptions.output);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getJobClient().distinct(commandOptions.field, queryParams);
    }

    private RestResponse<Job> retry() throws Exception {
        logger.debug("Executing retry in Jobs command line");

        JobsCommandOptions.RetryCommandOptions commandOptions = jobsCommandOptions.retryCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("jobScheduledStartTime", commandOptions.jobScheduledStartTime);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        JobRetryParams jobRetryParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/jobs/retry"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            jobRetryParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), JobRetryParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "job", commandOptions.job, true);
            putNestedIfNotNull(beanParams, "force", commandOptions.force, true);
            putNestedMapIfNotEmpty(beanParams, "params", commandOptions.params, true);

            jobRetryParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), JobRetryParams.class);
        }
        return openCGAClient.getJobClient().retry(jobRetryParams, queryParams);
    }

    private RestResponse<Job> search() throws Exception {
        logger.debug("Executing search in Jobs command line");

        JobsCommandOptions.SearchCommandOptions commandOptions = jobsCommandOptions.searchCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("otherStudies", commandOptions.otherStudies);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("toolId", commandOptions.toolId);
        queryParams.putIfNotEmpty("toolType", commandOptions.toolType);
        queryParams.putIfNotEmpty("toolExternalExecutorId", commandOptions.toolExternalExecutorId);
        queryParams.putIfNotEmpty("parentId", commandOptions.parentId);
        queryParams.putIfNotNull("dryRun", commandOptions.dryRun);
        queryParams.putIfNotNull("internalKillJobRequested", commandOptions.internalKillJobRequested);
        queryParams.putIfNotEmpty("userId", commandOptions.userId);
        queryParams.putIfNotEmpty("priority", commandOptions.priority);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotNull("visited", commandOptions.visited);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotEmpty("input", commandOptions.input);
        queryParams.putIfNotEmpty("output", commandOptions.output);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getJobClient().search(queryParams);
    }

    private RestResponse<Job> buildTool() throws Exception {
        logger.debug("Executing buildTool in Jobs command line");

        JobsCommandOptions.BuildToolCommandOptions commandOptions = jobsCommandOptions.buildToolCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("jobScheduledStartTime", commandOptions.jobScheduledStartTime);
        queryParams.putIfNotEmpty("jobPriority", commandOptions.jobPriority);
        queryParams.putIfNotNull("jobDryRun", commandOptions.jobDryRun);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        JobToolBuildParams jobToolBuildParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/jobs/tool/build"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            jobToolBuildParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), JobToolBuildParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "gitRepository", commandOptions.gitRepository, true);
            putNestedIfNotEmpty(beanParams, "aptGet", commandOptions.aptGet, true);
            putNestedIfNotNull(beanParams, "installR", commandOptions.installR, true);
            putNestedIfNotEmpty(beanParams, "docker.organisation", commandOptions.dockerOrganisation, true);
            putNestedIfNotEmpty(beanParams, "docker.name", commandOptions.dockerName, true);
            putNestedIfNotEmpty(beanParams, "docker.tag", commandOptions.dockerTag, true);
            putNestedIfNotEmpty(beanParams, "docker.user", commandOptions.dockerUser, true);
            putNestedIfNotEmpty(beanParams, "docker.password", commandOptions.dockerPassword, true);

            jobToolBuildParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), JobToolBuildParams.class);
        }
        return openCGAClient.getJobClient().buildTool(jobToolBuildParams, queryParams);
    }

    private RestResponse<Job> runTool() throws Exception {
        logger.debug("Executing runTool in Jobs command line");

        JobsCommandOptions.RunToolCommandOptions commandOptions = jobsCommandOptions.runToolCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("jobScheduledStartTime", commandOptions.jobScheduledStartTime);
        queryParams.putIfNotEmpty("jobPriority", commandOptions.jobPriority);
        queryParams.putIfNotNull("jobDryRun", commandOptions.jobDryRun);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        JobRunParams jobRunParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/jobs/tool/run"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            jobRunParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), JobRunParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "commandLine", commandOptions.commandLine, true);
            putNestedIfNotEmpty(beanParams, "docker.id", commandOptions.dockerId, true);
            putNestedIfNotEmpty(beanParams, "docker.tag", commandOptions.dockerTag, true);
            putNestedIfNotEmpty(beanParams, "docker.token", commandOptions.dockerToken, true);
            putNestedIfNotEmpty(beanParams, "git.repository", commandOptions.gitRepository, true);
            putNestedIfNotEmpty(beanParams, "git.reference", commandOptions.gitReference, true);

            jobRunParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), JobRunParams.class);
        }
        return openCGAClient.getJobClient().runTool(jobRunParams, queryParams);
    }

    private RestResponse<JobTop> top() throws Exception {
        logger.debug("Executing top in Jobs command line");

        CustomJobsCommandOptions.TopCommandOptions commandOptions = jobsCommandOptions.topCommandOptions;
        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("priority", commandOptions.priority);
        queryParams.putIfNotEmpty("userId", commandOptions.userId);
        queryParams.putIfNotEmpty("toolId", commandOptions.toolId);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }
        CustomJobsCommandExecutor customJobsCommandExecutor = new CustomJobsCommandExecutor(queryParams, token, clientConfiguration, getSessionManager(), appHome, getLogger());
        return customJobsCommandExecutor.top(commandOptions);
    }

    private RestResponse<JobAclEntryList> acl() throws Exception {
        logger.debug("Executing acl in Jobs command line");

        JobsCommandOptions.AclCommandOptions commandOptions = jobsCommandOptions.aclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("member", commandOptions.member);
        queryParams.putIfNotNull("silent", commandOptions.silent);

        return openCGAClient.getJobClient().acl(commandOptions.jobs, queryParams);
    }

    private RestResponse<Job> delete() throws Exception {
        logger.debug("Executing delete in Jobs command line");

        JobsCommandOptions.DeleteCommandOptions commandOptions = jobsCommandOptions.deleteCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getJobClient().delete(commandOptions.jobs, queryParams);
    }

    private RestResponse<Job> info() throws Exception {
        logger.debug("Executing info in Jobs command line");

        JobsCommandOptions.InfoCommandOptions commandOptions = jobsCommandOptions.infoCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getJobClient().info(commandOptions.jobs, queryParams);
    }

    private RestResponse<Job> update() throws Exception {
        logger.debug("Executing update in Jobs command line");

        JobsCommandOptions.UpdateCommandOptions commandOptions = jobsCommandOptions.updateCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        JobUpdateParams jobUpdateParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/jobs/{jobs}/update"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            jobUpdateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), JobUpdateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "description", commandOptions.description, true);
            putNestedIfNotNull(beanParams, "tags", commandOptions.tags, true);
            putNestedIfNotNull(beanParams, "visited", commandOptions.visited, true);
            putNestedMapIfNotEmpty(beanParams, "attributes", commandOptions.attributes, true);

            jobUpdateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), JobUpdateParams.class);
        }
        return openCGAClient.getJobClient().update(commandOptions.jobs, jobUpdateParams, queryParams);
    }

    private RestResponse<Job> kill() throws Exception {
        logger.debug("Executing kill in Jobs command line");

        JobsCommandOptions.KillCommandOptions commandOptions = jobsCommandOptions.killCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getJobClient().kill(commandOptions.job, queryParams);
    }

    private RestResponse<FileContent> headLog() throws Exception {
        logger.debug("Executing headLog in Jobs command line");

        JobsCommandOptions.HeadLogCommandOptions commandOptions = jobsCommandOptions.headLogCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("offset", commandOptions.offset);
        queryParams.putIfNotNull("lines", commandOptions.lines);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getJobClient().headLog(commandOptions.job, queryParams);
    }

    private RestResponse<FileContent> tailLog() throws Exception {
        logger.debug("Executing tailLog in Jobs command line");

        JobsCommandOptions.TailLogCommandOptions commandOptions = jobsCommandOptions.tailLogCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("lines", commandOptions.lines);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getJobClient().tailLog(commandOptions.job, queryParams);
    }
}