package org.opencb.opencga.app.cli.main.executors;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.lang.Object;
import java.util.HashMap;
import java.util.List;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.commons.utils.PrintUtils;
import org.opencb.opencga.app.cli.main.*;
import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.app.cli.main.options.OrganizationsCommandOptions;
import org.opencb.opencga.catalog.exceptions.CatalogAuthenticationException;
import org.opencb.opencga.catalog.utils.ParamUtils.AddRemoveAction;
import org.opencb.opencga.catalog.utils.ParamUtils.BasicUpdateAction;
import org.opencb.opencga.catalog.utils.ParamUtils.UpdateAction;
import org.opencb.opencga.core.common.JacksonUtils;
import org.opencb.opencga.core.config.Optimizations;
import org.opencb.opencga.core.config.UserOrganizationConfiguration;
import org.opencb.opencga.core.exceptions.ClientException;
import org.opencb.opencga.core.models.notes.Note;
import org.opencb.opencga.core.models.notes.NoteCreateParams;
import org.opencb.opencga.core.models.notes.NoteType;
import org.opencb.opencga.core.models.notes.NoteUpdateParams;
import org.opencb.opencga.core.models.organizations.Organization;
import org.opencb.opencga.core.models.organizations.OrganizationConfiguration;
import org.opencb.opencga.core.models.organizations.OrganizationCreateParams;
import org.opencb.opencga.core.models.organizations.OrganizationUpdateParams;
import org.opencb.opencga.core.models.organizations.TokenConfiguration;
import org.opencb.opencga.core.models.user.OrganizationUserUpdateParams;
import org.opencb.opencga.core.models.user.User;
import org.opencb.opencga.core.models.user.UserQuota;
import org.opencb.opencga.core.models.user.UserStatusUpdateParams;
import org.opencb.opencga.core.response.QueryType;
import org.opencb.opencga.core.response.RestResponse;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*  
*/
/**
 * This class contains methods for the Organizations command line.
 *    PATH: /{apiVersion}/organizations
 */
public class OrganizationsCommandExecutor extends OpencgaCommandExecutor {

    public String categoryName = "organizations";
    public OrganizationsCommandOptions organizationsCommandOptions;

    public OrganizationsCommandExecutor(OrganizationsCommandOptions organizationsCommandOptions) throws CatalogAuthenticationException {
        super(organizationsCommandOptions.commonCommandOptions);
        this.organizationsCommandOptions = organizationsCommandOptions;
    }

    @Override
    public void execute() throws Exception {

        logger.debug("Executing Organizations command line");

        String subCommandString = getParsedSubCommand(organizationsCommandOptions.jCommander);

        RestResponse queryResponse = null;

        switch (subCommandString) {
            case "create":
                queryResponse = create();
                break;
            case "notes-create":
                queryResponse = createNotes();
                break;
            case "notes-search":
                queryResponse = searchNotes();
                break;
            case "notes-delete":
                queryResponse = deleteNotes();
                break;
            case "notes-update":
                queryResponse = updateNotes();
                break;
            case "update-status-user":
                queryResponse = userUpdateStatus();
                break;
            case "user-update":
                queryResponse = updateUser();
                break;
            case "configuration-update":
                queryResponse = updateConfiguration();
                break;
            case "info":
                queryResponse = info();
                break;
            case "update":
                queryResponse = update();
                break;
            default:
                logger.error("Subcommand not valid");
                break;
        }

        createOutput(queryResponse);

    }

    private RestResponse<Organization> create() throws Exception {
        logger.debug("Executing create in Organizations command line");

        OrganizationsCommandOptions.CreateCommandOptions commandOptions = organizationsCommandOptions.createCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);


        OrganizationCreateParams organizationCreateParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<Organization> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/organizations/create"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            organizationCreateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), OrganizationCreateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "id", commandOptions.id, true);
            putNestedIfNotEmpty(beanParams, "name", commandOptions.name, true);
            putNestedIfNotEmpty(beanParams, "creationDate", commandOptions.creationDate, true);
            putNestedIfNotEmpty(beanParams, "modificationDate", commandOptions.modificationDate, true);
            putNestedMapIfNotEmpty(beanParams, "attributes", commandOptions.attributes, true);

            organizationCreateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), OrganizationCreateParams.class);
        }
        return openCGAClient.getOrganizationClient().create(organizationCreateParams, queryParams);
    }

    private RestResponse<Note> createNotes() throws Exception {
        logger.debug("Executing createNotes in Organizations command line");

        OrganizationsCommandOptions.CreateNotesCommandOptions commandOptions = organizationsCommandOptions.createNotesCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);


        NoteCreateParams noteCreateParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<Note> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/organizations/notes/create"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            noteCreateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), NoteCreateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "id", commandOptions.id, true);
            putNestedIfNotNull(beanParams, "type", commandOptions.type, true);
            putNestedIfNotNull(beanParams, "tags", commandOptions.tags, true);
            putNestedIfNotNull(beanParams, "visibility", commandOptions.visibility, true);
            putNestedIfNotNull(beanParams, "valueType", commandOptions.valueType, true);

            noteCreateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), NoteCreateParams.class);
        }
        return openCGAClient.getOrganizationClient().createNotes(noteCreateParams, queryParams);
    }

    private RestResponse<Note> searchNotes() throws Exception {
        logger.debug("Executing searchNotes in Organizations command line");

        OrganizationsCommandOptions.SearchNotesCommandOptions commandOptions = organizationsCommandOptions.searchNotesCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("scope", commandOptions.scope);
        queryParams.putIfNotEmpty("visibility", commandOptions.visibility);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("userId", commandOptions.userId);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotEmpty("version", commandOptions.version);

        return openCGAClient.getOrganizationClient().searchNotes(queryParams);
    }

    private RestResponse<Note> deleteNotes() throws Exception {
        logger.debug("Executing deleteNotes in Organizations command line");

        OrganizationsCommandOptions.DeleteNotesCommandOptions commandOptions = organizationsCommandOptions.deleteNotesCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);

        return openCGAClient.getOrganizationClient().deleteNotes(commandOptions.id, queryParams);
    }

    private RestResponse<Note> updateNotes() throws Exception {
        logger.debug("Executing updateNotes in Organizations command line");

        OrganizationsCommandOptions.UpdateNotesCommandOptions commandOptions = organizationsCommandOptions.updateNotesCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("tagsAction", commandOptions.tagsAction);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);


        NoteUpdateParams noteUpdateParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<Note> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/organizations/notes/{id}/update"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            noteUpdateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), NoteUpdateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotNull(beanParams, "type", commandOptions.type, true);
            putNestedIfNotNull(beanParams, "tags", commandOptions.tags, true);
            putNestedIfNotNull(beanParams, "visibility", commandOptions.visibility, true);

            noteUpdateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), NoteUpdateParams.class);
        }
        return openCGAClient.getOrganizationClient().updateNotes(commandOptions.id, noteUpdateParams, queryParams);
    }

    private RestResponse<User> userUpdateStatus() throws Exception {
        logger.debug("Executing userUpdateStatus in Organizations command line");

        OrganizationsCommandOptions.UserUpdateStatusCommandOptions commandOptions = organizationsCommandOptions.userUpdateStatusCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("organization", commandOptions.organization);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);


        UserStatusUpdateParams userStatusUpdateParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<User> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/organizations/user/{user}/status/update"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            userStatusUpdateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), UserStatusUpdateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "status", commandOptions.status, true);

            userStatusUpdateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), UserStatusUpdateParams.class);
        }
        return openCGAClient.getOrganizationClient().userUpdateStatus(commandOptions.user, userStatusUpdateParams, queryParams);
    }

    private RestResponse<User> updateUser() throws Exception {
        logger.debug("Executing updateUser in Organizations command line");

        OrganizationsCommandOptions.UpdateUserCommandOptions commandOptions = organizationsCommandOptions.updateUserCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("organization", commandOptions.organization);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);


        OrganizationUserUpdateParams organizationUserUpdateParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<User> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/organizations/user/{user}/update"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            organizationUserUpdateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), OrganizationUserUpdateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "name", commandOptions.name, true);
            putNestedIfNotEmpty(beanParams, "email", commandOptions.email, true);
            putNestedIfNotNull(beanParams, "quota.diskUsage", commandOptions.quotaDiskUsage, true);
            putNestedIfNotNull(beanParams, "quota.cpuUsage", commandOptions.quotaCpuUsage, true);
            putNestedIfNotNull(beanParams, "quota.maxDisk", commandOptions.quotaMaxDisk, true);
            putNestedIfNotNull(beanParams, "quota.maxCpu", commandOptions.quotaMaxCpu, true);
            putNestedMapIfNotEmpty(beanParams, "attributes", commandOptions.attributes, true);

            organizationUserUpdateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), OrganizationUserUpdateParams.class);
        }
        return openCGAClient.getOrganizationClient().updateUser(commandOptions.user, organizationUserUpdateParams, queryParams);
    }

    private RestResponse<OrganizationConfiguration> updateConfiguration() throws Exception {
        logger.debug("Executing updateConfiguration in Organizations command line");

        OrganizationsCommandOptions.UpdateConfigurationCommandOptions commandOptions = organizationsCommandOptions.updateConfigurationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);
        queryParams.putIfNotNull("authenticationOriginsAction", commandOptions.authenticationOriginsAction);


        OrganizationConfiguration organizationConfiguration = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<OrganizationConfiguration> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/organizations/{organization}/configuration/update"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            organizationConfiguration = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), OrganizationConfiguration.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "user.defaultExpirationDate", commandOptions.userDefaultExpirationDate, true);
            putNestedIfNotNull(beanParams, "user.addToStudyMembers", commandOptions.userAddToStudyMembers, true);
            putNestedIfNotNull(beanParams, "optimizations.simplifyPermissions", commandOptions.optimizationsSimplifyPermissions, true);
            putNestedIfNotEmpty(beanParams, "token.algorithm", commandOptions.tokenAlgorithm, true);
            putNestedIfNotEmpty(beanParams, "token.secretKey", commandOptions.tokenSecretKey, true);
            putNestedIfNotNull(beanParams, "token.expiration", commandOptions.tokenExpiration, true);

            organizationConfiguration = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), OrganizationConfiguration.class);
        }
        return openCGAClient.getOrganizationClient().updateConfiguration(commandOptions.organization, organizationConfiguration, queryParams);
    }

    private RestResponse<Organization> info() throws Exception {
        logger.debug("Executing info in Organizations command line");

        OrganizationsCommandOptions.InfoCommandOptions commandOptions = organizationsCommandOptions.infoCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);

        return openCGAClient.getOrganizationClient().info(commandOptions.organization, queryParams);
    }

    private RestResponse<Organization> update() throws Exception {
        logger.debug("Executing update in Organizations command line");

        OrganizationsCommandOptions.UpdateCommandOptions commandOptions = organizationsCommandOptions.updateCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);
        queryParams.putIfNotNull("adminsAction", commandOptions.adminsAction);


        OrganizationUpdateParams organizationUpdateParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<Organization> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/organizations/{organization}/update"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            organizationUpdateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), OrganizationUpdateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "name", commandOptions.name, true);
            putNestedIfNotEmpty(beanParams, "owner", commandOptions.owner, true);
            putNestedIfNotNull(beanParams, "admins", commandOptions.admins, true);
            putNestedIfNotEmpty(beanParams, "creationDate", commandOptions.creationDate, true);
            putNestedIfNotEmpty(beanParams, "modificationDate", commandOptions.modificationDate, true);
            putNestedMapIfNotEmpty(beanParams, "attributes", commandOptions.attributes, true);

            organizationUpdateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), OrganizationUpdateParams.class);
        }
        return openCGAClient.getOrganizationClient().update(commandOptions.organization, organizationUpdateParams, queryParams);
    }
}