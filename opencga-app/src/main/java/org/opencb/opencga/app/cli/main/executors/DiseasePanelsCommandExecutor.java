package org.opencb.opencga.app.cli.main.executors;

import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.app.cli.main.*;
import org.opencb.opencga.core.response.RestResponse;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.commons.datastore.core.ObjectMap;

import org.opencb.opencga.catalog.exceptions.CatalogAuthenticationException;
import org.opencb.opencga.core.common.JacksonUtils;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.List;
import java.util.HashMap;
import org.opencb.opencga.core.response.QueryType;
import org.opencb.commons.utils.PrintUtils;

import org.opencb.opencga.app.cli.main.options.DiseasePanelsCommandOptions;

import java.util.Map;
import org.opencb.biodata.models.clinical.interpretation.DiseasePanel;
import org.opencb.opencga.catalog.utils.ParamUtils.AclAction;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.opencga.core.models.panel.Panel;
import org.opencb.opencga.core.models.panel.PanelAclUpdateParams;
import org.opencb.opencga.core.models.panel.PanelCreateParams;
import org.opencb.opencga.core.models.panel.PanelImportParams;
import org.opencb.opencga.core.models.panel.PanelUpdateParams;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/


/**
 * This class contains methods for the Disease Panels command line.
 *    PATH: /{apiVersion}/panels
 */
public class DiseasePanelsCommandExecutor extends OpencgaCommandExecutor {

    private DiseasePanelsCommandOptions diseasePanelsCommandOptions;

    public DiseasePanelsCommandExecutor(DiseasePanelsCommandOptions diseasePanelsCommandOptions) throws CatalogAuthenticationException {
        super(diseasePanelsCommandOptions.commonCommandOptions);
        this.diseasePanelsCommandOptions = diseasePanelsCommandOptions;
    }

    @Override
    public void execute() throws Exception {

        logger.debug("Executing Disease Panels command line");

        String subCommandString = getParsedSubCommand(diseasePanelsCommandOptions.jCommander);

        RestResponse queryResponse = null;

        switch (subCommandString) {
            case "acl-update":
                queryResponse = updateAcl();
                break;
            case "create":
                queryResponse = create();
                break;
            case "distinct":
                queryResponse = distinct();
                break;
            case "import":
                queryResponse = importPanels();
                break;
            case "search":
                queryResponse = search();
                break;
            case "acl":
                queryResponse = acl();
                break;
            case "delete":
                queryResponse = delete();
                break;
            case "info":
                queryResponse = info();
                break;
            case "update":
                queryResponse = update();
                break;
            default:
                logger.error("Subcommand not valid");
                break;
        }

        createOutput(queryResponse);

    }

    private RestResponse<ObjectMap> updateAcl() throws Exception {

        logger.debug("Executing updateAcl in Disease Panels command line");

        DiseasePanelsCommandOptions.UpdateAclCommandOptions commandOptions = diseasePanelsCommandOptions.updateAclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        PanelAclUpdateParams panelAclUpdateParams = new PanelAclUpdateParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<ObjectMap> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(panelAclUpdateParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            panelAclUpdateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), PanelAclUpdateParams.class);
        } else {
            panelAclUpdateParams.setPermissions(commandOptions.permissions);
            panelAclUpdateParams.setPanel(commandOptions.panel);

        }
        return openCGAClient.getDiseasePanelClient().updateAcl(commandOptions.members, commandOptions.action, panelAclUpdateParams, queryParams);
    }

    private RestResponse<Panel> create() throws Exception {

        logger.debug("Executing create in Disease Panels command line");

        DiseasePanelsCommandOptions.CreateCommandOptions commandOptions = diseasePanelsCommandOptions.createCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        PanelCreateParams panelCreateParams = new PanelCreateParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Panel> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(panelCreateParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            panelCreateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), PanelCreateParams.class);
        } else {
            // Generate beans for nested objects
            DiseasePanel.SourcePanel sourceParam = new DiseasePanel.SourcePanel();
            sourceParam.setId(commandOptions.sourceId);
            sourceParam.setName(commandOptions.sourceName);
            sourceParam.setVersion(commandOptions.sourceVersion);
            sourceParam.setAuthor(commandOptions.sourceAuthor);
            sourceParam.setProject(commandOptions.sourceProject);

            //Set main body params
            panelCreateParams.setId(commandOptions.id);
            panelCreateParams.setName(commandOptions.name);
            panelCreateParams.setDescription(commandOptions.description);
            panelCreateParams.setAuthor(commandOptions.author);
            panelCreateParams.setSource(sourceParam);
            //panelCreateParams.setCategories(commandOptions.categories); // Unsupported param. FIXME 
            panelCreateParams.setTags(splitWithTrim(commandOptions.tags));
            //panelCreateParams.setDisorders(commandOptions.disorders); // Unsupported param. FIXME 
            //panelCreateParams.setVariants(commandOptions.variants); // Unsupported param. FIXME 
            //panelCreateParams.setGenes(commandOptions.genes); // Unsupported param. FIXME 
            //panelCreateParams.setRegions(commandOptions.regions); // Unsupported param. FIXME 
            //panelCreateParams.setStrs(commandOptions.strs); // Unsupported param. FIXME 
            panelCreateParams.setStats(new HashMap<>(commandOptions.stats));
            panelCreateParams.setAttributes(new HashMap<>(commandOptions.attributes));

        }
        return openCGAClient.getDiseasePanelClient().create(panelCreateParams, queryParams);
    }

    private RestResponse<Object> distinct() throws Exception {

        logger.debug("Executing distinct in Disease Panels command line");

        DiseasePanelsCommandOptions.DistinctCommandOptions commandOptions = diseasePanelsCommandOptions.distinctCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("genes", commandOptions.genes);
        queryParams.putIfNotEmpty("source", commandOptions.source);
        queryParams.putIfNotEmpty("regions", commandOptions.regions);
        queryParams.putIfNotEmpty("categories", commandOptions.categories);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotNull("snapshot", commandOptions.snapshot);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getDiseasePanelClient().distinct(commandOptions.field, queryParams);
    }

    private RestResponse<Job> importPanels() throws Exception {

        logger.debug("Executing import in Disease Panels command line");

        DiseasePanelsCommandOptions.ImportCommandOptions commandOptions = diseasePanelsCommandOptions.importCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        PanelImportParams panelImportParams = new PanelImportParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(panelImportParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            panelImportParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), PanelImportParams.class);
        } else {
            panelImportParams.setSource(commandOptions.source);
            panelImportParams.setId(commandOptions.id);

        }
        return openCGAClient.getDiseasePanelClient().importPanels(panelImportParams, queryParams);
    }

    private RestResponse<Panel> search() throws Exception {

        logger.debug("Executing search in Disease Panels command line");

        DiseasePanelsCommandOptions.SearchCommandOptions commandOptions = diseasePanelsCommandOptions.searchCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("genes", commandOptions.genes);
        queryParams.putIfNotEmpty("source", commandOptions.source);
        queryParams.putIfNotEmpty("regions", commandOptions.regions);
        queryParams.putIfNotEmpty("categories", commandOptions.categories);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotNull("snapshot", commandOptions.snapshot);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getDiseasePanelClient().search(queryParams);
    }

    private RestResponse<ObjectMap> acl() throws Exception {

        logger.debug("Executing acl in Disease Panels command line");

        DiseasePanelsCommandOptions.AclCommandOptions commandOptions = diseasePanelsCommandOptions.aclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("member", commandOptions.member);
        queryParams.putIfNotNull("silent", commandOptions.silent);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getDiseasePanelClient().acl(commandOptions.panels, queryParams);
    }

    private RestResponse<Panel> delete() throws Exception {

        logger.debug("Executing delete in Disease Panels command line");

        DiseasePanelsCommandOptions.DeleteCommandOptions commandOptions = diseasePanelsCommandOptions.deleteCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getDiseasePanelClient().delete(commandOptions.panels, queryParams);
    }

    private RestResponse<Panel> info() throws Exception {

        logger.debug("Executing info in Disease Panels command line");

        DiseasePanelsCommandOptions.InfoCommandOptions commandOptions = diseasePanelsCommandOptions.infoCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("version", commandOptions.version);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getDiseasePanelClient().info(commandOptions.panels, queryParams);
    }

    private RestResponse<Panel> update() throws Exception {

        logger.debug("Executing update in Disease Panels command line");

        DiseasePanelsCommandOptions.UpdateCommandOptions commandOptions = diseasePanelsCommandOptions.updateCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        PanelUpdateParams panelUpdateParams = new PanelUpdateParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Panel> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(panelUpdateParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            panelUpdateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), PanelUpdateParams.class);
        } else {
            // Generate beans for nested objects
            DiseasePanel.SourcePanel sourceParam = new DiseasePanel.SourcePanel();
            sourceParam.setId(commandOptions.sourceId);
            sourceParam.setName(commandOptions.sourceName);
            sourceParam.setVersion(commandOptions.sourceVersion);
            sourceParam.setAuthor(commandOptions.sourceAuthor);
            sourceParam.setProject(commandOptions.sourceProject);

            //Set main body params
            panelUpdateParams.setId(commandOptions.id);
            panelUpdateParams.setName(commandOptions.name);
            panelUpdateParams.setDescription(commandOptions.description);
            panelUpdateParams.setAuthor(commandOptions.author);
            panelUpdateParams.setSource(sourceParam);
            //panelUpdateParams.setCategories(commandOptions.categories); // Unsupported param. FIXME 
            panelUpdateParams.setTags(splitWithTrim(commandOptions.tags));
            //panelUpdateParams.setDisorders(commandOptions.disorders); // Unsupported param. FIXME 
            //panelUpdateParams.setVariants(commandOptions.variants); // Unsupported param. FIXME 
            //panelUpdateParams.setGenes(commandOptions.genes); // Unsupported param. FIXME 
            //panelUpdateParams.setRegions(commandOptions.regions); // Unsupported param. FIXME 
            //panelUpdateParams.setStrs(commandOptions.strs); // Unsupported param. FIXME 
            panelUpdateParams.setStats(new HashMap<>(commandOptions.stats));
            panelUpdateParams.setAttributes(new HashMap<>(commandOptions.attributes));

        }
        return openCGAClient.getDiseasePanelClient().update(commandOptions.panels, panelUpdateParams, queryParams);
    }
}