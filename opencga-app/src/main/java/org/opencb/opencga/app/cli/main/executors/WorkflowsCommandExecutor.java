package org.opencb.opencga.app.cli.main.executors;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.HashMap;
import java.util.List;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.commons.utils.PrintUtils;
import org.opencb.opencga.app.cli.main.*;
import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.app.cli.main.options.WorkflowsCommandOptions;
import org.opencb.opencga.catalog.exceptions.CatalogAuthenticationException;
import org.opencb.opencga.catalog.utils.ParamUtils.AclAction;
import org.opencb.opencga.core.common.JacksonUtils;
import org.opencb.opencga.core.exceptions.ClientException;
import org.opencb.opencga.core.models.common.InternalStatus;
import org.opencb.opencga.core.models.externalTool.ExternalTool;
import org.opencb.opencga.core.models.externalTool.ExternalToolAclEntryList;
import org.opencb.opencga.core.models.externalTool.ExternalToolAclUpdateParams;
import org.opencb.opencga.core.models.externalTool.ExternalToolInternal;
import org.opencb.opencga.core.models.externalTool.ExternalToolRunParams;
import org.opencb.opencga.core.models.externalTool.ExternalToolScope;
import org.opencb.opencga.core.models.externalTool.Workflow;
import org.opencb.opencga.core.models.externalTool.WorkflowRepository;
import org.opencb.opencga.core.models.externalTool.WorkflowRepositoryParams;
import org.opencb.opencga.core.models.externalTool.WorkflowSystem;
import org.opencb.opencga.core.models.externalTool.workflow.DeprecatedWorkflowUpdateParams;
import org.opencb.opencga.core.models.externalTool.workflow.WorkflowCreateParams;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.opencga.core.models.job.MinimumRequirements;
import org.opencb.opencga.core.response.QueryType;
import org.opencb.opencga.core.response.RestResponse;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*  
*/
/**
 * This class contains methods for the Workflows command line.
 *    PATH: /{apiVersion}/workflows
 */
public class WorkflowsCommandExecutor extends OpencgaCommandExecutor {

    public String categoryName = "workflows";
    public WorkflowsCommandOptions workflowsCommandOptions;

    public WorkflowsCommandExecutor(WorkflowsCommandOptions workflowsCommandOptions) throws CatalogAuthenticationException {
        super(workflowsCommandOptions.commonCommandOptions);
        this.workflowsCommandOptions = workflowsCommandOptions;
    }

    @Override
    public void execute() throws Exception {

        logger.debug("Executing Workflows command line");

        String subCommandString = getParsedSubCommand(workflowsCommandOptions.jCommander);

        RestResponse queryResponse = null;

        switch (subCommandString) {
            case "acl-update":
                queryResponse = updateAcl();
                break;
            case "create":
                queryResponse = create();
                break;
            case "distinct":
                queryResponse = distinct();
                break;
            case "import":
                queryResponse = importWorkflow();
                break;
            case "run":
                queryResponse = run();
                break;
            case "search":
                queryResponse = search();
                break;
            case "update":
                queryResponse = update();
                break;
            case "acl":
                queryResponse = acl();
                break;
            case "delete":
                queryResponse = delete();
                break;
            case "info":
                queryResponse = info();
                break;
            default:
                logger.error("Subcommand not valid");
                break;
        }

        createOutput(queryResponse);

    }

    private RestResponse<ExternalToolAclEntryList> updateAcl() throws Exception {
        logger.debug("Executing updateAcl in Workflows command line");

        WorkflowsCommandOptions.UpdateAclCommandOptions commandOptions = workflowsCommandOptions.updateAclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        ExternalToolAclUpdateParams externalToolAclUpdateParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<ExternalToolAclEntryList> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/workflows/acl/{members}/update"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            externalToolAclUpdateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), ExternalToolAclUpdateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotNull(beanParams, "externalToolIds", commandOptions.externalToolIds, true);
            putNestedIfNotNull(beanParams, "permissions", commandOptions.permissions, true);

            externalToolAclUpdateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), ExternalToolAclUpdateParams.class);
        }
        return openCGAClient.getWorkflowClient().updateAcl(commandOptions.members, commandOptions.action, externalToolAclUpdateParams, queryParams);
    }

    private RestResponse<ExternalTool> create() throws Exception {
        logger.debug("Executing create in Workflows command line");

        WorkflowsCommandOptions.CreateCommandOptions commandOptions = workflowsCommandOptions.createCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        WorkflowCreateParams workflowCreateParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<ExternalTool> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/workflows/create"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            workflowCreateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), WorkflowCreateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "id", commandOptions.id, true);
            putNestedIfNotEmpty(beanParams, "name", commandOptions.name, true);
            putNestedIfNotEmpty(beanParams, "description", commandOptions.description, true);
            putNestedIfNotNull(beanParams, "scope", commandOptions.scope, true);
            putNestedIfNotNull(beanParams, "tags", commandOptions.tags, true);
            putNestedIfNotEmpty(beanParams, "minimumRequirements.cpu", commandOptions.minimumRequirementsCpu, true);
            putNestedIfNotEmpty(beanParams, "minimumRequirements.memory", commandOptions.minimumRequirementsMemory, true);
            putNestedIfNotEmpty(beanParams, "minimumRequirements.disk", commandOptions.minimumRequirementsDisk, true);
            putNestedIfNotNull(beanParams, "draft", commandOptions.draft, true);
            putNestedIfNotEmpty(beanParams, "internal.registrationDate", commandOptions.internalRegistrationDate, true);
            putNestedIfNotEmpty(beanParams, "internal.lastModified", commandOptions.internalLastModified, true);
            putNestedIfNotEmpty(beanParams, "internal.registrationUserId", commandOptions.internalRegistrationUserId, true);
            putNestedIfNotEmpty(beanParams, "creationDate", commandOptions.creationDate, true);
            putNestedIfNotEmpty(beanParams, "modificationDate", commandOptions.modificationDate, true);
            putNestedMapIfNotEmpty(beanParams, "attributes", commandOptions.attributes, true);

            workflowCreateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), WorkflowCreateParams.class);
        }
        return openCGAClient.getWorkflowClient().create(workflowCreateParams, queryParams);
    }

    private RestResponse<Object> distinct() throws Exception {
        logger.debug("Executing distinct in Workflows command line");

        WorkflowsCommandOptions.DistinctCommandOptions commandOptions = workflowsCommandOptions.distinctCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotNull("draft", commandOptions.draft);
        queryParams.putIfNotEmpty("internalRegistrationUserId", commandOptions.internalRegistrationUserId);
        queryParams.putIfNotEmpty("managerId", commandOptions.managerId);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotNull("snapshot", commandOptions.snapshot);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getWorkflowClient().distinct(commandOptions.field, queryParams);
    }

    private RestResponse<ExternalTool> importWorkflow() throws Exception {
        logger.debug("Executing importWorkflow in Workflows command line");

        WorkflowsCommandOptions.ImportCommandOptions commandOptions = workflowsCommandOptions.importCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        WorkflowRepositoryParams workflowRepositoryParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<ExternalTool> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/workflows/import"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            workflowRepositoryParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), WorkflowRepositoryParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "name", commandOptions.name, true);
            putNestedIfNotEmpty(beanParams, "tag", commandOptions.tag, true);
            putNestedIfNotEmpty(beanParams, "user", commandOptions.user, true);
            putNestedIfNotEmpty(beanParams, "password", commandOptions.password, true);

            workflowRepositoryParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), WorkflowRepositoryParams.class);
        }
        return openCGAClient.getWorkflowClient().importWorkflow(workflowRepositoryParams, queryParams);
    }

    private RestResponse<Job> run() throws Exception {
        logger.debug("Executing run in Workflows command line");

        WorkflowsCommandOptions.RunCommandOptions commandOptions = workflowsCommandOptions.runCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("jobScheduledStartTime", commandOptions.jobScheduledStartTime);
        queryParams.putIfNotEmpty("jobPriority", commandOptions.jobPriority);
        queryParams.putIfNotNull("jobDryRun", commandOptions.jobDryRun);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        ExternalToolRunParams externalToolRunParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/workflows/run"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            externalToolRunParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), ExternalToolRunParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "id", commandOptions.id, true);
            putNestedIfNotNull(beanParams, "version", commandOptions.version, true);
            putNestedMapIfNotEmpty(beanParams, "params", commandOptions.params, true);

            externalToolRunParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), ExternalToolRunParams.class);
        }
        return openCGAClient.getWorkflowClient().run(externalToolRunParams, queryParams);
    }

    private RestResponse<ExternalTool> search() throws Exception {
        logger.debug("Executing search in Workflows command line");

        WorkflowsCommandOptions.SearchCommandOptions commandOptions = workflowsCommandOptions.searchCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotNull("draft", commandOptions.draft);
        queryParams.putIfNotEmpty("internalRegistrationUserId", commandOptions.internalRegistrationUserId);
        queryParams.putIfNotEmpty("managerId", commandOptions.managerId);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotNull("snapshot", commandOptions.snapshot);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getWorkflowClient().search(queryParams);
    }

    private RestResponse<ExternalTool> update() throws Exception {
        logger.debug("Executing update in Workflows command line");

        WorkflowsCommandOptions.UpdateCommandOptions commandOptions = workflowsCommandOptions.updateCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        DeprecatedWorkflowUpdateParams deprecatedWorkflowUpdateParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<ExternalTool> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/workflows/{workflowId}/update"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            deprecatedWorkflowUpdateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), DeprecatedWorkflowUpdateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "name", commandOptions.name, true);
            putNestedIfNotEmpty(beanParams, "description", commandOptions.description, true);
            putNestedIfNotNull(beanParams, "manager.id", commandOptions.managerId, true);
            putNestedIfNotEmpty(beanParams, "manager.version", commandOptions.managerVersion, true);
            putNestedIfNotNull(beanParams, "scope", commandOptions.scope, true);
            putNestedIfNotNull(beanParams, "tags", commandOptions.tags, true);
            putNestedIfNotNull(beanParams, "draft", commandOptions.draft, true);
            putNestedIfNotEmpty(beanParams, "repository.name", commandOptions.repositoryName, true);
            putNestedIfNotEmpty(beanParams, "repository.tag", commandOptions.repositoryTag, true);
            putNestedIfNotEmpty(beanParams, "repository.author", commandOptions.repositoryAuthor, true);
            putNestedIfNotEmpty(beanParams, "repository.description", commandOptions.repositoryDescription, true);
            putNestedIfNotEmpty(beanParams, "repository.user", commandOptions.repositoryUser, true);
            putNestedIfNotEmpty(beanParams, "repository.password", commandOptions.repositoryPassword, true);
            putNestedIfNotEmpty(beanParams, "minimumRequirements.cpu", commandOptions.minimumRequirementsCpu, true);
            putNestedIfNotEmpty(beanParams, "minimumRequirements.memory", commandOptions.minimumRequirementsMemory, true);
            putNestedIfNotEmpty(beanParams, "minimumRequirements.disk", commandOptions.minimumRequirementsDisk, true);
            putNestedIfNotEmpty(beanParams, "creationDate", commandOptions.creationDate, true);
            putNestedIfNotEmpty(beanParams, "modificationDate", commandOptions.modificationDate, true);
            putNestedMapIfNotEmpty(beanParams, "attributes", commandOptions.attributes, true);

            deprecatedWorkflowUpdateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), DeprecatedWorkflowUpdateParams.class);
        }
        return openCGAClient.getWorkflowClient().update(commandOptions.workflowId, deprecatedWorkflowUpdateParams, queryParams);
    }

    private RestResponse<ExternalToolAclEntryList> acl() throws Exception {
        logger.debug("Executing acl in Workflows command line");

        WorkflowsCommandOptions.AclCommandOptions commandOptions = workflowsCommandOptions.aclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("member", commandOptions.member);
        queryParams.putIfNotNull("silent", commandOptions.silent);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getWorkflowClient().acl(commandOptions.workflows, queryParams);
    }

    private RestResponse<ExternalTool> delete() throws Exception {
        logger.debug("Executing delete in Workflows command line");

        WorkflowsCommandOptions.DeleteCommandOptions commandOptions = workflowsCommandOptions.deleteCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getWorkflowClient().delete(commandOptions.workflows, queryParams);
    }

    private RestResponse<ExternalTool> info() throws Exception {
        logger.debug("Executing info in Workflows command line");

        WorkflowsCommandOptions.InfoCommandOptions commandOptions = workflowsCommandOptions.infoCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("version", commandOptions.version);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getWorkflowClient().info(commandOptions.workflows, queryParams);
    }
}