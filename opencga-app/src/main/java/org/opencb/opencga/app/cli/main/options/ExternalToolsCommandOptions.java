package org.opencb.opencga.app.cli.main.options;

import com.beust.jcommander.JCommander;
import com.beust.jcommander.Parameter;
import com.beust.jcommander.Parameters;
import com.beust.jcommander.DynamicParameter;
import com.beust.jcommander.ParametersDelegate;

import java.util.HashMap;
import java.util.Map;
import java.util.List;

import static org.opencb.opencga.app.cli.GeneralCliOptions.*;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*  
*/

/**
 * This class contains methods for the External Tools command line.
 *    PATH: /{apiVersion}/tools
 */
@Parameters(commandNames = {"tools"}, commandDescription = "External Tools commands")
public class ExternalToolsCommandOptions {

        public JCommander jCommander;
        public CommonCommandOptions commonCommandOptions;

        public UpdateAclCommandOptions updateAclCommandOptions;
        public AggregationStatsCommandOptions aggregationStatsCommandOptions;
        public BuildCustomCommandOptions buildCustomCommandOptions;
        public CreateCustomCommandOptions createCustomCommandOptions;
        public RunCustomDockerCommandOptions runCustomDockerCommandOptions;
        public RunCustomCommandOptions runCustomCommandOptions;
        public UpdateCustomCommandOptions updateCustomCommandOptions;
        public DistinctCommandOptions distinctCommandOptions;
        public SearchCommandOptions searchCommandOptions;
        public CreateWorkflowCommandOptions createWorkflowCommandOptions;
        public ImportWorkflowCommandOptions importWorkflowCommandOptions;
        public RunWorkflowCommandOptions runWorkflowCommandOptions;
        public UpdateWorkflowCommandOptions updateWorkflowCommandOptions;
        public AclCommandOptions aclCommandOptions;
        public DeleteCommandOptions deleteCommandOptions;
        public InfoCommandOptions infoCommandOptions;


    public ExternalToolsCommandOptions(CommonCommandOptions commonCommandOptions, JCommander jCommander) {
    
        this.jCommander = jCommander;
        this.commonCommandOptions = commonCommandOptions;
        this.updateAclCommandOptions = new UpdateAclCommandOptions();
        this.aggregationStatsCommandOptions = new AggregationStatsCommandOptions();
        this.buildCustomCommandOptions = new BuildCustomCommandOptions();
        this.createCustomCommandOptions = new CreateCustomCommandOptions();
        this.runCustomDockerCommandOptions = new RunCustomDockerCommandOptions();
        this.runCustomCommandOptions = new RunCustomCommandOptions();
        this.updateCustomCommandOptions = new UpdateCustomCommandOptions();
        this.distinctCommandOptions = new DistinctCommandOptions();
        this.searchCommandOptions = new SearchCommandOptions();
        this.createWorkflowCommandOptions = new CreateWorkflowCommandOptions();
        this.importWorkflowCommandOptions = new ImportWorkflowCommandOptions();
        this.runWorkflowCommandOptions = new RunWorkflowCommandOptions();
        this.updateWorkflowCommandOptions = new UpdateWorkflowCommandOptions();
        this.aclCommandOptions = new AclCommandOptions();
        this.deleteCommandOptions = new DeleteCommandOptions();
        this.infoCommandOptions = new InfoCommandOptions();
    
    }
    
    @Parameters(commandNames = {"acl-update"}, commandDescription ="Update the set of external tool permissions granted for the member")
    public class UpdateAclCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[organization@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--members"}, description = "Comma separated list of user or group ids", required = true, arity = 1)
        public String members; 
    
        @Parameter(names = {"--action"}, description = "Action to be performed [ADD, SET, REMOVE or RESET].", required = true, arity = 1)
        public String action = "ADD"; 
    
        @Parameter(names = {"--external-tool-ids"}, description = "The body web service externalToolIds parameter", required = false, arity = 1)
        public String externalToolIds;
    
        @Parameter(names = {"--permissions"}, description = "The body web service permissions parameter", required = false, arity = 1)
        public String permissions;
    
    }

    @Parameters(commandNames = {"aggregationstats"}, commandDescription ="Fetch external tool stats")
    public class AggregationStatsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[organization@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--id"}, description = "Comma separated list of external tool IDs up to a maximum of 100. Also admits basic regular expressions using the operator '~', i.e. '~{perl-regex}' e.g. '~value' for case sensitive, '~/value/i' for case insensitive search.", required = false, arity = 1)
        public String id; 
    
        @Parameter(names = {"--name", "-n"}, description = "Comma separated list of external tool names up to a maximum of 100. Also admits basic regular expressions using the operator '~', i.e. '~{perl-regex}' e.g. '~value' for case sensitive, '~/value/i' for case insensitive search.", required = false, arity = 1)
        public String name; 
    
        @Parameter(names = {"--uuid"}, description = "Comma separated list of external tool UUIDs up to a maximum of 100", required = false, arity = 1)
        public String uuid; 
    
        @Parameter(names = {"--tags"}, description = "Comma separated list of tags", required = false, arity = 1)
        public String tags; 
    
        @Parameter(names = {"--draft"}, description = "Boolean field indicating whether the workflow is a draft or not.", required = false, arity = 1)
        public Boolean draft; 
    
        @Parameter(names = {"--internal.registration-user-id"}, description = "UserId that created the workflow.", required = false, arity = 1)
        public String internalRegistrationUserId; 
    
        @Parameter(names = {"--type"}, description = "External tool type. Allowed types: [CUSTOM_TOOL, VARIANT_WALKER or WORKFLOW]", required = false, arity = 1)
        public String type; 
    
        @Parameter(names = {"--scope"}, description = "External tool scope. Allowed types: [CLINICAL_INTERPRETATION, SECONDARY_ANALYSIS, RESEARCH or OTHER]", required = false, arity = 1)
        public String scope; 
    
        @Parameter(names = {"--workflow-repository-name"}, description = "Workflow repository name", required = false, arity = 1)
        public String workflowRepositoryName; 
    
        @Parameter(names = {"--docker-name"}, description = "Docker name", required = false, arity = 1)
        public String dockerName; 
    
        @Parameter(names = {"--creation-date", "--cd"}, description = "Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805", required = false, arity = 1)
        public String creationDate; 
    
        @Parameter(names = {"--modification-date", "--md"}, description = "Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805", required = false, arity = 1)
        public String modificationDate; 
    
        @Parameter(names = {"--acl"}, description = "Filter entries for which a user has the provided permissions. Format: acl={user}:{permissions}. Example: acl=john:WRITE,WRITE_ANNOTATIONS will return all entries for which user john has both WRITE and WRITE_ANNOTATIONS permissions. Only study owners or administrators can query by this field. ", required = false, arity = 1)
        public String acl; 
    
        @Parameter(names = {"--release"}, description = "Release when it was created", required = false, arity = 1)
        public String release; 
    
        @Parameter(names = {"--snapshot"}, description = "Snapshot value (Latest version of the entry in the specified release)", required = false, arity = 1)
        public Integer snapshot; 
    
        @Parameter(names = {"--deleted"}, description = "Boolean to retrieve deleted entries", required = false, help = true, arity = 0)
        public boolean deleted = false; 
    
        @Parameter(names = {"--field"}, description = "Field to apply aggregation statistics to (or a list of fields separated by semicolons), e.g.: studies;type;numSamples[0..10]:1;format:sum(size)", required = false, arity = 1)
        public String field; 
    
    }

    @Parameters(commandNames = {"custom-build"}, commandDescription ="Execute an analysis from a custom binary.")
    public class BuildCustomCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[organization@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--job-scheduled-start-time"}, description = "Time when the job is scheduled to start.", required = false, arity = 1)
        public String jobScheduledStartTime; 
    
        @Parameter(names = {"--job-priority"}, description = "Priority of the job", required = false, arity = 1)
        public String jobPriority; 
    
        @Parameter(names = {"--job-dry-run"}, description = "Flag indicating that the job will be executed in dry-run mode. In this mode, OpenCGA will validate that all parameters and prerequisites are correctly set for successful execution, but the job will not actually run.", required = false, arity = 1)
        public Boolean jobDryRun; 
    
        @Parameter(names = {"--git-repository"}, description = "The body web service gitRepository parameter", required = false, arity = 1)
        public String gitRepository;
    
        @Parameter(names = {"--apt-get"}, description = "The body web service aptGet parameter", required = false, arity = 1)
        public String aptGet;
    
        @Parameter(names = {"--install-r"}, description = "The body web service installR parameter", required = false, arity = 1)
        public Boolean installR;
    
        @Parameter(names = {"--docker-organisation"}, description = "The body web service organisation parameter", required = false, arity = 1)
        public String dockerOrganisation;
    
        @Parameter(names = {"--docker-name"}, description = "The body web service name parameter", required = false, arity = 1)
        public String dockerName;
    
        @Parameter(names = {"--docker-tag"}, description = "The body web service tag parameter", required = false, arity = 1)
        public String dockerTag;
    
        @Parameter(names = {"--docker-user"}, description = "The body web service user parameter", required = false, arity = 1)
        public String dockerUser;
    
        @Parameter(names = {"--docker-password"}, description = "The body web service password parameter", required = false, arity = 1)
        public String dockerPassword;
    
    }

    @Parameters(commandNames = {"custom-create"}, commandDescription ="Register a new external tool of type CUSTOM_TOOL")
    public class CreateCustomCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--include", "-I"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude", "-E"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[organization@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--include-result"}, description = "Flag indicating to include the created or updated document result in the response", required = false, help = true, arity = 0)
        public boolean includeResult = false; 
    
        @Parameter(names = {"--id"}, description = "External tool ID.", required = false, arity = 1)
        public String id;
    
        @Parameter(names = {"--name", "-n"}, description = "Unique 32-character identifier assigned automatically by OpenCGA.", required = false, arity = 1)
        public String name;
    
        @Parameter(names = {"--description"}, description = "Users may provide a description for the entry.", required = false, arity = 1)
        public String description;
    
        @Parameter(names = {"--scope"}, description = "External tool scope. Valid values: SECONDARY_ANALYSIS, RESEARCH_ANALYSIS, CLINICAL_INTERPRETATION_ANALYSIS or OTHER.", required = false, arity = 1)
        public String scope;
    
        @Parameter(names = {"--docker-name"}, description = "Docker name.", required = false, arity = 1)
        public String dockerName;
    
        @Parameter(names = {"--docker-tag"}, description = "Docker tag.", required = false, arity = 1)
        public String dockerTag;
    
        @Parameter(names = {"--docker-command-line"}, description = "Docker CLI.", required = false, arity = 1)
        public String dockerCommandLine;
    
        @Parameter(names = {"--docker-user"}, description = "User that can access the private Docker repository.", required = false, arity = 1)
        public String dockerUser;
    
        @Parameter(names = {"--docker-password"}, description = "Password corresponding to the user that can access the Docker repository.", required = false, arity = 1)
        public String dockerPassword;
    
        @Parameter(names = {"--tags"}, description = "List of tags.", required = false, arity = 1)
        public String tags;
    
        @Parameter(names = {"--minimum-requirements-cpu"}, description = "Minimum number of cpu cores required to execute the process.", required = false, arity = 1)
        public String minimumRequirementsCpu;
    
        @Parameter(names = {"--minimum-requirements-memory"}, description = "Minimum memory required to execute the process.", required = false, arity = 1)
        public String minimumRequirementsMemory;
    
        @Parameter(names = {"--minimum-requirements-disk"}, description = "Minimum disk required to execute the process.", required = false, arity = 1)
        public String minimumRequirementsDisk;
    
        @Parameter(names = {"--draft"}, description = "Flag indicating whether the external tool is a draft or not.", required = false, help = true, arity = 0)
        public boolean draft = false;
    
        @Parameter(names = {"--internal-registration-date"}, description = "Registration date of the internal object.", required = false, arity = 1)
        public String internalRegistrationDate;
    
        @Parameter(names = {"--internal-last-modified"}, description = "Date of the last modification of the internal object.", required = false, arity = 1)
        public String internalLastModified;
    
        @Parameter(names = {"--internal-registration-user-id"}, description = "The body web service registrationUserId parameter", required = false, arity = 1)
        public String internalRegistrationUserId;
    
        @Parameter(names = {"--creation-date", "--cd"}, description = "Autogenerated date following the format YYYYMMDDhhmmss containing the date when the entry was first registered.", required = false, arity = 1)
        public String creationDate;
    
        @Parameter(names = {"--modification-date", "--md"}, description = "Autogenerated date following the format YYYYMMDDhhmmss containing the date when the entry was last modified.", required = false, arity = 1)
        public String modificationDate;
    
        @DynamicParameter(names = {"--attributes"}, description = "You can use this field to store any other information, keep in mind this is not indexed so you cannot search by attributes.. Use: --attributes key=value", required = false)
        public java.util.Map<java.lang.String,java.lang.Object> attributes = new HashMap<>(); //Dynamic parameters must be initialized;
    
    }

    @Parameters(commandNames = {"custom-docker-run"}, commandDescription ="Execute an analysis from a custom binary.")
    public class RunCustomDockerCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[organization@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--job-scheduled-start-time"}, description = "Time when the job is scheduled to start.", required = false, arity = 1)
        public String jobScheduledStartTime; 
    
        @Parameter(names = {"--job-priority"}, description = "Priority of the job", required = false, arity = 1)
        public String jobPriority; 
    
        @Parameter(names = {"--job-dry-run"}, description = "Flag indicating that the job will be executed in dry-run mode. In this mode, OpenCGA will validate that all parameters and prerequisites are correctly set for successful execution, but the job will not actually run.", required = false, arity = 1)
        public Boolean jobDryRun; 
    
        @Parameter(names = {"--name", "-n"}, description = "Docker name.", required = false, arity = 1)
        public String name;
    
        @Parameter(names = {"--tag"}, description = "Docker tag.", required = false, arity = 1)
        public String tag;
    
        @Parameter(names = {"--command-line"}, description = "Docker CLI.", required = false, arity = 1)
        public String commandLine;
    
        @Parameter(names = {"--user", "-u"}, description = "User that can access the private Docker repository.", required = false, arity = 1)
        public String user;
    
        @Parameter(names = {"--password"}, description = "Password corresponding to the user that can access the Docker repository.", required = false, arity = 1)
        public String password;
    
    }

    @Parameters(commandNames = {"custom-run"}, commandDescription ="Execute an analysis from a custom binary.")
    public class RunCustomCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--tool-id"}, description = "Comma separated list of external tool IDs up to a maximum of 100. Also admits basic regular expressions using the operator '~', i.e. '~{perl-regex}' e.g. '~value' for case sensitive, '~/value/i' for case insensitive search.", required = true, arity = 1)
        public String toolId; 
    
        @Parameter(names = {"--version"}, description = "Tool version. If not provided, the latest version will be used.", required = false, arity = 1)
        public Integer version; 
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[organization@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--job-scheduled-start-time"}, description = "Time when the job is scheduled to start.", required = false, arity = 1)
        public String jobScheduledStartTime; 
    
        @Parameter(names = {"--job-priority"}, description = "Priority of the job", required = false, arity = 1)
        public String jobPriority; 
    
        @Parameter(names = {"--job-dry-run"}, description = "Flag indicating that the job will be executed in dry-run mode. In this mode, OpenCGA will validate that all parameters and prerequisites are correctly set for successful execution, but the job will not actually run.", required = false, arity = 1)
        public Boolean jobDryRun; 
    
        @Parameter(names = {"--command-line"}, description = "The body web service commandLine parameter", required = false, arity = 1)
        public String commandLine;
    
        @DynamicParameter(names = {"--params"}, description = "The body web service params parameter. Use: --params key=value", required = false)
        public java.util.Map<java.lang.String,java.lang.String> params = new HashMap<>(); //Dynamic parameters must be initialized;
    
    }

    @Parameters(commandNames = {"custom-update"}, commandDescription ="Update some custom external tool attributes")
    public class UpdateCustomCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--include", "-I"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude", "-E"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--tool-id"}, description = "Comma separated list of external tool IDs up to a maximum of 100. Also admits basic regular expressions using the operator '~', i.e. '~{perl-regex}' e.g. '~value' for case sensitive, '~/value/i' for case insensitive search.", required = true, arity = 1)
        public String toolId; 
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[organization@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--include-result"}, description = "Flag indicating to include the created or updated document result in the response", required = false, help = true, arity = 0)
        public boolean includeResult = false; 
    
        @Parameter(names = {"--name", "-n"}, description = "Unique 32-character identifier assigned automatically by OpenCGA.", required = false, arity = 1)
        public String name;
    
        @Parameter(names = {"--description"}, description = "Users may provide a description for the entry.", required = false, arity = 1)
        public String description;
    
        @Parameter(names = {"--scope"}, description = "External tool scope. Valid values: SECONDARY_ANALYSIS, RESEARCH_ANALYSIS, CLINICAL_INTERPRETATION_ANALYSIS or OTHER.", required = false, arity = 1)
        public String scope;
    
        @Parameter(names = {"--tags"}, description = "List of tags.", required = false, arity = 1)
        public String tags;
    
        @Parameter(names = {"--minimum-requirements-cpu"}, description = "Minimum number of cpu cores required to execute the process.", required = false, arity = 1)
        public String minimumRequirementsCpu;
    
        @Parameter(names = {"--minimum-requirements-memory"}, description = "Minimum memory required to execute the process.", required = false, arity = 1)
        public String minimumRequirementsMemory;
    
        @Parameter(names = {"--minimum-requirements-disk"}, description = "Minimum disk required to execute the process.", required = false, arity = 1)
        public String minimumRequirementsDisk;
    
        @Parameter(names = {"--draft"}, description = "Flag indicating whether the external tool is a draft or not.", required = false, help = true, arity = 0)
        public boolean draft = false;
    
        @Parameter(names = {"--creation-date", "--cd"}, description = "Autogenerated date following the format YYYYMMDDhhmmss containing the date when the entry was first registered.", required = false, arity = 1)
        public String creationDate;
    
        @Parameter(names = {"--modification-date", "--md"}, description = "Autogenerated date following the format YYYYMMDDhhmmss containing the date when the entry was last modified.", required = false, arity = 1)
        public String modificationDate;
    
        @DynamicParameter(names = {"--attributes"}, description = "You can use this field to store any other information, keep in mind this is not indexed so you cannot search by attributes.. Use: --attributes key=value", required = false)
        public java.util.Map<java.lang.String,java.lang.Object> attributes = new HashMap<>(); //Dynamic parameters must be initialized;
    
        @Parameter(names = {"--docker-name"}, description = "Docker name.", required = false, arity = 1)
        public String dockerName;
    
        @Parameter(names = {"--docker-tag"}, description = "Docker tag.", required = false, arity = 1)
        public String dockerTag;
    
        @Parameter(names = {"--docker-command-line"}, description = "Docker CLI.", required = false, arity = 1)
        public String dockerCommandLine;
    
        @Parameter(names = {"--docker-user"}, description = "User that can access the private Docker repository.", required = false, arity = 1)
        public String dockerUser;
    
        @Parameter(names = {"--docker-password"}, description = "Password corresponding to the user that can access the Docker repository.", required = false, arity = 1)
        public String dockerPassword;
    
    }

    @Parameters(commandNames = {"distinct"}, commandDescription ="External tool distinct method")
    public class DistinctCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[organization@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--id"}, description = "Comma separated list of external tool IDs up to a maximum of 100. Also admits basic regular expressions using the operator '~', i.e. '~{perl-regex}' e.g. '~value' for case sensitive, '~/value/i' for case insensitive search.", required = false, arity = 1)
        public String id; 
    
        @Parameter(names = {"--name", "-n"}, description = "Comma separated list of external tool names up to a maximum of 100. Also admits basic regular expressions using the operator '~', i.e. '~{perl-regex}' e.g. '~value' for case sensitive, '~/value/i' for case insensitive search.", required = false, arity = 1)
        public String name; 
    
        @Parameter(names = {"--uuid"}, description = "Comma separated list of external tool UUIDs up to a maximum of 100", required = false, arity = 1)
        public String uuid; 
    
        @Parameter(names = {"--tags"}, description = "Comma separated list of tags", required = false, arity = 1)
        public String tags; 
    
        @Parameter(names = {"--draft"}, description = "Boolean field indicating whether the workflow is a draft or not.", required = false, arity = 1)
        public Boolean draft; 
    
        @Parameter(names = {"--internal.registration-user-id"}, description = "UserId that created the workflow.", required = false, arity = 1)
        public String internalRegistrationUserId; 
    
        @Parameter(names = {"--type"}, description = "External tool type. Allowed types: [CUSTOM_TOOL, VARIANT_WALKER or WORKFLOW]", required = false, arity = 1)
        public String type; 
    
        @Parameter(names = {"--scope"}, description = "External tool scope. Allowed types: [CLINICAL_INTERPRETATION, SECONDARY_ANALYSIS, RESEARCH or OTHER]", required = false, arity = 1)
        public String scope; 
    
        @Parameter(names = {"--workflow-repository-name"}, description = "Workflow repository name", required = false, arity = 1)
        public String workflowRepositoryName; 
    
        @Parameter(names = {"--docker-name"}, description = "Docker name", required = false, arity = 1)
        public String dockerName; 
    
        @Parameter(names = {"--creation-date", "--cd"}, description = "Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805", required = false, arity = 1)
        public String creationDate; 
    
        @Parameter(names = {"--modification-date", "--md"}, description = "Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805", required = false, arity = 1)
        public String modificationDate; 
    
        @Parameter(names = {"--acl"}, description = "Filter entries for which a user has the provided permissions. Format: acl={user}:{permissions}. Example: acl=john:WRITE,WRITE_ANNOTATIONS will return all entries for which user john has both WRITE and WRITE_ANNOTATIONS permissions. Only study owners or administrators can query by this field. ", required = false, arity = 1)
        public String acl; 
    
        @Parameter(names = {"--release"}, description = "Release when it was created", required = false, arity = 1)
        public String release; 
    
        @Parameter(names = {"--snapshot"}, description = "Snapshot value (Latest version of the entry in the specified release)", required = false, arity = 1)
        public Integer snapshot; 
    
        @Parameter(names = {"--deleted"}, description = "Boolean to retrieve deleted entries", required = false, help = true, arity = 0)
        public boolean deleted = false; 
    
        @Parameter(names = {"--field"}, description = "Comma separated list of fields for which to obtain the distinct values", required = true, arity = 1)
        public String field; 
    
    }

    @Parameters(commandNames = {"search"}, commandDescription ="External tool search method")
    public class SearchCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include", "-I"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude", "-E"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--limit"}, description = "Number of results to be returned", required = false, arity = 1)
        public Integer limit; 
    
        @Parameter(names = {"--skip"}, description = "Number of results to skip", required = false, arity = 1)
        public Integer skip; 
    
        @Parameter(names = {"--count"}, description = "Get the total number of results matching the query. Deactivated by default.", required = false, help = true, arity = 0)
        public boolean count = false; 
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[organization@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--id"}, description = "Comma separated list of external tool IDs up to a maximum of 100. Also admits basic regular expressions using the operator '~', i.e. '~{perl-regex}' e.g. '~value' for case sensitive, '~/value/i' for case insensitive search.", required = false, arity = 1)
        public String id; 
    
        @Parameter(names = {"--name", "-n"}, description = "Comma separated list of external tool names up to a maximum of 100. Also admits basic regular expressions using the operator '~', i.e. '~{perl-regex}' e.g. '~value' for case sensitive, '~/value/i' for case insensitive search.", required = false, arity = 1)
        public String name; 
    
        @Parameter(names = {"--uuid"}, description = "Comma separated list of external tool UUIDs up to a maximum of 100", required = false, arity = 1)
        public String uuid; 
    
        @Parameter(names = {"--tags"}, description = "Comma separated list of tags", required = false, arity = 1)
        public String tags; 
    
        @Parameter(names = {"--draft"}, description = "Boolean field indicating whether the workflow is a draft or not.", required = false, arity = 1)
        public Boolean draft; 
    
        @Parameter(names = {"--internal.registration-user-id"}, description = "UserId that created the workflow.", required = false, arity = 1)
        public String internalRegistrationUserId; 
    
        @Parameter(names = {"--type"}, description = "External tool type. Allowed types: [CUSTOM_TOOL, VARIANT_WALKER or WORKFLOW]", required = false, arity = 1)
        public String type; 
    
        @Parameter(names = {"--scope"}, description = "External tool scope. Allowed types: [CLINICAL_INTERPRETATION, SECONDARY_ANALYSIS, RESEARCH or OTHER]", required = false, arity = 1)
        public String scope; 
    
        @Parameter(names = {"--workflow-repository-name"}, description = "Workflow repository name", required = false, arity = 1)
        public String workflowRepositoryName; 
    
        @Parameter(names = {"--docker-name"}, description = "Docker name", required = false, arity = 1)
        public String dockerName; 
    
        @Parameter(names = {"--creation-date", "--cd"}, description = "Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805", required = false, arity = 1)
        public String creationDate; 
    
        @Parameter(names = {"--modification-date", "--md"}, description = "Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805", required = false, arity = 1)
        public String modificationDate; 
    
        @Parameter(names = {"--acl"}, description = "Filter entries for which a user has the provided permissions. Format: acl={user}:{permissions}. Example: acl=john:WRITE,WRITE_ANNOTATIONS will return all entries for which user john has both WRITE and WRITE_ANNOTATIONS permissions. Only study owners or administrators can query by this field. ", required = false, arity = 1)
        public String acl; 
    
        @Parameter(names = {"--release"}, description = "Release when it was created", required = false, arity = 1)
        public String release; 
    
        @Parameter(names = {"--snapshot"}, description = "Snapshot value (Latest version of the entry in the specified release)", required = false, arity = 1)
        public Integer snapshot; 
    
        @Parameter(names = {"--deleted"}, description = "Boolean to retrieve deleted entries", required = false, help = true, arity = 0)
        public boolean deleted = false; 
    
    }

    @Parameters(commandNames = {"workflow-create"}, commandDescription ="Register a new external tool of type WORKFLOW")
    public class CreateWorkflowCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--include", "-I"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude", "-E"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[organization@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--include-result"}, description = "Flag indicating to include the created or updated document result in the response", required = false, help = true, arity = 0)
        public boolean includeResult = false; 
    
        @Parameter(names = {"--id"}, description = "External tool ID.", required = false, arity = 1)
        public String id;
    
        @Parameter(names = {"--name", "-n"}, description = "Unique 32-character identifier assigned automatically by OpenCGA.", required = false, arity = 1)
        public String name;
    
        @Parameter(names = {"--description"}, description = "Users may provide a description for the entry.", required = false, arity = 1)
        public String description;
    
        @Parameter(names = {"--scope"}, description = "External tool scope. Valid values: SECONDARY_ANALYSIS, RESEARCH_ANALYSIS, CLINICAL_INTERPRETATION_ANALYSIS or OTHER.", required = false, arity = 1)
        public String scope;
    
        @Parameter(names = {"--tags"}, description = "List of tags.", required = false, arity = 1)
        public String tags;
    
        @Parameter(names = {"--minimum-requirements-cpu"}, description = "Minimum number of cpu cores required to execute the process.", required = false, arity = 1)
        public String minimumRequirementsCpu;
    
        @Parameter(names = {"--minimum-requirements-memory"}, description = "Minimum memory required to execute the process.", required = false, arity = 1)
        public String minimumRequirementsMemory;
    
        @Parameter(names = {"--minimum-requirements-disk"}, description = "Minimum disk required to execute the process.", required = false, arity = 1)
        public String minimumRequirementsDisk;
    
        @Parameter(names = {"--draft"}, description = "Flag indicating whether the external tool is a draft or not.", required = false, help = true, arity = 0)
        public boolean draft = false;
    
        @Parameter(names = {"--internal-registration-date"}, description = "Registration date of the internal object.", required = false, arity = 1)
        public String internalRegistrationDate;
    
        @Parameter(names = {"--internal-last-modified"}, description = "Date of the last modification of the internal object.", required = false, arity = 1)
        public String internalLastModified;
    
        @Parameter(names = {"--internal-registration-user-id"}, description = "The body web service registrationUserId parameter", required = false, arity = 1)
        public String internalRegistrationUserId;
    
        @Parameter(names = {"--creation-date", "--cd"}, description = "Autogenerated date following the format YYYYMMDDhhmmss containing the date when the entry was first registered.", required = false, arity = 1)
        public String creationDate;
    
        @Parameter(names = {"--modification-date", "--md"}, description = "Autogenerated date following the format YYYYMMDDhhmmss containing the date when the entry was last modified.", required = false, arity = 1)
        public String modificationDate;
    
        @DynamicParameter(names = {"--attributes"}, description = "You can use this field to store any other information, keep in mind this is not indexed so you cannot search by attributes.. Use: --attributes key=value", required = false)
        public java.util.Map<java.lang.String,java.lang.Object> attributes = new HashMap<>(); //Dynamic parameters must be initialized;
    
    }

    @Parameters(commandNames = {"workflow-import"}, commandDescription ="Import an external tool of type WORKFLOW")
    public class ImportWorkflowCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[organization@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--name", "-n"}, description = "The body web service name parameter", required = false, arity = 1)
        public String name;
    
        @Parameter(names = {"--tag"}, description = "The body web service tag parameter", required = false, arity = 1)
        public String tag;
    
        @Parameter(names = {"--user", "-u"}, description = "The body web service user parameter", required = false, arity = 1)
        public String user;
    
        @Parameter(names = {"--password"}, description = "The body web service password parameter", required = false, arity = 1)
        public String password;
    
    }

    @Parameters(commandNames = {"workflow-run"}, commandDescription ="Execute an external tool of type WORKFLOW")
    public class RunWorkflowCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--tool-id"}, description = "Comma separated list of external tool IDs up to a maximum of 100. Also admits basic regular expressions using the operator '~', i.e. '~{perl-regex}' e.g. '~value' for case sensitive, '~/value/i' for case insensitive search.", required = true, arity = 1)
        public String toolId; 
    
        @Parameter(names = {"--version"}, description = "Tool version. If not provided, the latest version will be used.", required = false, arity = 1)
        public Integer version; 
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[organization@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--job-scheduled-start-time"}, description = "Time when the job is scheduled to start.", required = false, arity = 1)
        public String jobScheduledStartTime; 
    
        @Parameter(names = {"--job-priority"}, description = "Priority of the job", required = false, arity = 1)
        public String jobPriority; 
    
        @Parameter(names = {"--job-dry-run"}, description = "Flag indicating that the job will be executed in dry-run mode. In this mode, OpenCGA will validate that all parameters and prerequisites are correctly set for successful execution, but the job will not actually run.", required = false, arity = 1)
        public Boolean jobDryRun; 
    
    }

    @Parameters(commandNames = {"workflow-update"}, commandDescription ="Update some external tool attributes")
    public class UpdateWorkflowCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--include", "-I"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude", "-E"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--tool-id"}, description = "Comma separated list of external tool IDs up to a maximum of 100. Also admits basic regular expressions using the operator '~', i.e. '~{perl-regex}' e.g. '~value' for case sensitive, '~/value/i' for case insensitive search.", required = true, arity = 1)
        public String toolId; 
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[organization@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--include-result"}, description = "Flag indicating to include the created or updated document result in the response", required = false, help = true, arity = 0)
        public boolean includeResult = false; 
    
        @Parameter(names = {"--name", "-n"}, description = "Unique 32-character identifier assigned automatically by OpenCGA.", required = false, arity = 1)
        public String name;
    
        @Parameter(names = {"--description"}, description = "Users may provide a description for the entry.", required = false, arity = 1)
        public String description;
    
        @Parameter(names = {"--scope"}, description = "External tool scope. Valid values: SECONDARY_ANALYSIS, RESEARCH_ANALYSIS, CLINICAL_INTERPRETATION_ANALYSIS or OTHER.", required = false, arity = 1)
        public String scope;
    
        @Parameter(names = {"--tags"}, description = "List of tags.", required = false, arity = 1)
        public String tags;
    
        @Parameter(names = {"--minimum-requirements-cpu"}, description = "Minimum number of cpu cores required to execute the process.", required = false, arity = 1)
        public String minimumRequirementsCpu;
    
        @Parameter(names = {"--minimum-requirements-memory"}, description = "Minimum memory required to execute the process.", required = false, arity = 1)
        public String minimumRequirementsMemory;
    
        @Parameter(names = {"--minimum-requirements-disk"}, description = "Minimum disk required to execute the process.", required = false, arity = 1)
        public String minimumRequirementsDisk;
    
        @Parameter(names = {"--draft"}, description = "Flag indicating whether the external tool is a draft or not.", required = false, help = true, arity = 0)
        public boolean draft = false;
    
        @Parameter(names = {"--creation-date", "--cd"}, description = "Autogenerated date following the format YYYYMMDDhhmmss containing the date when the entry was first registered.", required = false, arity = 1)
        public String creationDate;
    
        @Parameter(names = {"--modification-date", "--md"}, description = "Autogenerated date following the format YYYYMMDDhhmmss containing the date when the entry was last modified.", required = false, arity = 1)
        public String modificationDate;
    
        @DynamicParameter(names = {"--attributes"}, description = "You can use this field to store any other information, keep in mind this is not indexed so you cannot search by attributes.. Use: --attributes key=value", required = false)
        public java.util.Map<java.lang.String,java.lang.Object> attributes = new HashMap<>(); //Dynamic parameters must be initialized;
    
    }

    @Parameters(commandNames = {"acl"}, commandDescription ="Returns the acl of the external tools. If member is provided, it will only return the acl for the member.")
    public class AclCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--tools"}, description = "Comma separated of external tool ids.", required = true, arity = 1)
        public String tools; 
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[organization@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--member"}, description = "User or group id", required = false, arity = 1)
        public String member; 
    
        @Parameter(names = {"--silent"}, description = "Boolean to retrieve all possible entries that are queried for, false to raise an exception whenever one of the entries looked for cannot be shown for whichever reason", required = false, help = true, arity = 0)
        public boolean silent = false; 
    
    }

    @Parameters(commandNames = {"delete"}, commandDescription ="Delete external tools")
    public class DeleteCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[organization@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--tools"}, description = "Comma separated of external tool ids.", required = true, arity = 1)
        public String tools; 
    
    }

    @Parameters(commandNames = {"info"}, commandDescription ="Get external tool information")
    public class InfoCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include", "-I"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude", "-E"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--tools"}, description = "Comma separated of external tool ids.", required = true, arity = 1)
        public String tools; 
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[organization@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--version"}, description = "Comma separated list of external tool versions. 'all' to get all the external tool versions. Not supported if multiple external tool ids are provided", required = false, arity = 1)
        public String version; 
    
        @Parameter(names = {"--deleted"}, description = "Boolean to retrieve deleted entries", required = false, help = true, arity = 0)
        public boolean deleted = false; 
    
    }

}