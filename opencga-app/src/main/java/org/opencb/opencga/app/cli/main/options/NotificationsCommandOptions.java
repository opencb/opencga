package org.opencb.opencga.app.cli.main.options;

import com.beust.jcommander.JCommander;
import com.beust.jcommander.Parameter;
import com.beust.jcommander.Parameters;
import com.beust.jcommander.DynamicParameter;
import com.beust.jcommander.ParametersDelegate;

import java.util.HashMap;
import java.util.Map;
import java.util.List;

import static org.opencb.opencga.app.cli.GeneralCliOptions.*;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*  
*/

/**
 * This class contains methods for the Notifications command line.
 *    PATH: /{apiVersion}/notifications
 */
@Parameters(commandNames = {"notifications"}, commandDescription = "Notifications commands")
public class NotificationsCommandOptions {

        public JCommander jCommander;
        public CommonCommandOptions commonCommandOptions;

        public AggregationStatsCommandOptions aggregationStatsCommandOptions;
        public CreateCommandOptions createCommandOptions;
        public SearchCommandOptions searchCommandOptions;
        public InfoCommandOptions infoCommandOptions;
        public VisitCommandOptions visitCommandOptions;


    public NotificationsCommandOptions(CommonCommandOptions commonCommandOptions, JCommander jCommander) {
    
        this.jCommander = jCommander;
        this.commonCommandOptions = commonCommandOptions;
        this.aggregationStatsCommandOptions = new AggregationStatsCommandOptions();
        this.createCommandOptions = new CreateCommandOptions();
        this.searchCommandOptions = new SearchCommandOptions();
        this.infoCommandOptions = new InfoCommandOptions();
        this.visitCommandOptions = new VisitCommandOptions();
    
    }
    
    @Parameters(commandNames = {"aggregationstats"}, commandDescription ="Fetch catalog notification stats")
    public class AggregationStatsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--organization"}, description = "Organization id", required = false, arity = 1)
        public String organization; 
    
        @Parameter(names = {"--uuid"}, description = "Notification UUID", required = false, arity = 1)
        public String uuid; 
    
        @Parameter(names = {"--type"}, description = "Notification type: INFO, WARNING, ERROR or URGENT", required = false, arity = 1)
        public String type; 
    
        @Parameter(names = {"--scope"}, description = "Notification scope: GLOBAL, ORGANIZATION, PROJECT or STUDY", required = false, arity = 1)
        public String scope; 
    
        @Parameter(names = {"--fqn"}, description = "Organization, project or study fqn where the notification is associated", required = false, arity = 1)
        public String fqn; 
    
        @Parameter(names = {"--sender"}, description = "User ID of the sender", required = false, arity = 1)
        public String sender; 
    
        @Parameter(names = {"--target"}, description = "Target of the notification.", required = false, arity = 1)
        public String target; 
    
        @Parameter(names = {"--receiver"}, description = "User ID receiver of the notification", required = false, arity = 1)
        public String receiver; 
    
        @Parameter(names = {"--internal-status"}, description = "Notification status: PENDING, SUCCESS, ERROR or DISCARDED", required = false, arity = 1)
        public String internalStatus; 
    
        @Parameter(names = {"--visited"}, description = "Boolean parameter indicating whether the notification has been visited or not.", required = false, arity = 1)
        public Boolean visited; 
    
        @Parameter(names = {"--creation-date", "--cd"}, description = "Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805", required = false, arity = 1)
        public String creationDate; 
    
        @Parameter(names = {"--modification-date", "--md"}, description = "Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805", required = false, arity = 1)
        public String modificationDate; 
    
        @Parameter(names = {"--field"}, description = "Field to apply aggregation statistics to (or a list of fields separated by semicolons), e.g.: studies;type;numSamples[0..10]:1;format:sum(size)", required = false, arity = 1)
        public String field; 
    
    }

    @Parameters(commandNames = {"create"}, commandDescription ="Create a new notification")
    public class CreateCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--subject"}, description = "Subject of the notification.", required = false, arity = 1)
        public String subject;
    
        @Parameter(names = {"--content"}, description = "Notification message.", required = false, arity = 1)
        public String content;
    
        @Parameter(names = {"--level"}, description = "Notification level: INFO, WARNING or CRITICAL.", required = false, arity = 1)
        public String level;
    
        @Parameter(names = {"--scope"}, description = "Notification scope: GLOBAL, ORGANIZATION, PROJECT or STUDY.", required = false, arity = 1)
        public String scope;
    
        @Parameter(names = {"--fqn"}, description = "Organization, project or study FQN depending on the Notification scope.", required = false, arity = 1)
        public String fqn;
    
        @Parameter(names = {"--targets"}, description = "Target of the notification. It may be any of (ORGANIZATION_ADMINISTRATORS, PROJECT_ADMINISTRATORS, STUDY_ADMINISTRATORS, STUDY_MEMBERS, ANY_USER) or specific groups or users.", required = false, arity = 1)
        public String targets;
    
    }

    @Parameters(commandNames = {"search"}, commandDescription ="Notification search method")
    public class SearchCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include", "-I"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude", "-E"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--limit"}, description = "Number of results to be returned", required = false, arity = 1)
        public Integer limit; 
    
        @Parameter(names = {"--skip"}, description = "Number of results to skip", required = false, arity = 1)
        public Integer skip; 
    
        @Parameter(names = {"--count"}, description = "Get the total number of results matching the query. Deactivated by default.", required = false, help = true, arity = 0)
        public boolean count = false; 
    
        @Parameter(names = {"--organization"}, description = "Organization id", required = false, arity = 1)
        public String organization; 
    
        @Parameter(names = {"--uuid"}, description = "Notification UUID", required = false, arity = 1)
        public String uuid; 
    
        @Parameter(names = {"--type"}, description = "Notification type: INFO, WARNING, ERROR or URGENT", required = false, arity = 1)
        public String type; 
    
        @Parameter(names = {"--scope"}, description = "Notification scope: GLOBAL, ORGANIZATION, PROJECT or STUDY", required = false, arity = 1)
        public String scope; 
    
        @Parameter(names = {"--fqn"}, description = "Organization, project or study fqn where the notification is associated", required = false, arity = 1)
        public String fqn; 
    
        @Parameter(names = {"--sender"}, description = "User ID of the sender", required = false, arity = 1)
        public String sender; 
    
        @Parameter(names = {"--target"}, description = "Target of the notification.", required = false, arity = 1)
        public String target; 
    
        @Parameter(names = {"--receiver"}, description = "User ID receiver of the notification", required = false, arity = 1)
        public String receiver; 
    
        @Parameter(names = {"--internal-status"}, description = "Notification status: PENDING, SUCCESS, ERROR or DISCARDED", required = false, arity = 1)
        public String internalStatus; 
    
        @Parameter(names = {"--visited"}, description = "Boolean parameter indicating whether the notification has been visited or not.", required = false, arity = 1)
        public Boolean visited; 
    
        @Parameter(names = {"--creation-date", "--cd"}, description = "Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805", required = false, arity = 1)
        public String creationDate; 
    
        @Parameter(names = {"--modification-date", "--md"}, description = "Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805", required = false, arity = 1)
        public String modificationDate; 
    
    }

    @Parameters(commandNames = {"info"}, commandDescription ="Return the notification information")
    public class InfoCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include", "-I"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude", "-E"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--notification"}, description = "Notification UUID", required = true, arity = 1)
        public String notification; 
    
        @Parameter(names = {"--organization"}, description = "Organization id", required = false, arity = 1)
        public String organization; 
    
    }

    @Parameters(commandNames = {"visit"}, commandDescription ="Mark a notification as visited")
    public class VisitCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--json-file"}, description = "File with the body data in JSON format. Note, that using this parameter will ignore all the other parameters.", required = false, arity = 1)
        public String jsonFile;
    
        @Parameter(names = {"--json-data-model"}, description = "Show example of file structure for body data.", help = true, arity = 0)
        public Boolean jsonDataModel = false;
    
        @Parameter(names = {"--notification"}, description = "Notification UUID", required = true, arity = 1)
        public String notification; 
    
        @Parameter(names = {"--organization"}, description = "Organization id", required = false, arity = 1)
        public String organization; 
    
    }

}