package org.opencb.opencga.app.cli.main.executors;

import com.fasterxml.jackson.databind.DeserializationFeature;
import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.app.cli.main.*;
import org.opencb.opencga.core.response.RestResponse;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.commons.datastore.core.ObjectMap;

import org.opencb.opencga.catalog.exceptions.CatalogAuthenticationException;
import org.opencb.opencga.core.common.JacksonUtils;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.List;
import java.util.HashMap;
import org.opencb.opencga.core.response.QueryType;
import org.opencb.commons.utils.PrintUtils;

import org.opencb.opencga.app.cli.main.options.AnalysisVariantCommandOptions;

import java.util.Map;
import org.opencb.biodata.models.clinical.ClinicalProperty.ModeOfInheritance;
import org.opencb.biodata.models.clinical.ClinicalProperty.Penetrance;
import org.opencb.biodata.models.clinical.qc.Signature;
import org.opencb.biodata.models.variant.Variant;
import org.opencb.biodata.models.variant.avro.VariantAnnotation;
import org.opencb.biodata.models.variant.metadata.Aggregation;
import org.opencb.biodata.models.variant.metadata.SampleVariantStats;
import org.opencb.biodata.models.variant.metadata.VariantMetadata;
import org.opencb.biodata.models.variant.metadata.VariantSetStats;
import org.opencb.commons.datastore.core.FacetField;
import org.opencb.commons.datastore.core.QueryResponse;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByGene;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByIndividual;
import org.opencb.opencga.core.models.clinical.ExomiserWrapperParams;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.opencga.core.models.operations.variant.VariantStatsExportParams;
import org.opencb.opencga.core.models.variant.AnnotationVariantQueryParams;
import org.opencb.opencga.core.models.variant.CircosAnalysisParams;
import org.opencb.opencga.core.models.variant.CohortVariantStatsAnalysisParams;
import org.opencb.opencga.core.models.variant.FamilyQcAnalysisParams;
import org.opencb.opencga.core.models.variant.GatkWrapperParams;
import org.opencb.opencga.core.models.variant.GenomePlotAnalysisParams;
import org.opencb.opencga.core.models.variant.GwasAnalysisParams;
import org.opencb.opencga.core.models.variant.HRDetectAnalysisParams;
import org.opencb.opencga.core.models.variant.IndividualQcAnalysisParams;
import org.opencb.opencga.core.models.variant.InferredSexAnalysisParams;
import org.opencb.opencga.core.models.variant.KnockoutAnalysisParams;
import org.opencb.opencga.core.models.variant.MendelianErrorAnalysisParams;
import org.opencb.opencga.core.models.variant.MutationalSignatureAnalysisParams;
import org.opencb.opencga.core.models.variant.PlinkWrapperParams;
import org.opencb.opencga.core.models.variant.RelatednessAnalysisParams;
import org.opencb.opencga.core.models.variant.RvtestsWrapperParams;
import org.opencb.opencga.core.models.variant.SampleEligibilityAnalysisParams;
import org.opencb.opencga.core.models.variant.SampleQcAnalysisParams;
import org.opencb.opencga.core.models.variant.SampleVariantFilterParams;
import org.opencb.opencga.core.models.variant.SampleVariantStatsAnalysisParams;
import org.opencb.opencga.core.models.variant.VariantExportParams;
import org.opencb.opencga.core.models.variant.VariantIndexParams;
import org.opencb.opencga.core.models.variant.VariantStatsAnalysisParams;
import org.opencb.oskar.analysis.variant.gwas.GwasConfiguration;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*  
*/
/**
 * This class contains methods for the Analysis - Variant command line.
 *    PATH: /{apiVersion}/analysis/variant
 */
public class AnalysisVariantCommandExecutor extends OpencgaCommandExecutor {

    private AnalysisVariantCommandOptions analysisVariantCommandOptions;

    public AnalysisVariantCommandExecutor(AnalysisVariantCommandOptions analysisVariantCommandOptions) throws CatalogAuthenticationException {
        super(analysisVariantCommandOptions.commonCommandOptions);
        this.analysisVariantCommandOptions = analysisVariantCommandOptions;
    }

    @Override
    public void execute() throws Exception {

        logger.debug("Executing Analysis - Variant command line");

        String subCommandString = getParsedSubCommand(analysisVariantCommandOptions.jCommander);

        RestResponse queryResponse = null;

        switch (subCommandString) {
            case "aggregationstats":
                queryResponse = aggregationStats();
                break;
            case "annotation-metadata":
                queryResponse = metadataAnnotation();
                break;
            case "annotation-query":
                queryResponse = queryAnnotation();
                break;
            case "circos-run":
                queryResponse = runCircos();
                break;
            case "cohort-stats-delete":
                queryResponse = deleteCohortStats();
                break;
            case "cohort-stats-info":
                queryResponse = infoCohortStats();
                break;
            case "cohort-stats-run":
                queryResponse = runCohortStats();
                break;
            case "exomiser-run":
                queryResponse = runExomiser();
                break;
            case "export-run":
                queryResponse = runExport();
                break;
            case "family-genotypes":
                queryResponse = genotypesFamily();
                break;
            case "family-qc-run":
                queryResponse = runFamilyQc();
                break;
            case "file-delete":
                queryResponse = deleteFile();
                break;
            case "gatk-run":
                queryResponse = runGatk();
                break;
            case "genome-plot-run":
                queryResponse = runGenomePlot();
                break;
            case "gwas-run":
                queryResponse = runGwas();
                break;
            case "hr-detect-run":
                queryResponse = runHrDetect();
                break;
            case "index-run":
                queryResponse = runIndex();
                break;
            case "individual-qc-run":
                queryResponse = runIndividualQc();
                break;
            case "inferred-sex-run":
                queryResponse = runInferredSex();
                break;
            case "knockout-gene-query":
                queryResponse = queryKnockoutGene();
                break;
            case "knockout-individual-query":
                queryResponse = queryKnockoutIndividual();
                break;
            case "knockout-run":
                queryResponse = runKnockout();
                break;
            case "mendelian-error-run":
                queryResponse = runMendelianError();
                break;
            case "metadata":
                queryResponse = metadata();
                break;
            case "mutational-signature-query":
                queryResponse = queryMutationalSignature();
                break;
            case "mutational-signature-run":
                queryResponse = runMutationalSignature();
                break;
            case "plink-run":
                queryResponse = runPlink();
                break;
            case "query":
                queryResponse = query();
                break;
            case "relatedness-run":
                queryResponse = runRelatedness();
                break;
            case "rvtests-run":
                queryResponse = runRvtests();
                break;
            case "sample-aggregation-stats":
                queryResponse = aggregationStatsSample();
                break;
            case "sample-eligibility-run":
                queryResponse = runSampleEligibility();
                break;
            case "sample-qc-run":
                queryResponse = runSampleQc();
                break;
            case "sample-query":
                queryResponse = querySample();
                break;
            case "sample-run":
                queryResponse = runSample();
                break;
            case "sample-stats-query":
                queryResponse = querySampleStats();
                break;
            case "sample-stats-run":
                queryResponse = runSampleStats();
                break;
            case "stats-export-run":
                queryResponse = runStatsExport();
                break;
            case "stats-run":
                queryResponse = runStats();
                break;
            default:
                logger.error("Subcommand not valid");
                break;
        }

        createOutput(queryResponse);

    }

    private RestResponse<QueryResponse> aggregationStats() throws Exception {

        logger.debug("Executing aggregationStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.AggregationStatsCommandOptions commandOptions = analysisVariantCommandOptions.aggregationStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("savedFilter", commandOptions.savedFilter);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("cohort", commandOptions.cohort);
        queryParams.putIfNotEmpty("cohortStatsRef", commandOptions.cohortStatsRef);
        queryParams.putIfNotEmpty("cohortStatsAlt", commandOptions.cohortStatsAlt);
        queryParams.putIfNotEmpty("cohortStatsMaf", commandOptions.cohortStatsMaf);
        queryParams.putIfNotEmpty("cohortStatsMgf", commandOptions.cohortStatsMgf);
        queryParams.putIfNotEmpty("cohortStatsPass", commandOptions.cohortStatsPass);
        queryParams.putIfNotEmpty("missingAlleles", commandOptions.missingAlleles);
        queryParams.putIfNotEmpty("missingGenotypes", commandOptions.missingGenotypes);
        queryParams.putIfNotEmpty("score", commandOptions.score);
        queryParams.putIfNotNull("annotationExists", commandOptions.annotationExists);
        queryParams.putIfNotEmpty("gene", commandOptions.gene);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("xref", commandOptions.xref);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("proteinSubstitution", commandOptions.proteinSubstitution);
        queryParams.putIfNotEmpty("conservation", commandOptions.conservation);
        queryParams.putIfNotEmpty("populationFrequencyAlt", commandOptions.populationFrequencyAlt);
        queryParams.putIfNotEmpty("populationFrequencyRef", commandOptions.populationFrequencyRef);
        queryParams.putIfNotEmpty("populationFrequencyMaf", commandOptions.populationFrequencyMaf);
        queryParams.putIfNotEmpty("transcriptFlag", commandOptions.transcriptFlag);
        queryParams.putIfNotEmpty("geneTraitId", commandOptions.geneTraitId);
        queryParams.putIfNotEmpty("go", commandOptions.go);
        queryParams.putIfNotEmpty("expression", commandOptions.expression);
        queryParams.putIfNotEmpty("proteinKeyword", commandOptions.proteinKeyword);
        queryParams.putIfNotEmpty("drug", commandOptions.drug);
        queryParams.putIfNotEmpty("functionalScore", commandOptions.functionalScore);
        queryParams.putIfNotEmpty("clinical", commandOptions.clinical);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotNull("clinicalConfirmedStatus", commandOptions.clinicalConfirmedStatus);
        queryParams.putIfNotEmpty("customAnnotation", commandOptions.customAnnotation);
        queryParams.putIfNotEmpty("trait", commandOptions.trait);
        queryParams.putIfNotEmpty("field", commandOptions.field);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().aggregationStats(queryParams);
    }

    private RestResponse<ObjectMap> metadataAnnotation() throws Exception {

        logger.debug("Executing metadataAnnotation in Analysis - Variant command line");

        AnalysisVariantCommandOptions.MetadataAnnotationCommandOptions commandOptions = analysisVariantCommandOptions.metadataAnnotationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("annotationId", commandOptions.annotationId);
        queryParams.putIfNotEmpty("project", commandOptions.project);

        return openCGAClient.getVariantClient().metadataAnnotation(queryParams);
    }

    private RestResponse<VariantAnnotation> queryAnnotation() throws Exception {

        logger.debug("Executing queryAnnotation in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QueryAnnotationCommandOptions commandOptions = analysisVariantCommandOptions.queryAnnotationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotEmpty("annotationId", commandOptions.annotationId);

        return openCGAClient.getVariantClient().queryAnnotation(queryParams);
    }

    private RestResponse<String> runCircos() throws Exception {

        logger.debug("Executing runCircos in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunCircosCommandOptions commandOptions = analysisVariantCommandOptions.runCircosCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        CircosAnalysisParams circosAnalysisParams= null;
        if (commandOptions.jsonDataModel) {
            circosAnalysisParams = new CircosAnalysisParams();
            RestResponse<String> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(circosAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            circosAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), CircosAnalysisParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "title",commandOptions.title, true);
             putNestedIfNotEmpty(beanParams, "density",commandOptions.density, true);
             putNestedIfNotNull(beanParams, "query",commandOptions.query, true);
             putNestedIfNotEmpty(beanParams, "outdir",commandOptions.outdir, true);
 
            circosAnalysisParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), CircosAnalysisParams.class);
        }
        return openCGAClient.getVariantClient().runCircos(circosAnalysisParams, queryParams);
    }

    private RestResponse<SampleVariantStats> deleteCohortStats() throws Exception {

        logger.debug("Executing deleteCohortStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.DeleteCohortStatsCommandOptions commandOptions = analysisVariantCommandOptions.deleteCohortStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("cohort", commandOptions.cohort);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().deleteCohortStats(queryParams);
    }

    private RestResponse<VariantSetStats> infoCohortStats() throws Exception {

        logger.debug("Executing infoCohortStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.InfoCohortStatsCommandOptions commandOptions = analysisVariantCommandOptions.infoCohortStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().infoCohortStats(commandOptions.cohort, queryParams);
    }

    private RestResponse<Job> runCohortStats() throws Exception {

        logger.debug("Executing runCohortStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunCohortStatsCommandOptions commandOptions = analysisVariantCommandOptions.runCohortStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        CohortVariantStatsAnalysisParams cohortVariantStatsAnalysisParams= null;
        if (commandOptions.jsonDataModel) {
            cohortVariantStatsAnalysisParams = new CohortVariantStatsAnalysisParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(cohortVariantStatsAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            cohortVariantStatsAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), CohortVariantStatsAnalysisParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "cohort",commandOptions.cohort, true);
             putNestedIfNotNull(beanParams, "samples",commandOptions.samples, true);
             putNestedIfNotNull(beanParams, "index",commandOptions.index, true);
             putNestedIfNotEmpty(beanParams, "sampleAnnotation",commandOptions.sampleAnnotation, true);
             putNestedIfNotEmpty(beanParams, "outdir",commandOptions.outdir, true);
 
            cohortVariantStatsAnalysisParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), CohortVariantStatsAnalysisParams.class);
        }
        return openCGAClient.getVariantClient().runCohortStats(cohortVariantStatsAnalysisParams, queryParams);
    }

    private RestResponse<Job> runExomiser() throws Exception {

        logger.debug("Executing runExomiser in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunExomiserCommandOptions commandOptions = analysisVariantCommandOptions.runExomiserCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        ExomiserWrapperParams exomiserWrapperParams= null;
        if (commandOptions.jsonDataModel) {
            exomiserWrapperParams = new ExomiserWrapperParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(exomiserWrapperParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            exomiserWrapperParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), ExomiserWrapperParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "sample",commandOptions.sample, true);
             putNestedIfNotEmpty(beanParams, "outdir",commandOptions.outdir, true);
 
            exomiserWrapperParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), ExomiserWrapperParams.class);
        }
        return openCGAClient.getVariantClient().runExomiser(exomiserWrapperParams, queryParams);
    }

    private RestResponse<Job> runExport() throws Exception {

        logger.debug("Executing runExport in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunExportCommandOptions commandOptions = analysisVariantCommandOptions.runExportCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantExportParams variantExportParams= null;
        if (commandOptions.jsonDataModel) {
            variantExportParams = new VariantExportParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantExportParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantExportParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantExportParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "id",commandOptions.id, true);
             putNestedIfNotEmpty(beanParams, "region",commandOptions.region, true);
             putNestedIfNotEmpty(beanParams, "gene",commandOptions.gene, true);
             putNestedIfNotEmpty(beanParams, "type",commandOptions.type, true);
             putNestedIfNotEmpty(beanParams, "panel",commandOptions.panel, true);
             putNestedIfNotEmpty(beanParams, "panelModeOfInheritance",commandOptions.panelModeOfInheritance, true);
             putNestedIfNotEmpty(beanParams, "panelConfidence",commandOptions.panelConfidence, true);
             putNestedIfNotEmpty(beanParams, "panelRoleInCancer",commandOptions.panelRoleInCancer, true);
             putNestedIfNotNull(beanParams, "panelIntersection",commandOptions.panelIntersection, true);
             putNestedIfNotEmpty(beanParams, "cohortStatsRef",commandOptions.cohortStatsRef, true);
             putNestedIfNotEmpty(beanParams, "cohortStatsAlt",commandOptions.cohortStatsAlt, true);
             putNestedIfNotEmpty(beanParams, "cohortStatsMaf",commandOptions.cohortStatsMaf, true);
             putNestedIfNotEmpty(beanParams, "ct",commandOptions.ct, true);
             putNestedIfNotEmpty(beanParams, "xref",commandOptions.xref, true);
             putNestedIfNotEmpty(beanParams, "biotype",commandOptions.biotype, true);
             putNestedIfNotEmpty(beanParams, "proteinSubstitution",commandOptions.proteinSubstitution, true);
             putNestedIfNotEmpty(beanParams, "conservation",commandOptions.conservation, true);
             putNestedIfNotEmpty(beanParams, "populationFrequencyMaf",commandOptions.populationFrequencyMaf, true);
             putNestedIfNotEmpty(beanParams, "populationFrequencyAlt",commandOptions.populationFrequencyAlt, true);
             putNestedIfNotEmpty(beanParams, "populationFrequencyRef",commandOptions.populationFrequencyRef, true);
             putNestedIfNotEmpty(beanParams, "transcriptFlag",commandOptions.transcriptFlag, true);
             putNestedIfNotEmpty(beanParams, "functionalScore",commandOptions.functionalScore, true);
             putNestedIfNotEmpty(beanParams, "clinical",commandOptions.clinical, true);
             putNestedIfNotEmpty(beanParams, "clinicalSignificance",commandOptions.clinicalSignificance, true);
             putNestedIfNotNull(beanParams, "clinicalConfirmedStatus",commandOptions.clinicalConfirmedStatus, true);
             putNestedIfNotEmpty(beanParams, "project",commandOptions.bodyProject, true);
             putNestedIfNotEmpty(beanParams, "study",commandOptions.bodyStudy, true);
             putNestedIfNotEmpty(beanParams, "savedFilter",commandOptions.savedFilter, true);
             putNestedIfNotEmpty(beanParams, "chromosome",commandOptions.chromosome, true);
             putNestedIfNotEmpty(beanParams, "reference",commandOptions.reference, true);
             putNestedIfNotEmpty(beanParams, "alternate",commandOptions.alternate, true);
             putNestedIfNotEmpty(beanParams, "release",commandOptions.release, true);
             putNestedIfNotEmpty(beanParams, "includeStudy",commandOptions.includeStudy, true);
             putNestedIfNotEmpty(beanParams, "includeSample",commandOptions.includeSample, true);
             putNestedIfNotEmpty(beanParams, "includeFile",commandOptions.includeFile, true);
             putNestedIfNotEmpty(beanParams, "includeSampleData",commandOptions.includeSampleData, true);
             putNestedIfNotNull(beanParams, "includeSampleId",commandOptions.includeSampleId, true);
             putNestedIfNotNull(beanParams, "includeGenotype",commandOptions.includeGenotype, true);
             putNestedIfNotEmpty(beanParams, "file",commandOptions.file, true);
             putNestedIfNotEmpty(beanParams, "qual",commandOptions.qual, true);
             putNestedIfNotEmpty(beanParams, "filter",commandOptions.filter, true);
             putNestedIfNotEmpty(beanParams, "fileData",commandOptions.fileData, true);
             putNestedIfNotEmpty(beanParams, "genotype",commandOptions.genotype, true);
             putNestedIfNotEmpty(beanParams, "sample",commandOptions.sample, true);
             putNestedIfNotNull(beanParams, "sampleLimit",commandOptions.sampleLimit, true);
             putNestedIfNotNull(beanParams, "sampleSkip",commandOptions.sampleSkip, true);
             putNestedIfNotEmpty(beanParams, "sampleData",commandOptions.sampleData, true);
             putNestedIfNotEmpty(beanParams, "sampleAnnotation",commandOptions.sampleAnnotation, true);
             putNestedIfNotEmpty(beanParams, "family",commandOptions.family, true);
             putNestedIfNotEmpty(beanParams, "familyMembers",commandOptions.familyMembers, true);
             putNestedIfNotEmpty(beanParams, "familyDisorder",commandOptions.familyDisorder, true);
             putNestedIfNotEmpty(beanParams, "familyProband",commandOptions.familyProband, true);
             putNestedIfNotEmpty(beanParams, "familySegregation",commandOptions.familySegregation, true);
             putNestedIfNotEmpty(beanParams, "cohort",commandOptions.cohort, true);
             putNestedIfNotEmpty(beanParams, "cohortStatsPass",commandOptions.cohortStatsPass, true);
             putNestedIfNotEmpty(beanParams, "cohortStatsMgf",commandOptions.cohortStatsMgf, true);
             putNestedIfNotEmpty(beanParams, "missingAlleles",commandOptions.missingAlleles, true);
             putNestedIfNotEmpty(beanParams, "missingGenotypes",commandOptions.missingGenotypes, true);
             putNestedIfNotNull(beanParams, "annotationExists",commandOptions.annotationExists, true);
             putNestedIfNotEmpty(beanParams, "score",commandOptions.score, true);
             putNestedIfNotEmpty(beanParams, "polyphen",commandOptions.polyphen, true);
             putNestedIfNotEmpty(beanParams, "sift",commandOptions.sift, true);
             putNestedIfNotEmpty(beanParams, "geneTraitId",commandOptions.geneTraitId, true);
             putNestedIfNotEmpty(beanParams, "geneTraitName",commandOptions.geneTraitName, true);
             putNestedIfNotEmpty(beanParams, "trait",commandOptions.trait, true);
             putNestedIfNotEmpty(beanParams, "cosmic",commandOptions.cosmic, true);
             putNestedIfNotEmpty(beanParams, "clinvar",commandOptions.clinvar, true);
             putNestedIfNotEmpty(beanParams, "hpo",commandOptions.hpo, true);
             putNestedIfNotEmpty(beanParams, "go",commandOptions.go, true);
             putNestedIfNotEmpty(beanParams, "expression",commandOptions.expression, true);
             putNestedIfNotEmpty(beanParams, "proteinKeyword",commandOptions.proteinKeyword, true);
             putNestedIfNotEmpty(beanParams, "drug",commandOptions.drug, true);
             putNestedIfNotEmpty(beanParams, "customAnnotation",commandOptions.customAnnotation, true);
             putNestedIfNotEmpty(beanParams, "unknownGenotype",commandOptions.unknownGenotype, true);
             putNestedIfNotNull(beanParams, "sampleMetadata",commandOptions.sampleMetadata, true);
             putNestedIfNotNull(beanParams, "sort",commandOptions.sort, true);
             putNestedIfNotEmpty(beanParams, "outdir",commandOptions.outdir, true);
             putNestedIfNotEmpty(beanParams, "outputFileName",commandOptions.outputFileName, true);
             putNestedIfNotEmpty(beanParams, "outputFileFormat",commandOptions.outputFileFormat, true);
             putNestedIfNotEmpty(beanParams, "variantsFile",commandOptions.variantsFile, true);
             putNestedIfNotEmpty(beanParams, "include",commandOptions.bodyInclude, true);
             putNestedIfNotEmpty(beanParams, "exclude",commandOptions.bodyExclude, true);
             putNestedIfNotNull(beanParams, "limit",commandOptions.limit, true);
             putNestedIfNotNull(beanParams, "skip",commandOptions.skip, true);
             putNestedIfNotNull(beanParams, "summary",commandOptions.summary, true);
 
            variantExportParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), VariantExportParams.class);
        }
        return openCGAClient.getVariantClient().runExport(variantExportParams, queryParams);
    }

    private RestResponse<ObjectMap> genotypesFamily() throws Exception {

        logger.debug("Executing genotypesFamily in Analysis - Variant command line");

        AnalysisVariantCommandOptions.GenotypesFamilyCommandOptions commandOptions = analysisVariantCommandOptions.genotypesFamilyCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("clinicalAnalysis", commandOptions.clinicalAnalysis);
        queryParams.putIfNotNull("penetrance", commandOptions.penetrance);
        queryParams.putIfNotEmpty("disorder", commandOptions.disorder);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().genotypesFamily(commandOptions.modeOfInheritance, queryParams);
    }

    private RestResponse<Job> runFamilyQc() throws Exception {

        logger.debug("Executing runFamilyQc in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunFamilyQcCommandOptions commandOptions = analysisVariantCommandOptions.runFamilyQcCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        FamilyQcAnalysisParams familyQcAnalysisParams= null;
        if (commandOptions.jsonDataModel) {
            familyQcAnalysisParams = new FamilyQcAnalysisParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(familyQcAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            familyQcAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), FamilyQcAnalysisParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "family",commandOptions.family, true);
             putNestedIfNotEmpty(beanParams, "relatednessMethod",commandOptions.relatednessMethod, true);
             putNestedIfNotEmpty(beanParams, "relatednessMaf",commandOptions.relatednessMaf, true);
             putNestedIfNotEmpty(beanParams, "outdir",commandOptions.outdir, true);
 
            familyQcAnalysisParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), FamilyQcAnalysisParams.class);
        }
        return openCGAClient.getVariantClient().runFamilyQc(familyQcAnalysisParams, queryParams);
    }

    private RestResponse<Job> deleteFile() throws Exception {

        logger.debug("Executing deleteFile in Analysis - Variant command line");

        AnalysisVariantCommandOptions.DeleteFileCommandOptions commandOptions = analysisVariantCommandOptions.deleteFileCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotNull("resume", commandOptions.resume);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().deleteFile(queryParams);
    }

    private RestResponse<Job> runGatk() throws Exception {

        logger.debug("Executing runGatk in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunGatkCommandOptions commandOptions = analysisVariantCommandOptions.runGatkCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        GatkWrapperParams gatkWrapperParams= null;
        if (commandOptions.jsonDataModel) {
            gatkWrapperParams = new GatkWrapperParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(gatkWrapperParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            gatkWrapperParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), GatkWrapperParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "command",commandOptions.command, true);
             putNestedIfNotEmpty(beanParams, "outdir",commandOptions.outdir, true);
             putNestedIfNotNull(beanParams, "gatkParams",commandOptions.gatkParams, true);
 
            gatkWrapperParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), GatkWrapperParams.class);
        }
        return openCGAClient.getVariantClient().runGatk(gatkWrapperParams, queryParams);
    }

    private RestResponse<Job> runGenomePlot() throws Exception {

        logger.debug("Executing runGenomePlot in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunGenomePlotCommandOptions commandOptions = analysisVariantCommandOptions.runGenomePlotCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        GenomePlotAnalysisParams genomePlotAnalysisParams= null;
        if (commandOptions.jsonDataModel) {
            genomePlotAnalysisParams = new GenomePlotAnalysisParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(genomePlotAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            genomePlotAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), GenomePlotAnalysisParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "sample",commandOptions.sample, true);
             putNestedIfNotEmpty(beanParams, "id",commandOptions.id, true);
             putNestedIfNotEmpty(beanParams, "description",commandOptions.description, true);
             putNestedIfNotEmpty(beanParams, "configFile",commandOptions.configFile, true);
             putNestedIfNotEmpty(beanParams, "outdir",commandOptions.outdir, true);
 
            genomePlotAnalysisParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), GenomePlotAnalysisParams.class);
        }
        return openCGAClient.getVariantClient().runGenomePlot(genomePlotAnalysisParams, queryParams);
    }

    private RestResponse<Job> runGwas() throws Exception {

        logger.debug("Executing runGwas in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunGwasCommandOptions commandOptions = analysisVariantCommandOptions.runGwasCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        GwasAnalysisParams gwasAnalysisParams= null;
        if (commandOptions.jsonDataModel) {
            gwasAnalysisParams = new GwasAnalysisParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(gwasAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            gwasAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), GwasAnalysisParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "phenotype",commandOptions.phenotype, true);
             putNestedIfNotNull(beanParams, "index",commandOptions.index, true);
             putNestedIfNotEmpty(beanParams, "indexScoreId",commandOptions.indexScoreId, true);
             putNestedIfNotNull(beanParams, "method",commandOptions.method, true);
             putNestedIfNotNull(beanParams, "fisherMode",commandOptions.fisherMode, true);
             putNestedIfNotEmpty(beanParams, "caseCohort",commandOptions.caseCohort, true);
             putNestedIfNotEmpty(beanParams, "caseCohortSamplesAnnotation",commandOptions.caseCohortSamplesAnnotation, true);
             putNestedIfNotNull(beanParams, "caseCohortSamples",commandOptions.caseCohortSamples, true);
             putNestedIfNotEmpty(beanParams, "controlCohort",commandOptions.controlCohort, true);
             putNestedIfNotEmpty(beanParams, "controlCohortSamplesAnnotation",commandOptions.controlCohortSamplesAnnotation, true);
             putNestedIfNotNull(beanParams, "controlCohortSamples",commandOptions.controlCohortSamples, true);
             putNestedIfNotEmpty(beanParams, "outdir",commandOptions.outdir, true);
 
            gwasAnalysisParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), GwasAnalysisParams.class);
        }
        return openCGAClient.getVariantClient().runGwas(gwasAnalysisParams, queryParams);
    }

    private RestResponse<Job> runHrDetect() throws Exception {

        logger.debug("Executing runHrDetect in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunHrDetectCommandOptions commandOptions = analysisVariantCommandOptions.runHrDetectCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        HRDetectAnalysisParams hRDetectAnalysisParams= null;
        if (commandOptions.jsonDataModel) {
            hRDetectAnalysisParams = new HRDetectAnalysisParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(hRDetectAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            hRDetectAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), HRDetectAnalysisParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "id",commandOptions.id, true);
             putNestedIfNotEmpty(beanParams, "description",commandOptions.description, true);
             putNestedIfNotEmpty(beanParams, "sampleId",commandOptions.sampleId, true);
             putNestedIfNotEmpty(beanParams, "snvFittingId",commandOptions.snvFittingId, true);
             putNestedIfNotEmpty(beanParams, "svFittingId",commandOptions.svFittingId, true);
             putNestedIfNotEmpty(beanParams, "cnvQuery",commandOptions.cnvQuery, true);
             putNestedIfNotEmpty(beanParams, "indelQuery",commandOptions.indelQuery, true);
             putNestedIfNotEmpty(beanParams, "snv3CustomName",commandOptions.snv3CustomName, true);
             putNestedIfNotEmpty(beanParams, "snv8CustomName",commandOptions.snv8CustomName, true);
             putNestedIfNotEmpty(beanParams, "sv3CustomName",commandOptions.sv3CustomName, true);
             putNestedIfNotEmpty(beanParams, "sv8CustomName",commandOptions.sv8CustomName, true);
             putNestedIfNotNull(beanParams, "bootstrap",commandOptions.bootstrap, true);
             putNestedIfNotEmpty(beanParams, "outdir",commandOptions.outdir, true);
 
            hRDetectAnalysisParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), HRDetectAnalysisParams.class);
        }
        return openCGAClient.getVariantClient().runHrDetect(hRDetectAnalysisParams, queryParams);
    }

    private RestResponse<Job> runIndex() throws Exception {

        logger.debug("Executing runIndex in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunIndexCommandOptions commandOptions = analysisVariantCommandOptions.runIndexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantIndexParams variantIndexParams= null;
        if (commandOptions.jsonDataModel) {
            variantIndexParams = new VariantIndexParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantIndexParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantIndexParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantIndexParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "file",commandOptions.file, true);
             putNestedIfNotNull(beanParams, "resume",commandOptions.resume, true);
             putNestedIfNotEmpty(beanParams, "outdir",commandOptions.outdir, true);
             putNestedIfNotNull(beanParams, "transform",commandOptions.transform, true);
             putNestedIfNotNull(beanParams, "gvcf",commandOptions.gvcf, true);
             putNestedIfNotNull(beanParams, "normalizationSkip",commandOptions.normalizationSkip, true);
             putNestedIfNotEmpty(beanParams, "referenceGenome",commandOptions.referenceGenome, true);
             putNestedIfNotEmpty(beanParams, "failOnMalformedLines",commandOptions.failOnMalformedLines, true);
             putNestedIfNotNull(beanParams, "family",commandOptions.family, true);
             putNestedIfNotNull(beanParams, "somatic",commandOptions.somatic, true);
             putNestedIfNotNull(beanParams, "load",commandOptions.load, true);
             putNestedIfNotEmpty(beanParams, "loadSplitData",commandOptions.loadSplitData, true);
             putNestedIfNotNull(beanParams, "loadMultiFileData",commandOptions.loadMultiFileData, true);
             putNestedIfNotEmpty(beanParams, "loadSampleIndex",commandOptions.loadSampleIndex, true);
             putNestedIfNotEmpty(beanParams, "loadArchive",commandOptions.loadArchive, true);
             putNestedIfNotEmpty(beanParams, "loadHomRef",commandOptions.loadHomRef, true);
             putNestedIfNotEmpty(beanParams, "postLoadCheck",commandOptions.postLoadCheck, true);
             putNestedIfNotEmpty(beanParams, "includeGenotypes",commandOptions.includeGenotypes, true);
             putNestedIfNotEmpty(beanParams, "includeSampleData",commandOptions.includeSampleData, true);
             putNestedIfNotEmpty(beanParams, "merge",commandOptions.merge, true);
             putNestedIfNotEmpty(beanParams, "deduplicationPolicy",commandOptions.deduplicationPolicy, true);
             putNestedIfNotNull(beanParams, "calculateStats",commandOptions.calculateStats, true);
             putNestedIfNotNull(beanParams, "aggregated",commandOptions.aggregated, true);
             putNestedIfNotEmpty(beanParams, "aggregationMappingFile",commandOptions.aggregationMappingFile, true);
             putNestedIfNotNull(beanParams, "annotate",commandOptions.annotate, true);
             putNestedIfNotEmpty(beanParams, "annotator",commandOptions.annotator, true);
             putNestedIfNotNull(beanParams, "overwriteAnnotations",commandOptions.overwriteAnnotations, true);
             putNestedIfNotNull(beanParams, "indexSearch",commandOptions.indexSearch, true);
             putNestedIfNotNull(beanParams, "skipIndexedFiles",commandOptions.skipIndexedFiles, true);
 
            variantIndexParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), VariantIndexParams.class);
        }
        return openCGAClient.getVariantClient().runIndex(variantIndexParams, queryParams);
    }

    private RestResponse<Job> runIndividualQc() throws Exception {

        logger.debug("Executing runIndividualQc in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunIndividualQcCommandOptions commandOptions = analysisVariantCommandOptions.runIndividualQcCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        IndividualQcAnalysisParams individualQcAnalysisParams= null;
        if (commandOptions.jsonDataModel) {
            individualQcAnalysisParams = new IndividualQcAnalysisParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(individualQcAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            individualQcAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), IndividualQcAnalysisParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "individual",commandOptions.individual, true);
             putNestedIfNotEmpty(beanParams, "sample",commandOptions.sample, true);
             putNestedIfNotEmpty(beanParams, "inferredSexMethod",commandOptions.inferredSexMethod, true);
             putNestedIfNotEmpty(beanParams, "outdir",commandOptions.outdir, true);
 
            individualQcAnalysisParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), IndividualQcAnalysisParams.class);
        }
        return openCGAClient.getVariantClient().runIndividualQc(individualQcAnalysisParams, queryParams);
    }

    private RestResponse<Job> runInferredSex() throws Exception {

        logger.debug("Executing runInferredSex in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunInferredSexCommandOptions commandOptions = analysisVariantCommandOptions.runInferredSexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        InferredSexAnalysisParams inferredSexAnalysisParams= null;
        if (commandOptions.jsonDataModel) {
            inferredSexAnalysisParams = new InferredSexAnalysisParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(inferredSexAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            inferredSexAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), InferredSexAnalysisParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "individual",commandOptions.individual, true);
             putNestedIfNotEmpty(beanParams, "sample",commandOptions.sample, true);
             putNestedIfNotEmpty(beanParams, "outdir",commandOptions.outdir, true);
 
            inferredSexAnalysisParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), InferredSexAnalysisParams.class);
        }
        return openCGAClient.getVariantClient().runInferredSex(inferredSexAnalysisParams, queryParams);
    }

    private RestResponse<KnockoutByGene> queryKnockoutGene() throws Exception {

        logger.debug("Executing queryKnockoutGene in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QueryKnockoutGeneCommandOptions commandOptions = analysisVariantCommandOptions.queryKnockoutGeneCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("job", commandOptions.job);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().queryKnockoutGene(queryParams);
    }

    private RestResponse<KnockoutByIndividual> queryKnockoutIndividual() throws Exception {

        logger.debug("Executing queryKnockoutIndividual in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QueryKnockoutIndividualCommandOptions commandOptions = analysisVariantCommandOptions.queryKnockoutIndividualCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("job", commandOptions.job);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().queryKnockoutIndividual(queryParams);
    }

    private RestResponse<Job> runKnockout() throws Exception {

        logger.debug("Executing runKnockout in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunKnockoutCommandOptions commandOptions = analysisVariantCommandOptions.runKnockoutCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        KnockoutAnalysisParams knockoutAnalysisParams= null;
        if (commandOptions.jsonDataModel) {
            knockoutAnalysisParams = new KnockoutAnalysisParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(knockoutAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            knockoutAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), KnockoutAnalysisParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotNull(beanParams, "sample",commandOptions.sample, true);
             putNestedIfNotNull(beanParams, "gene",commandOptions.gene, true);
             putNestedIfNotNull(beanParams, "panel",commandOptions.panel, true);
             putNestedIfNotEmpty(beanParams, "biotype",commandOptions.biotype, true);
             putNestedIfNotEmpty(beanParams, "consequenceType",commandOptions.consequenceType, true);
             putNestedIfNotEmpty(beanParams, "filter",commandOptions.filter, true);
             putNestedIfNotEmpty(beanParams, "qual",commandOptions.qual, true);
             putNestedIfNotNull(beanParams, "skipGenesFile",commandOptions.skipGenesFile, true);
             putNestedIfNotEmpty(beanParams, "outdir",commandOptions.outdir, true);
             putNestedIfNotNull(beanParams, "index",commandOptions.index, true);
 
            knockoutAnalysisParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), KnockoutAnalysisParams.class);
        }
        return openCGAClient.getVariantClient().runKnockout(knockoutAnalysisParams, queryParams);
    }

    private RestResponse<Job> runMendelianError() throws Exception {

        logger.debug("Executing runMendelianError in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunMendelianErrorCommandOptions commandOptions = analysisVariantCommandOptions.runMendelianErrorCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        MendelianErrorAnalysisParams mendelianErrorAnalysisParams= null;
        if (commandOptions.jsonDataModel) {
            mendelianErrorAnalysisParams = new MendelianErrorAnalysisParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(mendelianErrorAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            mendelianErrorAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), MendelianErrorAnalysisParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "family",commandOptions.family, true);
             putNestedIfNotEmpty(beanParams, "individual",commandOptions.individual, true);
             putNestedIfNotEmpty(beanParams, "sample",commandOptions.sample, true);
             putNestedIfNotEmpty(beanParams, "outdir",commandOptions.outdir, true);
 
            mendelianErrorAnalysisParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), MendelianErrorAnalysisParams.class);
        }
        return openCGAClient.getVariantClient().runMendelianError(mendelianErrorAnalysisParams, queryParams);
    }

    private RestResponse<VariantMetadata> metadata() throws Exception {

        logger.debug("Executing metadata in Analysis - Variant command line");

        AnalysisVariantCommandOptions.MetadataCommandOptions commandOptions = analysisVariantCommandOptions.metadataCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("includeStudy", commandOptions.includeStudy);
        queryParams.putIfNotEmpty("includeFile", commandOptions.includeFile);
        queryParams.putIfNotEmpty("includeSample", commandOptions.includeSample);
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().metadata(queryParams);
    }

    private RestResponse<Signature> queryMutationalSignature() throws Exception {

        logger.debug("Executing queryMutationalSignature in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QueryMutationalSignatureCommandOptions commandOptions = analysisVariantCommandOptions.queryMutationalSignatureCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("fileData", commandOptions.fileData);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("qual", commandOptions.qual);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("gene", commandOptions.gene);
        queryParams.putIfNotEmpty("panel", commandOptions.panel);
        queryParams.putIfNotEmpty("panelModeOfInheritance", commandOptions.panelModeOfInheritance);
        queryParams.putIfNotEmpty("panelConfidence", commandOptions.panelConfidence);
        queryParams.putIfNotEmpty("panelFeatureType", commandOptions.panelFeatureType);
        queryParams.putIfNotEmpty("panelRoleInCancer", commandOptions.panelRoleInCancer);
        queryParams.putIfNotNull("panelIntersection", commandOptions.panelIntersection);
        queryParams.putIfNotEmpty("msId", commandOptions.msId);
        queryParams.putIfNotEmpty("msDescription", commandOptions.msDescription);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().queryMutationalSignature(queryParams);
    }

    private RestResponse<Job> runMutationalSignature() throws Exception {

        logger.debug("Executing runMutationalSignature in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunMutationalSignatureCommandOptions commandOptions = analysisVariantCommandOptions.runMutationalSignatureCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        MutationalSignatureAnalysisParams mutationalSignatureAnalysisParams= null;
        if (commandOptions.jsonDataModel) {
            mutationalSignatureAnalysisParams = new MutationalSignatureAnalysisParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(mutationalSignatureAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            mutationalSignatureAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), MutationalSignatureAnalysisParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "id",commandOptions.id, true);
             putNestedIfNotEmpty(beanParams, "description",commandOptions.description, true);
             putNestedIfNotEmpty(beanParams, "sample",commandOptions.sample, true);
             putNestedIfNotEmpty(beanParams, "query",commandOptions.query, true);
             putNestedIfNotEmpty(beanParams, "fitId",commandOptions.fitId, true);
             putNestedIfNotEmpty(beanParams, "fitMethod",commandOptions.fitMethod, true);
             putNestedIfNotNull(beanParams, "fitNBoot",commandOptions.fitNBoot, true);
             putNestedIfNotEmpty(beanParams, "fitSigVersion",commandOptions.fitSigVersion, true);
             putNestedIfNotEmpty(beanParams, "fitOrgan",commandOptions.fitOrgan, true);
             putNestedIfNotNull(beanParams, "fitThresholdPerc",commandOptions.fitThresholdPerc, true);
             putNestedIfNotNull(beanParams, "fitThresholdPval",commandOptions.fitThresholdPval, true);
             putNestedIfNotNull(beanParams, "fitMaxRareSigs",commandOptions.fitMaxRareSigs, true);
             putNestedIfNotEmpty(beanParams, "fitSignaturesFile",commandOptions.fitSignaturesFile, true);
             putNestedIfNotEmpty(beanParams, "fitRareSignaturesFile",commandOptions.fitRareSignaturesFile, true);
             putNestedIfNotEmpty(beanParams, "skip",commandOptions.skip, true);
             putNestedIfNotEmpty(beanParams, "outdir",commandOptions.outdir, true);
 
            mutationalSignatureAnalysisParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), MutationalSignatureAnalysisParams.class);
        }
        return openCGAClient.getVariantClient().runMutationalSignature(mutationalSignatureAnalysisParams, queryParams);
    }

    private RestResponse<Job> runPlink() throws Exception {

        logger.debug("Executing runPlink in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunPlinkCommandOptions commandOptions = analysisVariantCommandOptions.runPlinkCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        PlinkWrapperParams plinkWrapperParams= null;
        if (commandOptions.jsonDataModel) {
            plinkWrapperParams = new PlinkWrapperParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(plinkWrapperParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            plinkWrapperParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), PlinkWrapperParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "outdir",commandOptions.outdir, true);
             putNestedIfNotNull(beanParams, "plinkParams",commandOptions.plinkParams, true);
 
            plinkWrapperParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), PlinkWrapperParams.class);
        }
        return openCGAClient.getVariantClient().runPlink(plinkWrapperParams, queryParams);
    }

    private RestResponse<Variant> query() throws Exception {

        logger.debug("Executing query in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QueryCommandOptions commandOptions = analysisVariantCommandOptions.queryCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotNull("sort", commandOptions.sort);
        queryParams.putIfNotNull("summary", commandOptions.summary);
        queryParams.putIfNotNull("approximateCount", commandOptions.approximateCount);
        queryParams.putIfNotNull("approximateCountSamplingSize", commandOptions.approximateCountSamplingSize);
        queryParams.putIfNotEmpty("savedFilter", commandOptions.savedFilter);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("reference", commandOptions.reference);
        queryParams.putIfNotEmpty("alternate", commandOptions.alternate);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("qual", commandOptions.qual);
        queryParams.putIfNotEmpty("fileData", commandOptions.fileData);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("genotype", commandOptions.genotype);
        queryParams.putIfNotEmpty("sampleData", commandOptions.sampleData);
        queryParams.putIfNotEmpty("sampleAnnotation", commandOptions.sampleAnnotation);
        queryParams.putIfNotNull("sampleMetadata", commandOptions.sampleMetadata);
        queryParams.putIfNotEmpty("unknownGenotype", commandOptions.unknownGenotype);
        queryParams.putIfNotNull("sampleLimit", commandOptions.sampleLimit);
        queryParams.putIfNotNull("sampleSkip", commandOptions.sampleSkip);
        queryParams.putIfNotEmpty("cohort", commandOptions.cohort);
        queryParams.putIfNotEmpty("cohortStatsRef", commandOptions.cohortStatsRef);
        queryParams.putIfNotEmpty("cohortStatsAlt", commandOptions.cohortStatsAlt);
        queryParams.putIfNotEmpty("cohortStatsMaf", commandOptions.cohortStatsMaf);
        queryParams.putIfNotEmpty("cohortStatsMgf", commandOptions.cohortStatsMgf);
        queryParams.putIfNotEmpty("cohortStatsPass", commandOptions.cohortStatsPass);
        queryParams.putIfNotEmpty("missingAlleles", commandOptions.missingAlleles);
        queryParams.putIfNotEmpty("missingGenotypes", commandOptions.missingGenotypes);
        queryParams.putIfNotEmpty("score", commandOptions.score);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("familyDisorder", commandOptions.familyDisorder);
        queryParams.putIfNotEmpty("familySegregation", commandOptions.familySegregation);
        queryParams.putIfNotEmpty("familyMembers", commandOptions.familyMembers);
        queryParams.putIfNotEmpty("familyProband", commandOptions.familyProband);
        queryParams.putIfNotEmpty("includeStudy", commandOptions.includeStudy);
        queryParams.putIfNotEmpty("includeFile", commandOptions.includeFile);
        queryParams.putIfNotEmpty("includeSample", commandOptions.includeSample);
        queryParams.putIfNotEmpty("includeSampleData", commandOptions.includeSampleData);
        queryParams.putIfNotEmpty("includeGenotype", commandOptions.includeGenotype);
        queryParams.putIfNotEmpty("includeSampleId", commandOptions.includeSampleId);
        queryParams.putIfNotNull("annotationExists", commandOptions.annotationExists);
        queryParams.putIfNotEmpty("gene", commandOptions.gene);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("xref", commandOptions.xref);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("proteinSubstitution", commandOptions.proteinSubstitution);
        queryParams.putIfNotEmpty("conservation", commandOptions.conservation);
        queryParams.putIfNotEmpty("populationFrequencyAlt", commandOptions.populationFrequencyAlt);
        queryParams.putIfNotEmpty("populationFrequencyRef", commandOptions.populationFrequencyRef);
        queryParams.putIfNotEmpty("populationFrequencyMaf", commandOptions.populationFrequencyMaf);
        queryParams.putIfNotEmpty("transcriptFlag", commandOptions.transcriptFlag);
        queryParams.putIfNotEmpty("geneTraitId", commandOptions.geneTraitId);
        queryParams.putIfNotEmpty("go", commandOptions.go);
        queryParams.putIfNotEmpty("expression", commandOptions.expression);
        queryParams.putIfNotEmpty("proteinKeyword", commandOptions.proteinKeyword);
        queryParams.putIfNotEmpty("drug", commandOptions.drug);
        queryParams.putIfNotEmpty("functionalScore", commandOptions.functionalScore);
        queryParams.putIfNotEmpty("clinical", commandOptions.clinical);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotNull("clinicalConfirmedStatus", commandOptions.clinicalConfirmedStatus);
        queryParams.putIfNotEmpty("customAnnotation", commandOptions.customAnnotation);
        queryParams.putIfNotEmpty("panel", commandOptions.panel);
        queryParams.putIfNotEmpty("panelModeOfInheritance", commandOptions.panelModeOfInheritance);
        queryParams.putIfNotEmpty("panelConfidence", commandOptions.panelConfidence);
        queryParams.putIfNotEmpty("panelRoleInCancer", commandOptions.panelRoleInCancer);
        queryParams.putIfNotEmpty("panelFeatureType", commandOptions.panelFeatureType);
        queryParams.putIfNotNull("panelIntersection", commandOptions.panelIntersection);
        queryParams.putIfNotEmpty("trait", commandOptions.trait);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().query(queryParams);
    }

    private RestResponse<Job> runRelatedness() throws Exception {

        logger.debug("Executing runRelatedness in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunRelatednessCommandOptions commandOptions = analysisVariantCommandOptions.runRelatednessCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        RelatednessAnalysisParams relatednessAnalysisParams= null;
        if (commandOptions.jsonDataModel) {
            relatednessAnalysisParams = new RelatednessAnalysisParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(relatednessAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            relatednessAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), RelatednessAnalysisParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotNull(beanParams, "individuals",commandOptions.individuals, true);
             putNestedIfNotNull(beanParams, "samples",commandOptions.samples, true);
             putNestedIfNotEmpty(beanParams, "minorAlleleFreq",commandOptions.minorAlleleFreq, true);
             putNestedIfNotEmpty(beanParams, "method",commandOptions.method, true);
             putNestedIfNotEmpty(beanParams, "outdir",commandOptions.outdir, true);
 
            relatednessAnalysisParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), RelatednessAnalysisParams.class);
        }
        return openCGAClient.getVariantClient().runRelatedness(relatednessAnalysisParams, queryParams);
    }

    private RestResponse<Job> runRvtests() throws Exception {

        logger.debug("Executing runRvtests in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunRvtestsCommandOptions commandOptions = analysisVariantCommandOptions.runRvtestsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        RvtestsWrapperParams rvtestsWrapperParams= null;
        if (commandOptions.jsonDataModel) {
            rvtestsWrapperParams = new RvtestsWrapperParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(rvtestsWrapperParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            rvtestsWrapperParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), RvtestsWrapperParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "command",commandOptions.command, true);
             putNestedIfNotEmpty(beanParams, "outdir",commandOptions.outdir, true);
             putNestedIfNotNull(beanParams, "rvtestsParams",commandOptions.rvtestsParams, true);
 
            rvtestsWrapperParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), RvtestsWrapperParams.class);
        }
        return openCGAClient.getVariantClient().runRvtests(rvtestsWrapperParams, queryParams);
    }

    private RestResponse<FacetField> aggregationStatsSample() throws Exception {

        logger.debug("Executing aggregationStatsSample in Analysis - Variant command line");

        AnalysisVariantCommandOptions.AggregationStatsSampleCommandOptions commandOptions = analysisVariantCommandOptions.aggregationStatsSampleCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("savedFilter", commandOptions.savedFilter);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("genotype", commandOptions.genotype);
        queryParams.putIfNotEmpty("sampleAnnotation", commandOptions.sampleAnnotation);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("familyDisorder", commandOptions.familyDisorder);
        queryParams.putIfNotEmpty("familySegregation", commandOptions.familySegregation);
        queryParams.putIfNotEmpty("familyMembers", commandOptions.familyMembers);
        queryParams.putIfNotEmpty("familyProband", commandOptions.familyProband);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("populationFrequencyAlt", commandOptions.populationFrequencyAlt);
        queryParams.putIfNotEmpty("clinical", commandOptions.clinical);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotNull("clinicalConfirmedStatus", commandOptions.clinicalConfirmedStatus);
        queryParams.putIfNotEmpty("field", commandOptions.field);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().aggregationStatsSample(queryParams);
    }

    private RestResponse<Job> runSampleEligibility() throws Exception {

        logger.debug("Executing runSampleEligibility in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunSampleEligibilityCommandOptions commandOptions = analysisVariantCommandOptions.runSampleEligibilityCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        SampleEligibilityAnalysisParams sampleEligibilityAnalysisParams= null;
        if (commandOptions.jsonDataModel) {
            sampleEligibilityAnalysisParams = new SampleEligibilityAnalysisParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(sampleEligibilityAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            sampleEligibilityAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), SampleEligibilityAnalysisParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "query",commandOptions.query, true);
             putNestedIfNotNull(beanParams, "index",commandOptions.index, true);
             putNestedIfNotEmpty(beanParams, "cohortId",commandOptions.cohortId, true);
 
            sampleEligibilityAnalysisParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), SampleEligibilityAnalysisParams.class);
        }
        return openCGAClient.getVariantClient().runSampleEligibility(sampleEligibilityAnalysisParams, queryParams);
    }

    private RestResponse<Job> runSampleQc() throws Exception {

        logger.debug("Executing runSampleQc in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunSampleQcCommandOptions commandOptions = analysisVariantCommandOptions.runSampleQcCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        SampleQcAnalysisParams sampleQcAnalysisParams= null;
        if (commandOptions.jsonDataModel) {
            sampleQcAnalysisParams = new SampleQcAnalysisParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(sampleQcAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            sampleQcAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), SampleQcAnalysisParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "sample",commandOptions.sample, true);
             putNestedIfNotEmpty(beanParams, "vsId",commandOptions.vsId, true);
             putNestedIfNotEmpty(beanParams, "vsDescription",commandOptions.vsDescription, true);
             putNestedIfNotEmpty(beanParams, "vsQuery.id",commandOptions.vsQueryId, true);
             putNestedIfNotEmpty(beanParams, "vsQuery.region",commandOptions.vsQueryRegion, true);
             putNestedIfNotEmpty(beanParams, "vsQuery.gene",commandOptions.vsQueryGene, true);
             putNestedIfNotEmpty(beanParams, "vsQuery.type",commandOptions.vsQueryType, true);
             putNestedIfNotEmpty(beanParams, "vsQuery.panel",commandOptions.vsQueryPanel, true);
             putNestedIfNotEmpty(beanParams, "vsQuery.panelModeOfInheritance",commandOptions.vsQueryPanelModeOfInheritance, true);
             putNestedIfNotEmpty(beanParams, "vsQuery.panelConfidence",commandOptions.vsQueryPanelConfidence, true);
             putNestedIfNotEmpty(beanParams, "vsQuery.panelRoleInCancer",commandOptions.vsQueryPanelRoleInCancer, true);
             putNestedIfNotNull(beanParams, "vsQuery.panelIntersection",commandOptions.vsQueryPanelIntersection, true);
             putNestedIfNotEmpty(beanParams, "vsQuery.cohortStatsRef",commandOptions.vsQueryCohortStatsRef, true);
             putNestedIfNotEmpty(beanParams, "vsQuery.cohortStatsAlt",commandOptions.vsQueryCohortStatsAlt, true);
             putNestedIfNotEmpty(beanParams, "vsQuery.cohortStatsMaf",commandOptions.vsQueryCohortStatsMaf, true);
             putNestedIfNotEmpty(beanParams, "vsQuery.ct",commandOptions.vsQueryCt, true);
             putNestedIfNotEmpty(beanParams, "vsQuery.xref",commandOptions.vsQueryXref, true);
             putNestedIfNotEmpty(beanParams, "vsQuery.biotype",commandOptions.vsQueryBiotype, true);
             putNestedIfNotEmpty(beanParams, "vsQuery.proteinSubstitution",commandOptions.vsQueryProteinSubstitution, true);
             putNestedIfNotEmpty(beanParams, "vsQuery.conservation",commandOptions.vsQueryConservation, true);
             putNestedIfNotEmpty(beanParams, "vsQuery.populationFrequencyMaf",commandOptions.vsQueryPopulationFrequencyMaf, true);
             putNestedIfNotEmpty(beanParams, "vsQuery.populationFrequencyAlt",commandOptions.vsQueryPopulationFrequencyAlt, true);
             putNestedIfNotEmpty(beanParams, "vsQuery.populationFrequencyRef",commandOptions.vsQueryPopulationFrequencyRef, true);
             putNestedIfNotEmpty(beanParams, "vsQuery.transcriptFlag",commandOptions.vsQueryTranscriptFlag, true);
             putNestedIfNotEmpty(beanParams, "vsQuery.functionalScore",commandOptions.vsQueryFunctionalScore, true);
             putNestedIfNotEmpty(beanParams, "vsQuery.clinical",commandOptions.vsQueryClinical, true);
             putNestedIfNotEmpty(beanParams, "vsQuery.clinicalSignificance",commandOptions.vsQueryClinicalSignificance, true);
             putNestedIfNotNull(beanParams, "vsQuery.clinicalConfirmedStatus",commandOptions.vsQueryClinicalConfirmedStatus, true);
             putNestedIfNotEmpty(beanParams, "msId",commandOptions.msId, true);
             putNestedIfNotEmpty(beanParams, "msDescription",commandOptions.msDescription, true);
             putNestedIfNotEmpty(beanParams, "msQuery",commandOptions.msQuery, true);
             putNestedIfNotEmpty(beanParams, "msFitId",commandOptions.msFitId, true);
             putNestedIfNotEmpty(beanParams, "msFitMethod",commandOptions.msFitMethod, true);
             putNestedIfNotNull(beanParams, "msFitNBoot",commandOptions.msFitNBoot, true);
             putNestedIfNotEmpty(beanParams, "msFitSigVersion",commandOptions.msFitSigVersion, true);
             putNestedIfNotEmpty(beanParams, "msFitOrgan",commandOptions.msFitOrgan, true);
             putNestedIfNotNull(beanParams, "msFitThresholdPerc",commandOptions.msFitThresholdPerc, true);
             putNestedIfNotNull(beanParams, "msFitThresholdPval",commandOptions.msFitThresholdPval, true);
             putNestedIfNotNull(beanParams, "msFitMaxRareSigs",commandOptions.msFitMaxRareSigs, true);
             putNestedIfNotEmpty(beanParams, "msFitSignaturesFile",commandOptions.msFitSignaturesFile, true);
             putNestedIfNotEmpty(beanParams, "msFitRareSignaturesFile",commandOptions.msFitRareSignaturesFile, true);
             putNestedIfNotEmpty(beanParams, "gpId",commandOptions.gpId, true);
             putNestedIfNotEmpty(beanParams, "gpDescription",commandOptions.gpDescription, true);
             putNestedIfNotEmpty(beanParams, "gpConfigFile",commandOptions.gpConfigFile, true);
             putNestedIfNotEmpty(beanParams, "skip",commandOptions.skip, true);
             putNestedIfNotEmpty(beanParams, "outdir",commandOptions.outdir, true);
 
            sampleQcAnalysisParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), SampleQcAnalysisParams.class);
        }
        return openCGAClient.getVariantClient().runSampleQc(sampleQcAnalysisParams, queryParams);
    }

    private RestResponse<Variant> querySample() throws Exception {

        logger.debug("Executing querySample in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QuerySampleCommandOptions commandOptions = analysisVariantCommandOptions.querySampleCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotEmpty("variant", commandOptions.variant);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("genotype", commandOptions.genotype);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().querySample(queryParams);
    }

    private RestResponse<Job> runSample() throws Exception {

        logger.debug("Executing runSample in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunSampleCommandOptions commandOptions = analysisVariantCommandOptions.runSampleCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        SampleVariantFilterParams sampleVariantFilterParams= null;
        if (commandOptions.jsonDataModel) {
            sampleVariantFilterParams = new SampleVariantFilterParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(sampleVariantFilterParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            sampleVariantFilterParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), SampleVariantFilterParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "id",commandOptions.id, true);
             putNestedIfNotEmpty(beanParams, "region",commandOptions.region, true);
             putNestedIfNotEmpty(beanParams, "gene",commandOptions.gene, true);
             putNestedIfNotEmpty(beanParams, "type",commandOptions.type, true);
             putNestedIfNotEmpty(beanParams, "panel",commandOptions.panel, true);
             putNestedIfNotEmpty(beanParams, "panelModeOfInheritance",commandOptions.panelModeOfInheritance, true);
             putNestedIfNotEmpty(beanParams, "panelConfidence",commandOptions.panelConfidence, true);
             putNestedIfNotEmpty(beanParams, "panelRoleInCancer",commandOptions.panelRoleInCancer, true);
             putNestedIfNotNull(beanParams, "panelIntersection",commandOptions.panelIntersection, true);
             putNestedIfNotEmpty(beanParams, "cohortStatsRef",commandOptions.cohortStatsRef, true);
             putNestedIfNotEmpty(beanParams, "cohortStatsAlt",commandOptions.cohortStatsAlt, true);
             putNestedIfNotEmpty(beanParams, "cohortStatsMaf",commandOptions.cohortStatsMaf, true);
             putNestedIfNotEmpty(beanParams, "ct",commandOptions.ct, true);
             putNestedIfNotEmpty(beanParams, "xref",commandOptions.xref, true);
             putNestedIfNotEmpty(beanParams, "biotype",commandOptions.biotype, true);
             putNestedIfNotEmpty(beanParams, "proteinSubstitution",commandOptions.proteinSubstitution, true);
             putNestedIfNotEmpty(beanParams, "conservation",commandOptions.conservation, true);
             putNestedIfNotEmpty(beanParams, "populationFrequencyMaf",commandOptions.populationFrequencyMaf, true);
             putNestedIfNotEmpty(beanParams, "populationFrequencyAlt",commandOptions.populationFrequencyAlt, true);
             putNestedIfNotEmpty(beanParams, "populationFrequencyRef",commandOptions.populationFrequencyRef, true);
             putNestedIfNotEmpty(beanParams, "transcriptFlag",commandOptions.transcriptFlag, true);
             putNestedIfNotEmpty(beanParams, "functionalScore",commandOptions.functionalScore, true);
             putNestedIfNotEmpty(beanParams, "clinical",commandOptions.clinical, true);
             putNestedIfNotEmpty(beanParams, "clinicalSignificance",commandOptions.clinicalSignificance, true);
             putNestedIfNotNull(beanParams, "clinicalConfirmedStatus",commandOptions.clinicalConfirmedStatus, true);
             putNestedIfNotNull(beanParams, "genotypes",commandOptions.genotypes, true);
             putNestedIfNotNull(beanParams, "sample",commandOptions.sample, true);
             putNestedIfNotNull(beanParams, "samplesInAllVariants",commandOptions.samplesInAllVariants, true);
             putNestedIfNotNull(beanParams, "maxVariants",commandOptions.maxVariants, true);
 
            sampleVariantFilterParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), SampleVariantFilterParams.class);
        }
        return openCGAClient.getVariantClient().runSample(sampleVariantFilterParams, queryParams);
    }

    private RestResponse<SampleVariantStats> querySampleStats() throws Exception {

        logger.debug("Executing querySampleStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QuerySampleStatsCommandOptions commandOptions = analysisVariantCommandOptions.querySampleStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("sampleData", commandOptions.sampleData);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("transcriptFlag", commandOptions.transcriptFlag);
        queryParams.putIfNotEmpty("populationFrequencyAlt", commandOptions.populationFrequencyAlt);
        queryParams.putIfNotEmpty("clinical", commandOptions.clinical);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotNull("clinicalConfirmedStatus", commandOptions.clinicalConfirmedStatus);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("filterTranscript", commandOptions.filterTranscript);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().querySampleStats(commandOptions.sample, queryParams);
    }

    private RestResponse<Job> runSampleStats() throws Exception {

        logger.debug("Executing runSampleStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunSampleStatsCommandOptions commandOptions = analysisVariantCommandOptions.runSampleStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        SampleVariantStatsAnalysisParams sampleVariantStatsAnalysisParams= null;
        if (commandOptions.jsonDataModel) {
            sampleVariantStatsAnalysisParams = new SampleVariantStatsAnalysisParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(sampleVariantStatsAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            sampleVariantStatsAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), SampleVariantStatsAnalysisParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotNull(beanParams, "sample",commandOptions.sample, true);
             putNestedIfNotNull(beanParams, "individual",commandOptions.individual, true);
             putNestedIfNotEmpty(beanParams, "variantQuery.id",commandOptions.variantQueryId, true);
             putNestedIfNotEmpty(beanParams, "variantQuery.region",commandOptions.variantQueryRegion, true);
             putNestedIfNotEmpty(beanParams, "variantQuery.gene",commandOptions.variantQueryGene, true);
             putNestedIfNotEmpty(beanParams, "variantQuery.type",commandOptions.variantQueryType, true);
             putNestedIfNotEmpty(beanParams, "variantQuery.panel",commandOptions.variantQueryPanel, true);
             putNestedIfNotEmpty(beanParams, "variantQuery.panelModeOfInheritance",commandOptions.variantQueryPanelModeOfInheritance, true);
             putNestedIfNotEmpty(beanParams, "variantQuery.panelConfidence",commandOptions.variantQueryPanelConfidence, true);
             putNestedIfNotEmpty(beanParams, "variantQuery.panelRoleInCancer",commandOptions.variantQueryPanelRoleInCancer, true);
             putNestedIfNotNull(beanParams, "variantQuery.panelIntersection",commandOptions.variantQueryPanelIntersection, true);
             putNestedIfNotEmpty(beanParams, "variantQuery.cohortStatsRef",commandOptions.variantQueryCohortStatsRef, true);
             putNestedIfNotEmpty(beanParams, "variantQuery.cohortStatsAlt",commandOptions.variantQueryCohortStatsAlt, true);
             putNestedIfNotEmpty(beanParams, "variantQuery.cohortStatsMaf",commandOptions.variantQueryCohortStatsMaf, true);
             putNestedIfNotEmpty(beanParams, "variantQuery.ct",commandOptions.variantQueryCt, true);
             putNestedIfNotEmpty(beanParams, "variantQuery.xref",commandOptions.variantQueryXref, true);
             putNestedIfNotEmpty(beanParams, "variantQuery.biotype",commandOptions.variantQueryBiotype, true);
             putNestedIfNotEmpty(beanParams, "variantQuery.proteinSubstitution",commandOptions.variantQueryProteinSubstitution, true);
             putNestedIfNotEmpty(beanParams, "variantQuery.conservation",commandOptions.variantQueryConservation, true);
             putNestedIfNotEmpty(beanParams, "variantQuery.populationFrequencyMaf",commandOptions.variantQueryPopulationFrequencyMaf, true);
             putNestedIfNotEmpty(beanParams, "variantQuery.populationFrequencyAlt",commandOptions.variantQueryPopulationFrequencyAlt, true);
             putNestedIfNotEmpty(beanParams, "variantQuery.populationFrequencyRef",commandOptions.variantQueryPopulationFrequencyRef, true);
             putNestedIfNotEmpty(beanParams, "variantQuery.transcriptFlag",commandOptions.variantQueryTranscriptFlag, true);
             putNestedIfNotEmpty(beanParams, "variantQuery.functionalScore",commandOptions.variantQueryFunctionalScore, true);
             putNestedIfNotEmpty(beanParams, "variantQuery.clinical",commandOptions.variantQueryClinical, true);
             putNestedIfNotEmpty(beanParams, "variantQuery.clinicalSignificance",commandOptions.variantQueryClinicalSignificance, true);
             putNestedIfNotNull(beanParams, "variantQuery.clinicalConfirmedStatus",commandOptions.variantQueryClinicalConfirmedStatus, true);
             putNestedIfNotEmpty(beanParams, "variantQuery.sampleData",commandOptions.variantQuerySampleData, true);
             putNestedIfNotEmpty(beanParams, "variantQuery.fileData",commandOptions.variantQueryFileData, true);
             putNestedIfNotEmpty(beanParams, "outdir",commandOptions.outdir, true);
             putNestedIfNotNull(beanParams, "index",commandOptions.index, true);
             putNestedIfNotNull(beanParams, "indexOverwrite",commandOptions.indexOverwrite, true);
             putNestedIfNotEmpty(beanParams, "indexId",commandOptions.indexId, true);
             putNestedIfNotEmpty(beanParams, "indexDescription",commandOptions.indexDescription, true);
             putNestedIfNotNull(beanParams, "batchSize",commandOptions.batchSize, true);
 
            sampleVariantStatsAnalysisParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), SampleVariantStatsAnalysisParams.class);
        }
        return openCGAClient.getVariantClient().runSampleStats(sampleVariantStatsAnalysisParams, queryParams);
    }

    private RestResponse<Job> runStatsExport() throws Exception {

        logger.debug("Executing runStatsExport in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunStatsExportCommandOptions commandOptions = analysisVariantCommandOptions.runStatsExportCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantStatsExportParams variantStatsExportParams= null;
        if (commandOptions.jsonDataModel) {
            variantStatsExportParams = new VariantStatsExportParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantStatsExportParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantStatsExportParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantStatsExportParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotNull(beanParams, "cohorts",commandOptions.cohorts, true);
             putNestedIfNotEmpty(beanParams, "output",commandOptions.output, true);
             putNestedIfNotEmpty(beanParams, "region",commandOptions.region, true);
             putNestedIfNotEmpty(beanParams, "gene",commandOptions.gene, true);
             putNestedIfNotEmpty(beanParams, "outputFileFormat",commandOptions.outputFileFormat, true);
 
            variantStatsExportParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), VariantStatsExportParams.class);
        }
        return openCGAClient.getVariantClient().runStatsExport(variantStatsExportParams, queryParams);
    }

    private RestResponse<Job> runStats() throws Exception {

        logger.debug("Executing runStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunStatsCommandOptions commandOptions = analysisVariantCommandOptions.runStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantStatsAnalysisParams variantStatsAnalysisParams= null;
        if (commandOptions.jsonDataModel) {
            variantStatsAnalysisParams = new VariantStatsAnalysisParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantStatsAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantStatsAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantStatsAnalysisParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotNull(beanParams, "cohort",commandOptions.cohort, true);
             putNestedIfNotNull(beanParams, "samples",commandOptions.samples, true);
             putNestedIfNotEmpty(beanParams, "region",commandOptions.region, true);
             putNestedIfNotEmpty(beanParams, "gene",commandOptions.gene, true);
             putNestedIfNotEmpty(beanParams, "outdir",commandOptions.outdir, true);
             putNestedIfNotEmpty(beanParams, "outputFileName",commandOptions.outputFileName, true);
             putNestedIfNotNull(beanParams, "aggregated",commandOptions.aggregated, true);
             putNestedIfNotEmpty(beanParams, "aggregationMappingFile",commandOptions.aggregationMappingFile, true);
 
            variantStatsAnalysisParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), VariantStatsAnalysisParams.class);
        }
        return openCGAClient.getVariantClient().runStats(variantStatsAnalysisParams, queryParams);
    }
}