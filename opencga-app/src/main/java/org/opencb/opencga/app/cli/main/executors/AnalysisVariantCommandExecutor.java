package org.opencb.opencga.app.cli.main.executors;

import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.app.cli.main.*;
import org.opencb.opencga.core.response.RestResponse;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.commons.datastore.core.ObjectMap;

import org.opencb.opencga.catalog.exceptions.CatalogAuthenticationException;
import org.opencb.opencga.core.common.JacksonUtils;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.List;
import java.util.HashMap;
import org.opencb.opencga.core.response.QueryType;
import org.opencb.commons.utils.PrintUtils;

import org.opencb.opencga.app.cli.main.options.AnalysisVariantCommandOptions;

import java.util.Map;
import org.opencb.biodata.models.clinical.ClinicalProperty.ModeOfInheritance;
import org.opencb.biodata.models.clinical.ClinicalProperty.Penetrance;
import org.opencb.biodata.models.clinical.qc.Signature;
import org.opencb.biodata.models.variant.Variant;
import org.opencb.biodata.models.variant.avro.VariantAnnotation;
import org.opencb.biodata.models.variant.metadata.Aggregation;
import org.opencb.biodata.models.variant.metadata.SampleVariantStats;
import org.opencb.biodata.models.variant.metadata.VariantMetadata;
import org.opencb.biodata.models.variant.metadata.VariantSetStats;
import org.opencb.commons.datastore.core.FacetField;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.commons.datastore.core.QueryResponse;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByGene;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByIndividual;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.opencga.core.models.operations.variant.VariantStatsExportParams;
import org.opencb.opencga.core.models.variant.AnnotationVariantQueryParams;
import org.opencb.opencga.core.models.variant.CircosAnalysisParams;
import org.opencb.opencga.core.models.variant.CohortVariantStatsAnalysisParams;
import org.opencb.opencga.core.models.variant.FamilyQcAnalysisParams;
import org.opencb.opencga.core.models.variant.GatkWrapperParams;
import org.opencb.opencga.core.models.variant.GenomePlotAnalysisParams;
import org.opencb.opencga.core.models.variant.GwasAnalysisParams;
import org.opencb.opencga.core.models.variant.IndividualQcAnalysisParams;
import org.opencb.opencga.core.models.variant.InferredSexAnalysisParams;
import org.opencb.opencga.core.models.variant.KnockoutAnalysisParams;
import org.opencb.opencga.core.models.variant.MendelianErrorAnalysisParams;
import org.opencb.opencga.core.models.variant.MutationalSignatureAnalysisParams;
import org.opencb.opencga.core.models.variant.PlinkWrapperParams;
import org.opencb.opencga.core.models.variant.RelatednessAnalysisParams;
import org.opencb.opencga.core.models.variant.RvtestsWrapperParams;
import org.opencb.opencga.core.models.variant.SampleEligibilityAnalysisParams;
import org.opencb.opencga.core.models.variant.SampleQcAnalysisParams;
import org.opencb.opencga.core.models.variant.SampleVariantFilterParams;
import org.opencb.opencga.core.models.variant.SampleVariantStatsAnalysisParams;
import org.opencb.opencga.core.models.variant.VariantExportParams;
import org.opencb.opencga.core.models.variant.VariantIndexParams;
import org.opencb.opencga.core.models.variant.VariantStatsAnalysisParams;
import org.opencb.oskar.analysis.variant.gwas.GwasConfiguration;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2022-07-04
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/


/**
 * This class contains methods for the Analysis - Variant command line.
 *    OpenCGA version: 2.4.0-SNAPSHOT
 *    PATH: /{apiVersion}/analysis/variant
 */
public class AnalysisVariantCommandExecutor extends OpencgaCommandExecutor {

    private AnalysisVariantCommandOptions analysisVariantCommandOptions;

    public AnalysisVariantCommandExecutor(AnalysisVariantCommandOptions analysisVariantCommandOptions) throws CatalogAuthenticationException {
        super(analysisVariantCommandOptions.commonCommandOptions);
        this.analysisVariantCommandOptions = analysisVariantCommandOptions;
    }

    @Override
    public void execute() throws Exception {

        logger.debug("Executing Analysis - Variant command line");

        String subCommandString = getParsedSubCommand(analysisVariantCommandOptions.jCommander);

        RestResponse queryResponse = null;

        switch (subCommandString) {
            case "aggregationstats":
                queryResponse = aggregationStats();
                break;
            case "annotation-metadata":
                queryResponse = metadataAnnotation();
                break;
            case "annotation-query":
                queryResponse = queryAnnotation();
                break;
            case "circos-run":
                queryResponse = runCircos();
                break;
            case "cohort-stats-delete":
                queryResponse = deleteCohortStats();
                break;
            case "cohort-stats-info":
                queryResponse = infoCohortStats();
                break;
            case "cohort-stats-run":
                queryResponse = runCohortStats();
                break;
            case "export-run":
                queryResponse = runExport();
                break;
            case "family-genotypes":
                queryResponse = genotypesFamily();
                break;
            case "family-qc-run":
                queryResponse = runFamilyQc();
                break;
            case "file-delete":
                queryResponse = deleteFile();
                break;
            case "gatk-run":
                queryResponse = runGatk();
                break;
            case "genome-plot-run":
                queryResponse = runGenomePlot();
                break;
            case "gwas-run":
                queryResponse = runGwas();
                break;
            case "index-run":
                queryResponse = runIndex();
                break;
            case "individual-qc-run":
                queryResponse = runIndividualQc();
                break;
            case "inferred-sex-run":
                queryResponse = runInferredSex();
                break;
            case "knockout-gene-query":
                queryResponse = queryKnockoutGene();
                break;
            case "knockout-individual-query":
                queryResponse = queryKnockoutIndividual();
                break;
            case "knockout-run":
                queryResponse = runKnockout();
                break;
            case "mendelian-error-run":
                queryResponse = runMendelianError();
                break;
            case "metadata":
                queryResponse = metadata();
                break;
            case "mutational-signature-query":
                queryResponse = queryMutationalSignature();
                break;
            case "mutational-signature-run":
                queryResponse = runMutationalSignature();
                break;
            case "plink-run":
                queryResponse = runPlink();
                break;
            case "query":
                queryResponse = query();
                break;
            case "relatedness-run":
                queryResponse = runRelatedness();
                break;
            case "rvtests-run":
                queryResponse = runRvtests();
                break;
            case "sample-aggregation-stats":
                queryResponse = aggregationStatsSample();
                break;
            case "sample-eligibility-run":
                queryResponse = runSampleEligibility();
                break;
            case "sample-qc-run":
                queryResponse = runSampleQc();
                break;
            case "sample-query":
                queryResponse = querySample();
                break;
            case "sample-run":
                queryResponse = runSample();
                break;
            case "sample-stats-query":
                queryResponse = querySampleStats();
                break;
            case "sample-stats-run":
                queryResponse = runSampleStats();
                break;
            case "stats-export-run":
                queryResponse = runStatsExport();
                break;
            case "stats-run":
                queryResponse = runStats();
                break;
            default:
                logger.error("Subcommand not valid");
                break;
        }

        createOutput(queryResponse);

    }

    private RestResponse<QueryResponse> aggregationStats() throws Exception {

        logger.debug("Executing aggregationStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.AggregationStatsCommandOptions commandOptions = analysisVariantCommandOptions.aggregationStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("savedFilter", commandOptions.savedFilter);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("cohort", commandOptions.cohort);
        queryParams.putIfNotEmpty("cohortStatsRef", commandOptions.cohortStatsRef);
        queryParams.putIfNotEmpty("cohortStatsAlt", commandOptions.cohortStatsAlt);
        queryParams.putIfNotEmpty("cohortStatsMaf", commandOptions.cohortStatsMaf);
        queryParams.putIfNotEmpty("cohortStatsMgf", commandOptions.cohortStatsMgf);
        queryParams.putIfNotEmpty("cohortStatsPass", commandOptions.cohortStatsPass);
        queryParams.putIfNotEmpty("missingAlleles", commandOptions.missingAlleles);
        queryParams.putIfNotEmpty("missingGenotypes", commandOptions.missingGenotypes);
        queryParams.putIfNotEmpty("score", commandOptions.score);
        queryParams.putIfNotNull("annotationExists", commandOptions.annotationExists);
        queryParams.putIfNotEmpty("gene", commandOptions.gene);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("xref", commandOptions.xref);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("proteinSubstitution", commandOptions.proteinSubstitution);
        queryParams.putIfNotEmpty("conservation", commandOptions.conservation);
        queryParams.putIfNotEmpty("populationFrequencyAlt", commandOptions.populationFrequencyAlt);
        queryParams.putIfNotEmpty("populationFrequencyRef", commandOptions.populationFrequencyRef);
        queryParams.putIfNotEmpty("populationFrequencyMaf", commandOptions.populationFrequencyMaf);
        queryParams.putIfNotEmpty("transcriptFlag", commandOptions.transcriptFlag);
        queryParams.putIfNotEmpty("geneTraitId", commandOptions.geneTraitId);
        queryParams.putIfNotEmpty("go", commandOptions.go);
        queryParams.putIfNotEmpty("expression", commandOptions.expression);
        queryParams.putIfNotEmpty("proteinKeyword", commandOptions.proteinKeyword);
        queryParams.putIfNotEmpty("drug", commandOptions.drug);
        queryParams.putIfNotEmpty("functionalScore", commandOptions.functionalScore);
        queryParams.putIfNotEmpty("clinical", commandOptions.clinical);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotNull("clinicalConfirmedStatus", commandOptions.clinicalConfirmedStatus);
        queryParams.putIfNotEmpty("customAnnotation", commandOptions.customAnnotation);
        queryParams.putIfNotEmpty("trait", commandOptions.trait);
        queryParams.putIfNotEmpty("field", commandOptions.field);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().aggregationStats(queryParams);
    }

    private RestResponse<ObjectMap> metadataAnnotation() throws Exception {

        logger.debug("Executing metadataAnnotation in Analysis - Variant command line");

        AnalysisVariantCommandOptions.MetadataAnnotationCommandOptions commandOptions = analysisVariantCommandOptions.metadataAnnotationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("annotationId", commandOptions.annotationId);
        queryParams.putIfNotEmpty("project", commandOptions.project);

        return openCGAClient.getVariantClient().metadataAnnotation(queryParams);
    }

    private RestResponse<VariantAnnotation> queryAnnotation() throws Exception {

        logger.debug("Executing queryAnnotation in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QueryAnnotationCommandOptions commandOptions = analysisVariantCommandOptions.queryAnnotationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotEmpty("annotationId", commandOptions.annotationId);

        return openCGAClient.getVariantClient().queryAnnotation(queryParams);
    }

    private RestResponse<String> runCircos() throws Exception {

        logger.debug("Executing runCircos in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunCircosCommandOptions commandOptions = analysisVariantCommandOptions.runCircosCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        CircosAnalysisParams circosAnalysisParams = new CircosAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<String> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(circosAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            circosAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), CircosAnalysisParams.class);
        } else {
            circosAnalysisParams.setTitle(commandOptions.title);
            circosAnalysisParams.setDensity(commandOptions.density);
            circosAnalysisParams.setQuery(new HashMap<>(commandOptions.query));
            //circosAnalysisParams.setTracks(commandOptions.tracks); // Unsupported param. FIXME 
            circosAnalysisParams.setOutdir(commandOptions.outdir);

        }
        return openCGAClient.getVariantClient().runCircos(circosAnalysisParams, queryParams);
    }

    private RestResponse<SampleVariantStats> deleteCohortStats() throws Exception {

        logger.debug("Executing deleteCohortStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.DeleteCohortStatsCommandOptions commandOptions = analysisVariantCommandOptions.deleteCohortStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("cohort", commandOptions.cohort);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().deleteCohortStats(queryParams);
    }

    private RestResponse<VariantSetStats> infoCohortStats() throws Exception {

        logger.debug("Executing infoCohortStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.InfoCohortStatsCommandOptions commandOptions = analysisVariantCommandOptions.infoCohortStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().infoCohortStats(commandOptions.cohort, queryParams);
    }

    private RestResponse<Job> runCohortStats() throws Exception {

        logger.debug("Executing runCohortStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunCohortStatsCommandOptions commandOptions = analysisVariantCommandOptions.runCohortStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        CohortVariantStatsAnalysisParams cohortVariantStatsAnalysisParams = new CohortVariantStatsAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(cohortVariantStatsAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            cohortVariantStatsAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), CohortVariantStatsAnalysisParams.class);
        } else {
            cohortVariantStatsAnalysisParams.setCohort(commandOptions.cohort);
            cohortVariantStatsAnalysisParams.setSamples(splitWithTrim(commandOptions.samples));
            cohortVariantStatsAnalysisParams.setSampleAnnotation(commandOptions.sampleAnnotation);
            cohortVariantStatsAnalysisParams.setOutdir(commandOptions.outdir);

            if (commandOptions.index != null) {
                cohortVariantStatsAnalysisParams.setIndex(commandOptions.index);
            }
        }
        return openCGAClient.getVariantClient().runCohortStats(cohortVariantStatsAnalysisParams, queryParams);
    }

    private RestResponse<Job> runExport() throws Exception {

        logger.debug("Executing runExport in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunExportCommandOptions commandOptions = analysisVariantCommandOptions.runExportCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantExportParams variantExportParams = new VariantExportParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantExportParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantExportParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantExportParams.class);
        } else {
            variantExportParams.setId(commandOptions.bodyId);
            variantExportParams.setRegion(commandOptions.bodyRegion);
            variantExportParams.setGene(commandOptions.bodyGene);
            variantExportParams.setType(commandOptions.bodyType);
            variantExportParams.setPanel(commandOptions.bodyPanel);
            variantExportParams.setPanelModeOfInheritance(commandOptions.bodyPanelModeOfInheritance);
            variantExportParams.setPanelConfidence(commandOptions.bodyPanelConfidence);
            variantExportParams.setPanelRoleInCancer(commandOptions.bodyPanelRoleInCancer);
            variantExportParams.setCohortStatsRef(commandOptions.bodyCohortStatsRef);
            variantExportParams.setCohortStatsAlt(commandOptions.bodyCohortStatsAlt);
            variantExportParams.setCohortStatsMaf(commandOptions.bodyCohortStatsMaf);
            variantExportParams.setCt(commandOptions.bodyCt);
            variantExportParams.setXref(commandOptions.bodyXref);
            variantExportParams.setBiotype(commandOptions.bodyBiotype);
            variantExportParams.setProteinSubstitution(commandOptions.bodyProteinSubstitution);
            variantExportParams.setConservation(commandOptions.bodyConservation);
            variantExportParams.setPopulationFrequencyMaf(commandOptions.bodyPopulationFrequencyMaf);
            variantExportParams.setPopulationFrequencyAlt(commandOptions.bodyPopulationFrequencyAlt);
            variantExportParams.setPopulationFrequencyRef(commandOptions.bodyPopulationFrequencyRef);
            variantExportParams.setTranscriptFlag(commandOptions.bodyTranscriptFlag);
            variantExportParams.setFunctionalScore(commandOptions.bodyFunctionalScore);
            variantExportParams.setClinical(commandOptions.bodyClinical);
            variantExportParams.setClinicalSignificance(commandOptions.bodyClinicalSignificance);
            variantExportParams.setClinicalConfirmedStatus(commandOptions.bodyClinicalConfirmedStatus);
            variantExportParams.setProject(commandOptions.bodyProject);
            variantExportParams.setStudy(commandOptions.bodyStudy);
            variantExportParams.setSavedFilter(commandOptions.bodySavedFilter);
            variantExportParams.setChromosome(commandOptions.bodyChromosome);
            variantExportParams.setReference(commandOptions.bodyReference);
            variantExportParams.setAlternate(commandOptions.bodyAlternate);
            variantExportParams.setRelease(commandOptions.bodyRelease);
            variantExportParams.setIncludeStudy(commandOptions.bodyIncludeStudy);
            variantExportParams.setIncludeSample(commandOptions.bodyIncludeSample);
            variantExportParams.setIncludeFile(commandOptions.bodyIncludeFile);
            variantExportParams.setIncludeSampleData(commandOptions.bodyIncludeSampleData);
            variantExportParams.setIncludeSampleId(commandOptions.bodyIncludeSampleId);
            variantExportParams.setIncludeGenotype(commandOptions.bodyIncludeGenotype);
            variantExportParams.setFile(commandOptions.bodyFile);
            variantExportParams.setQual(commandOptions.bodyQual);
            variantExportParams.setFilter(commandOptions.bodyFilter);
            variantExportParams.setFileData(commandOptions.bodyFileData);
            variantExportParams.setGenotype(commandOptions.bodyGenotype);
            variantExportParams.setSample(commandOptions.bodySample);
            variantExportParams.setSampleLimit(commandOptions.bodySampleLimit);
            variantExportParams.setSampleSkip(commandOptions.bodySampleSkip);
            variantExportParams.setSampleData(commandOptions.bodySampleData);
            variantExportParams.setSampleAnnotation(commandOptions.bodySampleAnnotation);
            variantExportParams.setFamily(commandOptions.bodyFamily);
            variantExportParams.setFamilyMembers(commandOptions.bodyFamilyMembers);
            variantExportParams.setFamilyDisorder(commandOptions.bodyFamilyDisorder);
            variantExportParams.setFamilyProband(commandOptions.bodyFamilyProband);
            variantExportParams.setFamilySegregation(commandOptions.bodyFamilySegregation);
            variantExportParams.setCohort(commandOptions.bodyCohort);
            variantExportParams.setCohortStatsPass(commandOptions.bodyCohortStatsPass);
            variantExportParams.setCohortStatsMgf(commandOptions.bodyCohortStatsMgf);
            variantExportParams.setMissingAlleles(commandOptions.bodyMissingAlleles);
            variantExportParams.setMissingGenotypes(commandOptions.bodyMissingGenotypes);
            variantExportParams.setScore(commandOptions.bodyScore);
            variantExportParams.setPolyphen(commandOptions.bodyPolyphen);
            variantExportParams.setSift(commandOptions.bodySift);
            variantExportParams.setGeneTraitId(commandOptions.bodyGeneTraitId);
            variantExportParams.setGeneTraitName(commandOptions.bodyGeneTraitName);
            variantExportParams.setTrait(commandOptions.bodyTrait);
            variantExportParams.setCosmic(commandOptions.bodyCosmic);
            variantExportParams.setClinvar(commandOptions.bodyClinvar);
            variantExportParams.setHpo(commandOptions.bodyHpo);
            variantExportParams.setGo(commandOptions.bodyGo);
            variantExportParams.setExpression(commandOptions.bodyExpression);
            variantExportParams.setProteinKeyword(commandOptions.bodyProteinKeyword);
            variantExportParams.setDrug(commandOptions.bodyDrug);
            variantExportParams.setCustomAnnotation(commandOptions.bodyCustomAnnotation);
            variantExportParams.setUnknownGenotype(commandOptions.bodyUnknownGenotype);
            variantExportParams.setOutdir(commandOptions.bodyOutdir);
            variantExportParams.setOutputFileName(commandOptions.bodyOutputFileName);
            variantExportParams.setOutputFileFormat(commandOptions.bodyOutputFileFormat);
            variantExportParams.setVariantsFile(commandOptions.bodyVariantsFile);
            variantExportParams.setInclude(commandOptions.bodyInclude);
            variantExportParams.setExclude(commandOptions.bodyExclude);
            variantExportParams.setLimit(commandOptions.bodyLimit);
            variantExportParams.setSkip(commandOptions.bodySkip);

            if (commandOptions.bodyPanelIntersection != null) {
                variantExportParams.setPanelIntersection(commandOptions.bodyPanelIntersection);
            }
            if (commandOptions.bodyAnnotationExists != null) {
                variantExportParams.setAnnotationExists(commandOptions.bodyAnnotationExists);
            }
            if (commandOptions.bodySampleMetadata != null) {
                variantExportParams.setSampleMetadata(commandOptions.bodySampleMetadata);
            }
            if (commandOptions.bodySort != null) {
                variantExportParams.setSort(commandOptions.bodySort);
            }
            if (commandOptions.bodyCompress != null) {
                variantExportParams.setCompress(commandOptions.bodyCompress);
            }
            if (commandOptions.bodySummary != null) {
                variantExportParams.setSummary(commandOptions.bodySummary);
            }
        }
        return openCGAClient.getVariantClient().runExport(variantExportParams, queryParams);
    }

    private RestResponse<ObjectMap> genotypesFamily() throws Exception {

        logger.debug("Executing genotypesFamily in Analysis - Variant command line");

        AnalysisVariantCommandOptions.GenotypesFamilyCommandOptions commandOptions = analysisVariantCommandOptions.genotypesFamilyCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("clinicalAnalysis", commandOptions.clinicalAnalysis);
        queryParams.putIfNotNull("penetrance", commandOptions.penetrance);
        queryParams.putIfNotEmpty("disorder", commandOptions.disorder);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().genotypesFamily(commandOptions.modeOfInheritance, queryParams);
    }

    private RestResponse<Job> runFamilyQc() throws Exception {

        logger.debug("Executing runFamilyQc in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunFamilyQcCommandOptions commandOptions = analysisVariantCommandOptions.runFamilyQcCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        FamilyQcAnalysisParams familyQcAnalysisParams = new FamilyQcAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(familyQcAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            familyQcAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), FamilyQcAnalysisParams.class);
        } else {
            familyQcAnalysisParams.setFamily(commandOptions.family);
            familyQcAnalysisParams.setRelatednessMethod(commandOptions.relatednessMethod);
            familyQcAnalysisParams.setRelatednessMaf(commandOptions.relatednessMaf);
            familyQcAnalysisParams.setOutdir(commandOptions.outdir);

        }
        return openCGAClient.getVariantClient().runFamilyQc(familyQcAnalysisParams, queryParams);
    }

    private RestResponse<Job> deleteFile() throws Exception {

        logger.debug("Executing deleteFile in Analysis - Variant command line");

        AnalysisVariantCommandOptions.DeleteFileCommandOptions commandOptions = analysisVariantCommandOptions.deleteFileCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotNull("resume", commandOptions.resume);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().deleteFile(queryParams);
    }

    private RestResponse<Job> runGatk() throws Exception {

        logger.debug("Executing runGatk in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunGatkCommandOptions commandOptions = analysisVariantCommandOptions.runGatkCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        GatkWrapperParams gatkWrapperParams = new GatkWrapperParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(gatkWrapperParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            gatkWrapperParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), GatkWrapperParams.class);
        } else {
            gatkWrapperParams.setCommand(commandOptions.command);
            gatkWrapperParams.setOutdir(commandOptions.outdir);
            gatkWrapperParams.setGatkParams(new HashMap<>(commandOptions.gatkParams));

        }
        return openCGAClient.getVariantClient().runGatk(gatkWrapperParams, queryParams);
    }

    private RestResponse<Job> runGenomePlot() throws Exception {

        logger.debug("Executing runGenomePlot in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunGenomePlotCommandOptions commandOptions = analysisVariantCommandOptions.runGenomePlotCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        GenomePlotAnalysisParams genomePlotAnalysisParams = new GenomePlotAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(genomePlotAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            genomePlotAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), GenomePlotAnalysisParams.class);
        } else {
            genomePlotAnalysisParams.setSample(commandOptions.sample);
            genomePlotAnalysisParams.setId(commandOptions.id);
            genomePlotAnalysisParams.setDescription(commandOptions.description);
            genomePlotAnalysisParams.setConfigFile(commandOptions.configFile);
            genomePlotAnalysisParams.setOutdir(commandOptions.outdir);

        }
        return openCGAClient.getVariantClient().runGenomePlot(genomePlotAnalysisParams, queryParams);
    }

    private RestResponse<Job> runGwas() throws Exception {

        logger.debug("Executing runGwas in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunGwasCommandOptions commandOptions = analysisVariantCommandOptions.runGwasCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        GwasAnalysisParams gwasAnalysisParams = new GwasAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(gwasAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            gwasAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), GwasAnalysisParams.class);
        } else {
            gwasAnalysisParams.setPhenotype(commandOptions.phenotype);
            gwasAnalysisParams.setIndexScoreId(commandOptions.indexScoreId);
            gwasAnalysisParams.setMethod(commandOptions.method == null ? null : GwasConfiguration.Method.valueOf(commandOptions.method));
            gwasAnalysisParams.setFisherMode(commandOptions.fisherMode == null ? null : GwasConfiguration.FisherMode.valueOf(commandOptions.fisherMode));
            gwasAnalysisParams.setCaseCohort(commandOptions.caseCohort);
            gwasAnalysisParams.setCaseCohortSamplesAnnotation(commandOptions.caseCohortSamplesAnnotation);
            gwasAnalysisParams.setCaseCohortSamples(splitWithTrim(commandOptions.caseCohortSamples));
            gwasAnalysisParams.setControlCohort(commandOptions.controlCohort);
            gwasAnalysisParams.setControlCohortSamplesAnnotation(commandOptions.controlCohortSamplesAnnotation);
            gwasAnalysisParams.setControlCohortSamples(splitWithTrim(commandOptions.controlCohortSamples));
            gwasAnalysisParams.setOutdir(commandOptions.outdir);

            if (commandOptions.index != null) {
                gwasAnalysisParams.setIndex(commandOptions.index);
            }
        }
        return openCGAClient.getVariantClient().runGwas(gwasAnalysisParams, queryParams);
    }

    private RestResponse<Job> runIndex() throws Exception {

        logger.debug("Executing runIndex in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunIndexCommandOptions commandOptions = analysisVariantCommandOptions.runIndexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantIndexParams variantIndexParams = new VariantIndexParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantIndexParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantIndexParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantIndexParams.class);
        } else {
            variantIndexParams.setFile(commandOptions.file);
            variantIndexParams.setOutdir(commandOptions.outdir);
            variantIndexParams.setReferenceGenome(commandOptions.referenceGenome);
            variantIndexParams.setFailOnMalformedLines(commandOptions.failOnMalformedLines);
            variantIndexParams.setLoadSplitData(commandOptions.loadSplitData);
            variantIndexParams.setLoadSampleIndex(commandOptions.loadSampleIndex);
            variantIndexParams.setLoadArchive(commandOptions.loadArchive);
            variantIndexParams.setLoadHomRef(commandOptions.loadHomRef);
            variantIndexParams.setPostLoadCheck(commandOptions.postLoadCheck);
            variantIndexParams.setIncludeGenotypes(commandOptions.includeGenotypes);
            variantIndexParams.setIncludeSampleData(commandOptions.includeSampleData);
            variantIndexParams.setMerge(commandOptions.merge);
            variantIndexParams.setDeduplicationPolicy(commandOptions.deduplicationPolicy);
            variantIndexParams.setAggregated(commandOptions.aggregated == null ? null : Aggregation.valueOf(commandOptions.aggregated));
            variantIndexParams.setAggregationMappingFile(commandOptions.aggregationMappingFile);
            variantIndexParams.setAnnotator(commandOptions.annotator);

            if (commandOptions.resume != null) {
                variantIndexParams.setResume(commandOptions.resume);
            }
            if (commandOptions.transform != null) {
                variantIndexParams.setTransform(commandOptions.transform);
            }
            if (commandOptions.gvcf != null) {
                variantIndexParams.setGvcf(commandOptions.gvcf);
            }
            if (commandOptions.normalizationSkip != null) {
                variantIndexParams.setNormalizationSkip(commandOptions.normalizationSkip);
            }
            if (commandOptions.family != null) {
                variantIndexParams.setFamily(commandOptions.family);
            }
            if (commandOptions.somatic != null) {
                variantIndexParams.setSomatic(commandOptions.somatic);
            }
            if (commandOptions.load != null) {
                variantIndexParams.setLoad(commandOptions.load);
            }
            if (commandOptions.loadMultiFileData != null) {
                variantIndexParams.setLoadMultiFileData(commandOptions.loadMultiFileData);
            }
            if (commandOptions.calculateStats != null) {
                variantIndexParams.setCalculateStats(commandOptions.calculateStats);
            }
            if (commandOptions.annotate != null) {
                variantIndexParams.setAnnotate(commandOptions.annotate);
            }
            if (commandOptions.overwriteAnnotations != null) {
                variantIndexParams.setOverwriteAnnotations(commandOptions.overwriteAnnotations);
            }
            if (commandOptions.indexSearch != null) {
                variantIndexParams.setIndexSearch(commandOptions.indexSearch);
            }
            if (commandOptions.skipIndexedFiles != null) {
                variantIndexParams.setSkipIndexedFiles(commandOptions.skipIndexedFiles);
            }
        }
        return openCGAClient.getVariantClient().runIndex(variantIndexParams, queryParams);
    }

    private RestResponse<Job> runIndividualQc() throws Exception {

        logger.debug("Executing runIndividualQc in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunIndividualQcCommandOptions commandOptions = analysisVariantCommandOptions.runIndividualQcCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        IndividualQcAnalysisParams individualQcAnalysisParams = new IndividualQcAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(individualQcAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            individualQcAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), IndividualQcAnalysisParams.class);
        } else {
            individualQcAnalysisParams.setIndividual(commandOptions.individual);
            individualQcAnalysisParams.setSample(commandOptions.sample);
            individualQcAnalysisParams.setInferredSexMethod(commandOptions.inferredSexMethod);
            individualQcAnalysisParams.setOutdir(commandOptions.outdir);

        }
        return openCGAClient.getVariantClient().runIndividualQc(individualQcAnalysisParams, queryParams);
    }

    private RestResponse<Job> runInferredSex() throws Exception {

        logger.debug("Executing runInferredSex in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunInferredSexCommandOptions commandOptions = analysisVariantCommandOptions.runInferredSexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        InferredSexAnalysisParams inferredSexAnalysisParams = new InferredSexAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(inferredSexAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            inferredSexAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), InferredSexAnalysisParams.class);
        } else {
            inferredSexAnalysisParams.setIndividual(commandOptions.individual);
            inferredSexAnalysisParams.setSample(commandOptions.sample);
            inferredSexAnalysisParams.setOutdir(commandOptions.outdir);

        }
        return openCGAClient.getVariantClient().runInferredSex(inferredSexAnalysisParams, queryParams);
    }

    private RestResponse<KnockoutByGene> queryKnockoutGene() throws Exception {

        logger.debug("Executing queryKnockoutGene in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QueryKnockoutGeneCommandOptions commandOptions = analysisVariantCommandOptions.queryKnockoutGeneCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("job", commandOptions.job);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().queryKnockoutGene(queryParams);
    }

    private RestResponse<KnockoutByIndividual> queryKnockoutIndividual() throws Exception {

        logger.debug("Executing queryKnockoutIndividual in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QueryKnockoutIndividualCommandOptions commandOptions = analysisVariantCommandOptions.queryKnockoutIndividualCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("job", commandOptions.job);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().queryKnockoutIndividual(queryParams);
    }

    private RestResponse<Job> runKnockout() throws Exception {

        logger.debug("Executing runKnockout in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunKnockoutCommandOptions commandOptions = analysisVariantCommandOptions.runKnockoutCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        KnockoutAnalysisParams knockoutAnalysisParams = new KnockoutAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(knockoutAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            knockoutAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), KnockoutAnalysisParams.class);
        } else {
            knockoutAnalysisParams.setSample(splitWithTrim(commandOptions.sample));
            knockoutAnalysisParams.setGene(splitWithTrim(commandOptions.gene));
            knockoutAnalysisParams.setPanel(splitWithTrim(commandOptions.panel));
            knockoutAnalysisParams.setBiotype(commandOptions.biotype);
            knockoutAnalysisParams.setConsequenceType(commandOptions.consequenceType);
            knockoutAnalysisParams.setFilter(commandOptions.filter);
            knockoutAnalysisParams.setQual(commandOptions.qual);
            knockoutAnalysisParams.setOutdir(commandOptions.outdir);

            if (commandOptions.skipGenesFile != null) {
                knockoutAnalysisParams.setSkipGenesFile(commandOptions.skipGenesFile);
            }
            if (commandOptions.index != null) {
                knockoutAnalysisParams.setIndex(commandOptions.index);
            }
        }
        return openCGAClient.getVariantClient().runKnockout(knockoutAnalysisParams, queryParams);
    }

    private RestResponse<Job> runMendelianError() throws Exception {

        logger.debug("Executing runMendelianError in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunMendelianErrorCommandOptions commandOptions = analysisVariantCommandOptions.runMendelianErrorCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        MendelianErrorAnalysisParams mendelianErrorAnalysisParams = new MendelianErrorAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(mendelianErrorAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            mendelianErrorAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), MendelianErrorAnalysisParams.class);
        } else {
            mendelianErrorAnalysisParams.setFamily(commandOptions.family);
            mendelianErrorAnalysisParams.setIndividual(commandOptions.individual);
            mendelianErrorAnalysisParams.setSample(commandOptions.sample);
            mendelianErrorAnalysisParams.setOutdir(commandOptions.outdir);

        }
        return openCGAClient.getVariantClient().runMendelianError(mendelianErrorAnalysisParams, queryParams);
    }

    private RestResponse<VariantMetadata> metadata() throws Exception {

        logger.debug("Executing metadata in Analysis - Variant command line");

        AnalysisVariantCommandOptions.MetadataCommandOptions commandOptions = analysisVariantCommandOptions.metadataCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("includeStudy", commandOptions.includeStudy);
        queryParams.putIfNotEmpty("includeFile", commandOptions.includeFile);
        queryParams.putIfNotEmpty("includeSample", commandOptions.includeSample);
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().metadata(queryParams);
    }

    private RestResponse<Signature> queryMutationalSignature() throws Exception {

        logger.debug("Executing queryMutationalSignature in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QueryMutationalSignatureCommandOptions commandOptions = analysisVariantCommandOptions.queryMutationalSignatureCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("fileData", commandOptions.fileData);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("qual", commandOptions.qual);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("gene", commandOptions.gene);
        queryParams.putIfNotEmpty("panel", commandOptions.panel);
        queryParams.putIfNotEmpty("panelModeOfInheritance", commandOptions.panelModeOfInheritance);
        queryParams.putIfNotEmpty("panelConfidence", commandOptions.panelConfidence);
        queryParams.putIfNotEmpty("panelFeatureType", commandOptions.panelFeatureType);
        queryParams.putIfNotEmpty("panelRoleInCancer", commandOptions.panelRoleInCancer);
        queryParams.putIfNotNull("panelIntersection", commandOptions.panelIntersection);
        queryParams.putIfNotNull("fitting", commandOptions.fitting);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().queryMutationalSignature(queryParams);
    }

    private RestResponse<Job> runMutationalSignature() throws Exception {

        logger.debug("Executing runMutationalSignature in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunMutationalSignatureCommandOptions commandOptions = analysisVariantCommandOptions.runMutationalSignatureCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        MutationalSignatureAnalysisParams mutationalSignatureAnalysisParams = new MutationalSignatureAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(mutationalSignatureAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            mutationalSignatureAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), MutationalSignatureAnalysisParams.class);
        } else {
            mutationalSignatureAnalysisParams.setSample(commandOptions.sample);
            mutationalSignatureAnalysisParams.setId(commandOptions.id);
            mutationalSignatureAnalysisParams.setDescription(commandOptions.description);
            mutationalSignatureAnalysisParams.setQuery(new ObjectMap(commandOptions.query));
            mutationalSignatureAnalysisParams.setRelease(commandOptions.release);
            mutationalSignatureAnalysisParams.setOutdir(commandOptions.outdir);

            if (commandOptions.fitting != null) {
                mutationalSignatureAnalysisParams.setFitting(commandOptions.fitting);
            }
        }
        return openCGAClient.getVariantClient().runMutationalSignature(mutationalSignatureAnalysisParams, queryParams);
    }

    private RestResponse<Job> runPlink() throws Exception {

        logger.debug("Executing runPlink in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunPlinkCommandOptions commandOptions = analysisVariantCommandOptions.runPlinkCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        PlinkWrapperParams plinkWrapperParams = new PlinkWrapperParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(plinkWrapperParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            plinkWrapperParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), PlinkWrapperParams.class);
        } else {
            plinkWrapperParams.setOutdir(commandOptions.outdir);
            plinkWrapperParams.setPlinkParams(new HashMap<>(commandOptions.plinkParams));

        }
        return openCGAClient.getVariantClient().runPlink(plinkWrapperParams, queryParams);
    }

    private RestResponse<Variant> query() throws Exception {

        logger.debug("Executing query in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QueryCommandOptions commandOptions = analysisVariantCommandOptions.queryCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotNull("sort", commandOptions.sort);
        queryParams.putIfNotNull("summary", commandOptions.summary);
        queryParams.putIfNotNull("approximateCount", commandOptions.approximateCount);
        queryParams.putIfNotNull("approximateCountSamplingSize", commandOptions.approximateCountSamplingSize);
        queryParams.putIfNotEmpty("savedFilter", commandOptions.savedFilter);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("reference", commandOptions.reference);
        queryParams.putIfNotEmpty("alternate", commandOptions.alternate);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("qual", commandOptions.qual);
        queryParams.putIfNotEmpty("fileData", commandOptions.fileData);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("genotype", commandOptions.genotype);
        queryParams.putIfNotEmpty("sampleData", commandOptions.sampleData);
        queryParams.putIfNotEmpty("sampleAnnotation", commandOptions.sampleAnnotation);
        queryParams.putIfNotNull("sampleMetadata", commandOptions.sampleMetadata);
        queryParams.putIfNotEmpty("unknownGenotype", commandOptions.unknownGenotype);
        queryParams.putIfNotNull("sampleLimit", commandOptions.sampleLimit);
        queryParams.putIfNotNull("sampleSkip", commandOptions.sampleSkip);
        queryParams.putIfNotEmpty("cohort", commandOptions.cohort);
        queryParams.putIfNotEmpty("cohortStatsRef", commandOptions.cohortStatsRef);
        queryParams.putIfNotEmpty("cohortStatsAlt", commandOptions.cohortStatsAlt);
        queryParams.putIfNotEmpty("cohortStatsMaf", commandOptions.cohortStatsMaf);
        queryParams.putIfNotEmpty("cohortStatsMgf", commandOptions.cohortStatsMgf);
        queryParams.putIfNotEmpty("cohortStatsPass", commandOptions.cohortStatsPass);
        queryParams.putIfNotEmpty("missingAlleles", commandOptions.missingAlleles);
        queryParams.putIfNotEmpty("missingGenotypes", commandOptions.missingGenotypes);
        queryParams.putIfNotEmpty("score", commandOptions.score);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("familyDisorder", commandOptions.familyDisorder);
        queryParams.putIfNotEmpty("familySegregation", commandOptions.familySegregation);
        queryParams.putIfNotEmpty("familyMembers", commandOptions.familyMembers);
        queryParams.putIfNotEmpty("familyProband", commandOptions.familyProband);
        queryParams.putIfNotEmpty("includeStudy", commandOptions.includeStudy);
        queryParams.putIfNotEmpty("includeFile", commandOptions.includeFile);
        queryParams.putIfNotEmpty("includeSample", commandOptions.includeSample);
        queryParams.putIfNotEmpty("includeSampleData", commandOptions.includeSampleData);
        queryParams.putIfNotEmpty("includeGenotype", commandOptions.includeGenotype);
        queryParams.putIfNotEmpty("includeSampleId", commandOptions.includeSampleId);
        queryParams.putIfNotNull("annotationExists", commandOptions.annotationExists);
        queryParams.putIfNotEmpty("gene", commandOptions.gene);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("xref", commandOptions.xref);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("proteinSubstitution", commandOptions.proteinSubstitution);
        queryParams.putIfNotEmpty("conservation", commandOptions.conservation);
        queryParams.putIfNotEmpty("populationFrequencyAlt", commandOptions.populationFrequencyAlt);
        queryParams.putIfNotEmpty("populationFrequencyRef", commandOptions.populationFrequencyRef);
        queryParams.putIfNotEmpty("populationFrequencyMaf", commandOptions.populationFrequencyMaf);
        queryParams.putIfNotEmpty("transcriptFlag", commandOptions.transcriptFlag);
        queryParams.putIfNotEmpty("geneTraitId", commandOptions.geneTraitId);
        queryParams.putIfNotEmpty("go", commandOptions.go);
        queryParams.putIfNotEmpty("expression", commandOptions.expression);
        queryParams.putIfNotEmpty("proteinKeyword", commandOptions.proteinKeyword);
        queryParams.putIfNotEmpty("drug", commandOptions.drug);
        queryParams.putIfNotEmpty("functionalScore", commandOptions.functionalScore);
        queryParams.putIfNotEmpty("clinical", commandOptions.clinical);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotNull("clinicalConfirmedStatus", commandOptions.clinicalConfirmedStatus);
        queryParams.putIfNotEmpty("customAnnotation", commandOptions.customAnnotation);
        queryParams.putIfNotEmpty("panel", commandOptions.panel);
        queryParams.putIfNotEmpty("panelModeOfInheritance", commandOptions.panelModeOfInheritance);
        queryParams.putIfNotEmpty("panelConfidence", commandOptions.panelConfidence);
        queryParams.putIfNotEmpty("panelRoleInCancer", commandOptions.panelRoleInCancer);
        queryParams.putIfNotEmpty("panelFeatureType", commandOptions.panelFeatureType);
        queryParams.putIfNotNull("panelIntersection", commandOptions.panelIntersection);
        queryParams.putIfNotEmpty("trait", commandOptions.trait);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().query(queryParams);
    }

    private RestResponse<Job> runRelatedness() throws Exception {

        logger.debug("Executing runRelatedness in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunRelatednessCommandOptions commandOptions = analysisVariantCommandOptions.runRelatednessCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        RelatednessAnalysisParams relatednessAnalysisParams = new RelatednessAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(relatednessAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            relatednessAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), RelatednessAnalysisParams.class);
        } else {
            relatednessAnalysisParams.setIndividuals(splitWithTrim(commandOptions.individuals));
            relatednessAnalysisParams.setSamples(splitWithTrim(commandOptions.samples));
            relatednessAnalysisParams.setMinorAlleleFreq(commandOptions.minorAlleleFreq);
            relatednessAnalysisParams.setMethod(commandOptions.method);
            relatednessAnalysisParams.setOutdir(commandOptions.outdir);

        }
        return openCGAClient.getVariantClient().runRelatedness(relatednessAnalysisParams, queryParams);
    }

    private RestResponse<Job> runRvtests() throws Exception {

        logger.debug("Executing runRvtests in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunRvtestsCommandOptions commandOptions = analysisVariantCommandOptions.runRvtestsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        RvtestsWrapperParams rvtestsWrapperParams = new RvtestsWrapperParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(rvtestsWrapperParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            rvtestsWrapperParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), RvtestsWrapperParams.class);
        } else {
            rvtestsWrapperParams.setCommand(commandOptions.command);
            rvtestsWrapperParams.setOutdir(commandOptions.outdir);
            rvtestsWrapperParams.setRvtestsParams(new HashMap<>(commandOptions.rvtestsParams));

        }
        return openCGAClient.getVariantClient().runRvtests(rvtestsWrapperParams, queryParams);
    }

    private RestResponse<FacetField> aggregationStatsSample() throws Exception {

        logger.debug("Executing aggregationStatsSample in Analysis - Variant command line");

        AnalysisVariantCommandOptions.AggregationStatsSampleCommandOptions commandOptions = analysisVariantCommandOptions.aggregationStatsSampleCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("savedFilter", commandOptions.savedFilter);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("genotype", commandOptions.genotype);
        queryParams.putIfNotEmpty("sampleAnnotation", commandOptions.sampleAnnotation);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("familyDisorder", commandOptions.familyDisorder);
        queryParams.putIfNotEmpty("familySegregation", commandOptions.familySegregation);
        queryParams.putIfNotEmpty("familyMembers", commandOptions.familyMembers);
        queryParams.putIfNotEmpty("familyProband", commandOptions.familyProband);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("populationFrequencyAlt", commandOptions.populationFrequencyAlt);
        queryParams.putIfNotEmpty("clinical", commandOptions.clinical);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotNull("clinicalConfirmedStatus", commandOptions.clinicalConfirmedStatus);
        queryParams.putIfNotEmpty("field", commandOptions.field);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().aggregationStatsSample(queryParams);
    }

    private RestResponse<Job> runSampleEligibility() throws Exception {

        logger.debug("Executing runSampleEligibility in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunSampleEligibilityCommandOptions commandOptions = analysisVariantCommandOptions.runSampleEligibilityCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        SampleEligibilityAnalysisParams sampleEligibilityAnalysisParams = new SampleEligibilityAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(sampleEligibilityAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            sampleEligibilityAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), SampleEligibilityAnalysisParams.class);
        } else {
            sampleEligibilityAnalysisParams.setQuery(commandOptions.query);
            sampleEligibilityAnalysisParams.setCohortId(commandOptions.cohortId);

            if (commandOptions.index != null) {
                sampleEligibilityAnalysisParams.setIndex(commandOptions.index);
            }
        }
        return openCGAClient.getVariantClient().runSampleEligibility(sampleEligibilityAnalysisParams, queryParams);
    }

    private RestResponse<Job> runSampleQc() throws Exception {

        logger.debug("Executing runSampleQc in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunSampleQcCommandOptions commandOptions = analysisVariantCommandOptions.runSampleQcCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        SampleQcAnalysisParams sampleQcAnalysisParams = new SampleQcAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(sampleQcAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            sampleQcAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), SampleQcAnalysisParams.class);
        } else {
            // Generate beans for nested objects
            AnnotationVariantQueryParams variantStatsQueryParam = new AnnotationVariantQueryParams();
            variantStatsQueryParam.setId(commandOptions.variantStatsQueryId);
            variantStatsQueryParam.setRegion(commandOptions.variantStatsQueryRegion);
            variantStatsQueryParam.setGene(commandOptions.variantStatsQueryGene);
            variantStatsQueryParam.setType(commandOptions.variantStatsQueryType);
            variantStatsQueryParam.setPanel(commandOptions.variantStatsQueryPanel);
            variantStatsQueryParam.setPanelModeOfInheritance(commandOptions.variantStatsQueryPanelModeOfInheritance);
            variantStatsQueryParam.setPanelConfidence(commandOptions.variantStatsQueryPanelConfidence);
            variantStatsQueryParam.setPanelRoleInCancer(commandOptions.variantStatsQueryPanelRoleInCancer);
            variantStatsQueryParam.setPanelIntersection(commandOptions.variantStatsQueryPanelIntersection);
            variantStatsQueryParam.setCohortStatsRef(commandOptions.variantStatsQueryCohortStatsRef);
            variantStatsQueryParam.setCohortStatsAlt(commandOptions.variantStatsQueryCohortStatsAlt);
            variantStatsQueryParam.setCohortStatsMaf(commandOptions.variantStatsQueryCohortStatsMaf);
            variantStatsQueryParam.setCt(commandOptions.variantStatsQueryCt);
            variantStatsQueryParam.setXref(commandOptions.variantStatsQueryXref);
            variantStatsQueryParam.setBiotype(commandOptions.variantStatsQueryBiotype);
            variantStatsQueryParam.setProteinSubstitution(commandOptions.variantStatsQueryProteinSubstitution);
            variantStatsQueryParam.setConservation(commandOptions.variantStatsQueryConservation);
            variantStatsQueryParam.setPopulationFrequencyMaf(commandOptions.variantStatsQueryPopulationFrequencyMaf);
            variantStatsQueryParam.setPopulationFrequencyAlt(commandOptions.variantStatsQueryPopulationFrequencyAlt);
            variantStatsQueryParam.setPopulationFrequencyRef(commandOptions.variantStatsQueryPopulationFrequencyRef);
            variantStatsQueryParam.setTranscriptFlag(commandOptions.variantStatsQueryTranscriptFlag);
            variantStatsQueryParam.setFunctionalScore(commandOptions.variantStatsQueryFunctionalScore);
            variantStatsQueryParam.setClinical(commandOptions.variantStatsQueryClinical);
            variantStatsQueryParam.setClinicalSignificance(commandOptions.variantStatsQueryClinicalSignificance);
            variantStatsQueryParam.setClinicalConfirmedStatus(commandOptions.variantStatsQueryClinicalConfirmedStatus);

            //Set main body params
            sampleQcAnalysisParams.setSample(commandOptions.sample);
            sampleQcAnalysisParams.setVariantStatsId(commandOptions.variantStatsId);
            sampleQcAnalysisParams.setVariantStatsDescription(commandOptions.variantStatsDescription);
            sampleQcAnalysisParams.setVariantStatsQuery(variantStatsQueryParam);
            sampleQcAnalysisParams.setSignatureId(commandOptions.signatureId);
            sampleQcAnalysisParams.setSignatureDescription(commandOptions.signatureDescription);
            sampleQcAnalysisParams.setSignatureQuery(new ObjectMap(commandOptions.signatureQuery));
            sampleQcAnalysisParams.setSignatureRelease(commandOptions.signatureRelease);
            sampleQcAnalysisParams.setGenomePlotId(commandOptions.genomePlotId);
            sampleQcAnalysisParams.setGenomePlotDescription(commandOptions.genomePlotDescription);
            sampleQcAnalysisParams.setGenomePlotConfigFile(commandOptions.genomePlotConfigFile);
            sampleQcAnalysisParams.setOutdir(commandOptions.outdir);

        }
        return openCGAClient.getVariantClient().runSampleQc(sampleQcAnalysisParams, queryParams);
    }

    private RestResponse<Variant> querySample() throws Exception {

        logger.debug("Executing querySample in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QuerySampleCommandOptions commandOptions = analysisVariantCommandOptions.querySampleCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotEmpty("variant", commandOptions.variant);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("genotype", commandOptions.genotype);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().querySample(queryParams);
    }

    private RestResponse<Job> runSample() throws Exception {

        logger.debug("Executing runSample in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunSampleCommandOptions commandOptions = analysisVariantCommandOptions.runSampleCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        SampleVariantFilterParams sampleVariantFilterParams = new SampleVariantFilterParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(sampleVariantFilterParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            sampleVariantFilterParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), SampleVariantFilterParams.class);
        } else {
            sampleVariantFilterParams.setId(commandOptions.id);
            sampleVariantFilterParams.setRegion(commandOptions.region);
            sampleVariantFilterParams.setGene(commandOptions.gene);
            sampleVariantFilterParams.setType(commandOptions.type);
            sampleVariantFilterParams.setPanel(commandOptions.panel);
            sampleVariantFilterParams.setPanelModeOfInheritance(commandOptions.panelModeOfInheritance);
            sampleVariantFilterParams.setPanelConfidence(commandOptions.panelConfidence);
            sampleVariantFilterParams.setPanelRoleInCancer(commandOptions.panelRoleInCancer);
            sampleVariantFilterParams.setCohortStatsRef(commandOptions.cohortStatsRef);
            sampleVariantFilterParams.setCohortStatsAlt(commandOptions.cohortStatsAlt);
            sampleVariantFilterParams.setCohortStatsMaf(commandOptions.cohortStatsMaf);
            sampleVariantFilterParams.setCt(commandOptions.ct);
            sampleVariantFilterParams.setXref(commandOptions.xref);
            sampleVariantFilterParams.setBiotype(commandOptions.biotype);
            sampleVariantFilterParams.setProteinSubstitution(commandOptions.proteinSubstitution);
            sampleVariantFilterParams.setConservation(commandOptions.conservation);
            sampleVariantFilterParams.setPopulationFrequencyMaf(commandOptions.populationFrequencyMaf);
            sampleVariantFilterParams.setPopulationFrequencyAlt(commandOptions.populationFrequencyAlt);
            sampleVariantFilterParams.setPopulationFrequencyRef(commandOptions.populationFrequencyRef);
            sampleVariantFilterParams.setTranscriptFlag(commandOptions.transcriptFlag);
            sampleVariantFilterParams.setFunctionalScore(commandOptions.functionalScore);
            sampleVariantFilterParams.setClinical(commandOptions.clinical);
            sampleVariantFilterParams.setClinicalSignificance(commandOptions.clinicalSignificance);
            sampleVariantFilterParams.setClinicalConfirmedStatus(commandOptions.clinicalConfirmedStatus);
            sampleVariantFilterParams.setGenotypes(splitWithTrim(commandOptions.genotypes));
            sampleVariantFilterParams.setSample(splitWithTrim(commandOptions.sample));
            sampleVariantFilterParams.setMaxVariants(commandOptions.maxVariants);

            if (commandOptions.panelIntersection != null) {
                sampleVariantFilterParams.setPanelIntersection(commandOptions.panelIntersection);
            }
            if (commandOptions.samplesInAllVariants != null) {
                sampleVariantFilterParams.setSamplesInAllVariants(commandOptions.samplesInAllVariants);
            }
        }
        return openCGAClient.getVariantClient().runSample(sampleVariantFilterParams, queryParams);
    }

    private RestResponse<SampleVariantStats> querySampleStats() throws Exception {

        logger.debug("Executing querySampleStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QuerySampleStatsCommandOptions commandOptions = analysisVariantCommandOptions.querySampleStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("sampleData", commandOptions.sampleData);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("transcriptFlag", commandOptions.transcriptFlag);
        queryParams.putIfNotEmpty("populationFrequencyAlt", commandOptions.populationFrequencyAlt);
        queryParams.putIfNotEmpty("clinical", commandOptions.clinical);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotNull("clinicalConfirmedStatus", commandOptions.clinicalConfirmedStatus);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("filterTranscript", commandOptions.filterTranscript);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().querySampleStats(commandOptions.sample, queryParams);
    }

    private RestResponse<Job> runSampleStats() throws Exception {

        logger.debug("Executing runSampleStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunSampleStatsCommandOptions commandOptions = analysisVariantCommandOptions.runSampleStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        SampleVariantStatsAnalysisParams sampleVariantStatsAnalysisParams = new SampleVariantStatsAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(sampleVariantStatsAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            sampleVariantStatsAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), SampleVariantStatsAnalysisParams.class);
        } else {
            // Generate beans for nested objects
            SampleVariantStatsAnalysisParams.VariantQueryParams variantQueryParam = new SampleVariantStatsAnalysisParams.VariantQueryParams();
            variantQueryParam.setId(commandOptions.variantQueryId);
            variantQueryParam.setRegion(commandOptions.variantQueryRegion);
            variantQueryParam.setGene(commandOptions.variantQueryGene);
            variantQueryParam.setType(commandOptions.variantQueryType);
            variantQueryParam.setPanel(commandOptions.variantQueryPanel);
            variantQueryParam.setPanelModeOfInheritance(commandOptions.variantQueryPanelModeOfInheritance);
            variantQueryParam.setPanelConfidence(commandOptions.variantQueryPanelConfidence);
            variantQueryParam.setPanelRoleInCancer(commandOptions.variantQueryPanelRoleInCancer);
            variantQueryParam.setPanelIntersection(commandOptions.variantQueryPanelIntersection);
            variantQueryParam.setCohortStatsRef(commandOptions.variantQueryCohortStatsRef);
            variantQueryParam.setCohortStatsAlt(commandOptions.variantQueryCohortStatsAlt);
            variantQueryParam.setCohortStatsMaf(commandOptions.variantQueryCohortStatsMaf);
            variantQueryParam.setCt(commandOptions.variantQueryCt);
            variantQueryParam.setXref(commandOptions.variantQueryXref);
            variantQueryParam.setBiotype(commandOptions.variantQueryBiotype);
            variantQueryParam.setProteinSubstitution(commandOptions.variantQueryProteinSubstitution);
            variantQueryParam.setConservation(commandOptions.variantQueryConservation);
            variantQueryParam.setPopulationFrequencyMaf(commandOptions.variantQueryPopulationFrequencyMaf);
            variantQueryParam.setPopulationFrequencyAlt(commandOptions.variantQueryPopulationFrequencyAlt);
            variantQueryParam.setPopulationFrequencyRef(commandOptions.variantQueryPopulationFrequencyRef);
            variantQueryParam.setTranscriptFlag(commandOptions.variantQueryTranscriptFlag);
            variantQueryParam.setFunctionalScore(commandOptions.variantQueryFunctionalScore);
            variantQueryParam.setClinical(commandOptions.variantQueryClinical);
            variantQueryParam.setClinicalSignificance(commandOptions.variantQueryClinicalSignificance);
            variantQueryParam.setClinicalConfirmedStatus(commandOptions.variantQueryClinicalConfirmedStatus);
            variantQueryParam.setSampleData(commandOptions.variantQuerySampleData);
            variantQueryParam.setFileData(commandOptions.variantQueryFileData);

            //Set main body params
            sampleVariantStatsAnalysisParams.setSample(splitWithTrim(commandOptions.sample));
            sampleVariantStatsAnalysisParams.setIndividual(splitWithTrim(commandOptions.individual));
            sampleVariantStatsAnalysisParams.setVariantQuery(variantQueryParam);
            sampleVariantStatsAnalysisParams.setOutdir(commandOptions.outdir);
            sampleVariantStatsAnalysisParams.setIndexId(commandOptions.indexId);
            sampleVariantStatsAnalysisParams.setIndexDescription(commandOptions.indexDescription);
            sampleVariantStatsAnalysisParams.setBatchSize(commandOptions.batchSize);

            if (commandOptions.index != null) {
                sampleVariantStatsAnalysisParams.setIndex(commandOptions.index);
            }
            if (commandOptions.indexOverwrite != null) {
                sampleVariantStatsAnalysisParams.setIndexOverwrite(commandOptions.indexOverwrite);
            }
        }
        return openCGAClient.getVariantClient().runSampleStats(sampleVariantStatsAnalysisParams, queryParams);
    }

    private RestResponse<Job> runStatsExport() throws Exception {

        logger.debug("Executing runStatsExport in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunStatsExportCommandOptions commandOptions = analysisVariantCommandOptions.runStatsExportCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantStatsExportParams variantStatsExportParams = new VariantStatsExportParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantStatsExportParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantStatsExportParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantStatsExportParams.class);
        } else {
            variantStatsExportParams.setCohorts(splitWithTrim(commandOptions.cohorts));
            variantStatsExportParams.setOutput(commandOptions.output);
            variantStatsExportParams.setRegion(commandOptions.region);
            variantStatsExportParams.setGene(commandOptions.gene);
            variantStatsExportParams.setOutputFileFormat(commandOptions.outputFileFormat);

        }
        return openCGAClient.getVariantClient().runStatsExport(variantStatsExportParams, queryParams);
    }

    private RestResponse<Job> runStats() throws Exception {

        logger.debug("Executing runStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunStatsCommandOptions commandOptions = analysisVariantCommandOptions.runStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaCommandLine.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantStatsAnalysisParams variantStatsAnalysisParams = new VariantStatsAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantStatsAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantStatsAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantStatsAnalysisParams.class);
        } else {
            variantStatsAnalysisParams.setCohort(splitWithTrim(commandOptions.cohort));
            variantStatsAnalysisParams.setSamples(splitWithTrim(commandOptions.samples));
            variantStatsAnalysisParams.setRegion(commandOptions.region);
            variantStatsAnalysisParams.setGene(commandOptions.gene);
            variantStatsAnalysisParams.setOutdir(commandOptions.outdir);
            variantStatsAnalysisParams.setOutputFileName(commandOptions.outputFileName);
            variantStatsAnalysisParams.setAggregated(commandOptions.aggregated == null ? null : Aggregation.valueOf(commandOptions.aggregated));
            variantStatsAnalysisParams.setAggregationMappingFile(commandOptions.aggregationMappingFile);

        }
        return openCGAClient.getVariantClient().runStats(variantStatsAnalysisParams, queryParams);
    }
}