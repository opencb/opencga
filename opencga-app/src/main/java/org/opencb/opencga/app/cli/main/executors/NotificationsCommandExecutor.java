package org.opencb.opencga.app.cli.main.executors;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.HashMap;
import java.util.List;
import org.opencb.commons.datastore.core.FacetField;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.commons.utils.PrintUtils;
import org.opencb.opencga.app.cli.main.*;
import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.app.cli.main.options.NotificationsCommandOptions;
import org.opencb.opencga.catalog.exceptions.CatalogAuthenticationException;
import org.opencb.opencga.core.common.JacksonUtils;
import org.opencb.opencga.core.exceptions.ClientException;
import org.opencb.opencga.core.models.notification.Notification;
import org.opencb.opencga.core.models.notification.NotificationCreateParams;
import org.opencb.opencga.core.models.notification.NotificationLevel;
import org.opencb.opencga.core.models.notification.NotificationScope;
import org.opencb.opencga.core.response.QueryType;
import org.opencb.opencga.core.response.RestResponse;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*  
*/
/**
 * This class contains methods for the Notifications command line.
 *    PATH: /{apiVersion}/notifications
 */
public class NotificationsCommandExecutor extends OpencgaCommandExecutor {

    public String categoryName = "notifications";
    public NotificationsCommandOptions notificationsCommandOptions;

    public NotificationsCommandExecutor(NotificationsCommandOptions notificationsCommandOptions) throws CatalogAuthenticationException {
        super(notificationsCommandOptions.commonCommandOptions);
        this.notificationsCommandOptions = notificationsCommandOptions;
    }

    @Override
    public void execute() throws Exception {

        logger.debug("Executing Notifications command line");

        String subCommandString = getParsedSubCommand(notificationsCommandOptions.jCommander);

        RestResponse queryResponse = null;

        switch (subCommandString) {
            case "aggregationstats":
                queryResponse = aggregationStats();
                break;
            case "create":
                queryResponse = create();
                break;
            case "search":
                queryResponse = search();
                break;
            case "info":
                queryResponse = info();
                break;
            case "visit":
                queryResponse = visit();
                break;
            default:
                logger.error("Subcommand not valid");
                break;
        }

        createOutput(queryResponse);

    }

    private RestResponse<FacetField> aggregationStats() throws Exception {
        logger.debug("Executing aggregationStats in Notifications command line");

        NotificationsCommandOptions.AggregationStatsCommandOptions commandOptions = notificationsCommandOptions.aggregationStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("organization", commandOptions.organization);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("scope", commandOptions.scope);
        queryParams.putIfNotEmpty("fqn", commandOptions.fqn);
        queryParams.putIfNotEmpty("sender", commandOptions.sender);
        queryParams.putIfNotEmpty("target", commandOptions.target);
        queryParams.putIfNotEmpty("receiver", commandOptions.receiver);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotNull("visited", commandOptions.visited);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("field", commandOptions.field);

        return openCGAClient.getNotificationClient().aggregationStats(queryParams);
    }

    private RestResponse<Notification> create() throws Exception {
        logger.debug("Executing create in Notifications command line");

        NotificationsCommandOptions.CreateCommandOptions commandOptions = notificationsCommandOptions.createCommandOptions;

        NotificationCreateParams notificationCreateParams = null;
        if (commandOptions.jsonDataModel) {
            RestResponse<Notification> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(categoryName,"/{apiVersion}/notifications/create"));
            return res;
        } else if (commandOptions.jsonFile != null) {
            notificationCreateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), NotificationCreateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "subject", commandOptions.subject, true);
            putNestedIfNotEmpty(beanParams, "content", commandOptions.content, true);
            putNestedIfNotNull(beanParams, "level", commandOptions.level, true);
            putNestedIfNotNull(beanParams, "scope", commandOptions.scope, true);
            putNestedIfNotEmpty(beanParams, "fqn", commandOptions.fqn, true);
            putNestedIfNotNull(beanParams, "targets", commandOptions.targets, true);

            notificationCreateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), NotificationCreateParams.class);
        }
        return openCGAClient.getNotificationClient().create(notificationCreateParams);
    }

    private RestResponse<Notification> search() throws Exception {
        logger.debug("Executing search in Notifications command line");

        NotificationsCommandOptions.SearchCommandOptions commandOptions = notificationsCommandOptions.searchCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("organization", commandOptions.organization);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("scope", commandOptions.scope);
        queryParams.putIfNotEmpty("fqn", commandOptions.fqn);
        queryParams.putIfNotEmpty("sender", commandOptions.sender);
        queryParams.putIfNotEmpty("target", commandOptions.target);
        queryParams.putIfNotEmpty("receiver", commandOptions.receiver);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotNull("visited", commandOptions.visited);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);

        return openCGAClient.getNotificationClient().search(queryParams);
    }

    private RestResponse<Notification> info() throws Exception {
        logger.debug("Executing info in Notifications command line");

        NotificationsCommandOptions.InfoCommandOptions commandOptions = notificationsCommandOptions.infoCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("organization", commandOptions.organization);

        return openCGAClient.getNotificationClient().info(commandOptions.notification, queryParams);
    }

    private RestResponse<Notification> visit() throws Exception {
        logger.debug("Executing visit in Notifications command line");

        NotificationsCommandOptions.VisitCommandOptions commandOptions = notificationsCommandOptions.visitCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("organization", commandOptions.organization);

        return openCGAClient.getNotificationClient().visit(commandOptions.notification, queryParams);
    }
}