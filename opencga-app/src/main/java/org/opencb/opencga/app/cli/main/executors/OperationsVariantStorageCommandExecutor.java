package org.opencb.opencga.app.cli.main.executors;

import com.fasterxml.jackson.databind.DeserializationFeature;
import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.app.cli.main.*;
import org.opencb.opencga.core.response.RestResponse;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.commons.datastore.core.ObjectMap;

import org.opencb.opencga.catalog.exceptions.CatalogAuthenticationException;
import org.opencb.opencga.core.common.JacksonUtils;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.List;
import java.util.HashMap;
import org.opencb.opencga.core.response.QueryType;
import org.opencb.commons.utils.PrintUtils;

import org.opencb.opencga.app.cli.main.options.OperationsVariantStorageCommandOptions;

import org.opencb.biodata.models.variant.metadata.Aggregation;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.opencga.core.common.YesNoAuto;
import org.opencb.opencga.core.config.storage.CellBaseConfiguration;
import org.opencb.opencga.core.config.storage.SampleIndexConfiguration;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.opencga.core.models.operations.variant.JulieParams;
import org.opencb.opencga.core.models.operations.variant.VariantAggregateFamilyParams;
import org.opencb.opencga.core.models.operations.variant.VariantAggregateParams;
import org.opencb.opencga.core.models.operations.variant.VariantAnnotationIndexParams;
import org.opencb.opencga.core.models.operations.variant.VariantAnnotationSaveParams;
import org.opencb.opencga.core.models.operations.variant.VariantFamilyIndexParams;
import org.opencb.opencga.core.models.operations.variant.VariantScoreIndexParams;
import org.opencb.opencga.core.models.operations.variant.VariantSecondaryAnnotationIndexParams;
import org.opencb.opencga.core.models.operations.variant.VariantSecondarySampleIndexParams;
import org.opencb.opencga.core.models.operations.variant.VariantStatsDeleteParams;
import org.opencb.opencga.core.models.operations.variant.VariantStatsIndexParams;
import org.opencb.opencga.core.models.operations.variant.VariantStorageMetadataRepairToolParams;
import org.opencb.opencga.core.models.variant.VariantConfigureParams;
import org.opencb.opencga.core.models.variant.VariantFileDeleteParams;
import org.opencb.opencga.core.models.variant.VariantFileIndexJobLauncherParams;
import org.opencb.opencga.core.models.variant.VariantIndexParams;
import org.opencb.opencga.core.models.variant.VariantPruneParams;
import org.opencb.opencga.core.models.variant.VariantSampleDeleteParams;
import org.opencb.opencga.core.models.variant.VariantStorageMetadataSynchronizeParams;
import org.opencb.opencga.core.models.variant.VariantStudyDeleteParams;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*  
*/
/**
 * This class contains methods for the Operations - Variant Storage command line.
 *    PATH: /{apiVersion}/operation
 */
public class OperationsVariantStorageCommandExecutor extends OpencgaCommandExecutor {

    public OperationsVariantStorageCommandOptions operationsVariantStorageCommandOptions;

    public OperationsVariantStorageCommandExecutor(OperationsVariantStorageCommandOptions operationsVariantStorageCommandOptions) throws CatalogAuthenticationException {
        super(operationsVariantStorageCommandOptions.commonCommandOptions);
        this.operationsVariantStorageCommandOptions = operationsVariantStorageCommandOptions;
    }

    @Override
    public void execute() throws Exception {

        logger.debug("Executing Operations - Variant Storage command line");

        String subCommandString = getParsedSubCommand(operationsVariantStorageCommandOptions.jCommander);

        RestResponse queryResponse = null;

        switch (subCommandString) {
            case "cellbase-configure":
                queryResponse = configureCellbase();
                break;
            case "variant-aggregate":
                queryResponse = aggregateVariant();
                break;
            case "variant-annotation-delete":
                queryResponse = deleteVariantAnnotation();
                break;
            case "variant-annotation-index":
                queryResponse = indexVariantAnnotation();
                break;
            case "variant-annotation-save":
                queryResponse = saveVariantAnnotation();
                break;
            case "variant-configure":
                queryResponse = configureVariant();
                break;
            case "variant-delete":
                queryResponse = deleteVariant();
                break;
            case "variant-family-aggregate":
                queryResponse = aggregateVariantFamily();
                break;
            case "variant-family-index":
                queryResponse = indexVariantFamily();
                break;
            case "variant-index":
                queryResponse = indexVariant();
                break;
            case "variant-index-launcher":
                queryResponse = launcherVariantIndex();
                break;
            case "variant-julie-run":
                queryResponse = runVariantJulie();
                break;
            case "variant-metadata-repair":
                queryResponse = repairVariantMetadata();
                break;
            case "variant-metadata-synchronize":
                queryResponse = synchronizeVariantMetadata();
                break;
            case "variant-prune":
                queryResponse = pruneVariant();
                break;
            case "variant-sample-delete":
                queryResponse = deleteVariantSample();
                break;
            case "variant-sample-index":
                queryResponse = indexVariantSample();
                break;
            case "variant-sample-index-configure":
                queryResponse = variantSampleIndexConfigure();
                break;
            case "variant-score-delete":
                queryResponse = deleteVariantScore();
                break;
            case "variant-score-index":
                queryResponse = indexVariantScore();
                break;
            case "variant-secondary-annotation-index":
                queryResponse = variantSecondaryAnnotationIndex();
                break;
            case "variant-secondary-sample-index":
                queryResponse = variantSecondarySampleIndex();
                break;
            case "configure-variant-secondary-sample-index":
                queryResponse = configureVariantSecondarySampleIndex();
                break;
            case "variant-secondary-index":
                queryResponse = secondaryIndexVariant();
                break;
            case "variant-secondary-index-delete":
                queryResponse = deleteVariantSecondaryIndex();
                break;
            case "variant-stats-delete":
                queryResponse = deleteVariantStats();
                break;
            case "variant-stats-index":
                queryResponse = indexVariantStats();
                break;
            case "variant-study-delete":
                queryResponse = deleteVariantStudy();
                break;
            default:
                logger.error("Subcommand not valid");
                break;
        }

        createOutput(queryResponse);

    }

    private RestResponse<Job> configureCellbase() throws Exception {
        logger.debug("Executing configureCellbase in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.ConfigureCellbaseCommandOptions commandOptions = operationsVariantStorageCommandOptions.configureCellbaseCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotNull("annotationUpdate", commandOptions.annotationUpdate);
        queryParams.putIfNotEmpty("annotationSaveId", commandOptions.annotationSaveId);


        CellBaseConfiguration cellBaseConfiguration = null;
        if (commandOptions.jsonDataModel) {
            cellBaseConfiguration = new CellBaseConfiguration();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(cellBaseConfiguration));
            return res;
        } else if (commandOptions.jsonFile != null) {
            cellBaseConfiguration = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), CellBaseConfiguration.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "url",commandOptions.url, true);
            putNestedIfNotEmpty(beanParams, "version",commandOptions.version, true);
            putNestedIfNotEmpty(beanParams, "dataRelease",commandOptions.dataRelease, true);
            putNestedIfNotEmpty(beanParams, "token",commandOptions.token, true);

            cellBaseConfiguration = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), CellBaseConfiguration.class);
        }
        return openCGAClient.getVariantOperationClient().configureCellbase(cellBaseConfiguration, queryParams);
    }

    private RestResponse<Job> aggregateVariant() throws Exception {
        logger.debug("Executing aggregateVariant in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.AggregateVariantCommandOptions commandOptions = operationsVariantStorageCommandOptions.aggregateVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantAggregateParams variantAggregateParams = null;
        if (commandOptions.jsonDataModel) {
            variantAggregateParams = new VariantAggregateParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantAggregateParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantAggregateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantAggregateParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotNull(beanParams, "overwrite",commandOptions.overwrite, true);
            putNestedIfNotNull(beanParams, "resume",commandOptions.resume, true);

            variantAggregateParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), VariantAggregateParams.class);
        }
        return openCGAClient.getVariantOperationClient().aggregateVariant(variantAggregateParams, queryParams);
    }

    private RestResponse<Job> deleteVariantAnnotation() throws Exception {
        logger.debug("Executing deleteVariantAnnotation in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.DeleteVariantAnnotationCommandOptions commandOptions = operationsVariantStorageCommandOptions.deleteVariantAnnotationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("annotationId", commandOptions.annotationId);

        return openCGAClient.getVariantOperationClient().deleteVariantAnnotation(queryParams);
    }

    private RestResponse<Job> indexVariantAnnotation() throws Exception {
        logger.debug("Executing indexVariantAnnotation in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.IndexVariantAnnotationCommandOptions commandOptions = operationsVariantStorageCommandOptions.indexVariantAnnotationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantAnnotationIndexParams variantAnnotationIndexParams = null;
        if (commandOptions.jsonDataModel) {
            variantAnnotationIndexParams = new VariantAnnotationIndexParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantAnnotationIndexParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantAnnotationIndexParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantAnnotationIndexParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "outdir",commandOptions.outdir, true);
            putNestedIfNotEmpty(beanParams, "outputFileName",commandOptions.outputFileName, true);
            putNestedIfNotEmpty(beanParams, "annotator",commandOptions.annotator, true);
            putNestedIfNotNull(beanParams, "overwriteAnnotations",commandOptions.overwriteAnnotations, true);
            putNestedIfNotEmpty(beanParams, "region",commandOptions.region, true);
            putNestedIfNotNull(beanParams, "create",commandOptions.create, true);
            putNestedIfNotEmpty(beanParams, "load",commandOptions.load, true);
            putNestedIfNotEmpty(beanParams, "customName",commandOptions.customName, true);
            putNestedIfNotNull(beanParams, "sampleIndexAnnotation",commandOptions.sampleIndexAnnotation, true);

            variantAnnotationIndexParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), VariantAnnotationIndexParams.class);
        }
        return openCGAClient.getVariantOperationClient().indexVariantAnnotation(variantAnnotationIndexParams, queryParams);
    }

    private RestResponse<Job> saveVariantAnnotation() throws Exception {
        logger.debug("Executing saveVariantAnnotation in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.SaveVariantAnnotationCommandOptions commandOptions = operationsVariantStorageCommandOptions.saveVariantAnnotationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("project", commandOptions.project);


        VariantAnnotationSaveParams variantAnnotationSaveParams = null;
        if (commandOptions.jsonDataModel) {
            variantAnnotationSaveParams = new VariantAnnotationSaveParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantAnnotationSaveParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantAnnotationSaveParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantAnnotationSaveParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "annotationId",commandOptions.annotationId, true);

            variantAnnotationSaveParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), VariantAnnotationSaveParams.class);
        }
        return openCGAClient.getVariantOperationClient().saveVariantAnnotation(variantAnnotationSaveParams, queryParams);
    }

    private RestResponse<ObjectMap> configureVariant() throws Exception {
        logger.debug("Executing configureVariant in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.ConfigureVariantCommandOptions commandOptions = operationsVariantStorageCommandOptions.configureVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantConfigureParams variantConfigureParams = null;
        if (commandOptions.jsonDataModel) {
            variantConfigureParams = new VariantConfigureParams();
            RestResponse<ObjectMap> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantConfigureParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantConfigureParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantConfigureParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotNull(beanParams, "configuration",commandOptions.configuration, true);

            variantConfigureParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), VariantConfigureParams.class);
        }
        return openCGAClient.getVariantOperationClient().configureVariant(variantConfigureParams, queryParams);
    }

    private RestResponse<Job> deleteVariant() throws Exception {
        logger.debug("Executing deleteVariant in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.DeleteVariantCommandOptions commandOptions = operationsVariantStorageCommandOptions.deleteVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantFileDeleteParams variantFileDeleteParams = null;
        if (commandOptions.jsonDataModel) {
            variantFileDeleteParams = new VariantFileDeleteParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantFileDeleteParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantFileDeleteParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantFileDeleteParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotNull(beanParams, "file",commandOptions.file, true);
            putNestedIfNotNull(beanParams, "resume",commandOptions.resume, true);

            variantFileDeleteParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), VariantFileDeleteParams.class);
        }
        return openCGAClient.getVariantOperationClient().deleteVariant(variantFileDeleteParams, queryParams);
    }

    private RestResponse<Job> aggregateVariantFamily() throws Exception {
        logger.debug("Executing aggregateVariantFamily in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.AggregateVariantFamilyCommandOptions commandOptions = operationsVariantStorageCommandOptions.aggregateVariantFamilyCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantAggregateFamilyParams variantAggregateFamilyParams = null;
        if (commandOptions.jsonDataModel) {
            variantAggregateFamilyParams = new VariantAggregateFamilyParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantAggregateFamilyParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantAggregateFamilyParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantAggregateFamilyParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotNull(beanParams, "samples",commandOptions.samples, true);
            putNestedIfNotEmpty(beanParams, "gapsGenotype",commandOptions.gapsGenotype, true);
            putNestedIfNotNull(beanParams, "resume",commandOptions.resume, true);

            variantAggregateFamilyParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), VariantAggregateFamilyParams.class);
        }
        return openCGAClient.getVariantOperationClient().aggregateVariantFamily(variantAggregateFamilyParams, queryParams);
    }

    private RestResponse<Job> indexVariantFamily() throws Exception {
        logger.debug("Executing indexVariantFamily in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.IndexVariantFamilyCommandOptions commandOptions = operationsVariantStorageCommandOptions.indexVariantFamilyCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantFamilyIndexParams variantFamilyIndexParams = null;
        if (commandOptions.jsonDataModel) {
            variantFamilyIndexParams = new VariantFamilyIndexParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantFamilyIndexParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantFamilyIndexParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantFamilyIndexParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotNull(beanParams, "family",commandOptions.family, true);
            putNestedIfNotNull(beanParams, "overwrite",commandOptions.overwrite, true);
            putNestedIfNotNull(beanParams, "updateIndex",commandOptions.updateIndex, true);
            putNestedIfNotNull(beanParams, "skipIncompleteFamilies",commandOptions.skipIncompleteFamilies, true);

            variantFamilyIndexParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), VariantFamilyIndexParams.class);
        }
        return openCGAClient.getVariantOperationClient().indexVariantFamily(variantFamilyIndexParams, queryParams);
    }

    private RestResponse<Job> indexVariant() throws Exception {
        logger.debug("Executing indexVariant in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.IndexVariantCommandOptions commandOptions = operationsVariantStorageCommandOptions.indexVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantIndexParams variantIndexParams = null;
        if (commandOptions.jsonDataModel) {
            variantIndexParams = new VariantIndexParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantIndexParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantIndexParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantIndexParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "file",commandOptions.file, true);
            putNestedIfNotNull(beanParams, "resume",commandOptions.resume, true);
            putNestedIfNotEmpty(beanParams, "outdir",commandOptions.outdir, true);
            putNestedIfNotNull(beanParams, "transform",commandOptions.transform, true);
            putNestedIfNotNull(beanParams, "gvcf",commandOptions.gvcf, true);
            putNestedIfNotNull(beanParams, "normalizationSkip",commandOptions.normalizationSkip, true);
            putNestedIfNotEmpty(beanParams, "referenceGenome",commandOptions.referenceGenome, true);
            putNestedIfNotEmpty(beanParams, "failOnMalformedLines",commandOptions.failOnMalformedLines, true);
            putNestedIfNotNull(beanParams, "family",commandOptions.family, true);
            putNestedIfNotNull(beanParams, "somatic",commandOptions.somatic, true);
            putNestedIfNotNull(beanParams, "load",commandOptions.load, true);
            putNestedIfNotEmpty(beanParams, "loadSplitData",commandOptions.loadSplitData, true);
            putNestedIfNotNull(beanParams, "loadMultiFileData",commandOptions.loadMultiFileData, true);
            putNestedIfNotEmpty(beanParams, "loadSampleIndex",commandOptions.loadSampleIndex, true);
            putNestedIfNotEmpty(beanParams, "loadArchive",commandOptions.loadArchive, true);
            putNestedIfNotEmpty(beanParams, "loadHomRef",commandOptions.loadHomRef, true);
            putNestedIfNotEmpty(beanParams, "postLoadCheck",commandOptions.postLoadCheck, true);
            putNestedIfNotEmpty(beanParams, "includeGenotypes",commandOptions.includeGenotypes, true);
            putNestedIfNotEmpty(beanParams, "includeSampleData",commandOptions.includeSampleData, true);
            putNestedIfNotEmpty(beanParams, "merge",commandOptions.merge, true);
            putNestedIfNotEmpty(beanParams, "deduplicationPolicy",commandOptions.deduplicationPolicy, true);
            putNestedIfNotNull(beanParams, "calculateStats",commandOptions.calculateStats, true);
            putNestedIfNotNull(beanParams, "aggregated",commandOptions.aggregated, true);
            putNestedIfNotEmpty(beanParams, "aggregationMappingFile",commandOptions.aggregationMappingFile, true);
            putNestedIfNotNull(beanParams, "annotate",commandOptions.annotate, true);
            putNestedIfNotEmpty(beanParams, "annotator",commandOptions.annotator, true);
            putNestedIfNotNull(beanParams, "overwriteAnnotations",commandOptions.overwriteAnnotations, true);
            putNestedIfNotNull(beanParams, "indexSearch",commandOptions.indexSearch, true);
            putNestedIfNotNull(beanParams, "skipIndexedFiles",commandOptions.skipIndexedFiles, true);

            variantIndexParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), VariantIndexParams.class);
        }
        return openCGAClient.getVariantOperationClient().indexVariant(variantIndexParams, queryParams);
    }

    private RestResponse<Job> launcherVariantIndex() throws Exception {
        logger.debug("Executing launcherVariantIndex in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.LauncherVariantIndexCommandOptions commandOptions = operationsVariantStorageCommandOptions.launcherVariantIndexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantFileIndexJobLauncherParams variantFileIndexJobLauncherParams = null;
        if (commandOptions.jsonDataModel) {
            variantFileIndexJobLauncherParams = new VariantFileIndexJobLauncherParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantFileIndexJobLauncherParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantFileIndexJobLauncherParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantFileIndexJobLauncherParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "name",commandOptions.name, true);
            putNestedIfNotEmpty(beanParams, "directory",commandOptions.directory, true);
            putNestedIfNotNull(beanParams, "resumeFailed",commandOptions.resumeFailed, true);
            putNestedIfNotNull(beanParams, "ignoreFailed",commandOptions.ignoreFailed, true);
            putNestedIfNotNull(beanParams, "maxJobs",commandOptions.maxJobs, true);
            putNestedIfNotEmpty(beanParams, "indexParams.file",commandOptions.indexParamsFile, true);
            putNestedIfNotNull(beanParams, "indexParams.resume",commandOptions.indexParamsResume, true);
            putNestedIfNotEmpty(beanParams, "indexParams.outdir",commandOptions.indexParamsOutdir, true);
            putNestedIfNotNull(beanParams, "indexParams.transform",commandOptions.indexParamsTransform, true);
            putNestedIfNotNull(beanParams, "indexParams.gvcf",commandOptions.indexParamsGvcf, true);
            putNestedIfNotNull(beanParams, "indexParams.normalizationSkip",commandOptions.indexParamsNormalizationSkip, true);
            putNestedIfNotEmpty(beanParams, "indexParams.referenceGenome",commandOptions.indexParamsReferenceGenome, true);
            putNestedIfNotEmpty(beanParams, "indexParams.failOnMalformedLines",commandOptions.indexParamsFailOnMalformedLines, true);
            putNestedIfNotNull(beanParams, "indexParams.family",commandOptions.indexParamsFamily, true);
            putNestedIfNotNull(beanParams, "indexParams.somatic",commandOptions.indexParamsSomatic, true);
            putNestedIfNotNull(beanParams, "indexParams.load",commandOptions.indexParamsLoad, true);
            putNestedIfNotEmpty(beanParams, "indexParams.loadSplitData",commandOptions.indexParamsLoadSplitData, true);
            putNestedIfNotNull(beanParams, "indexParams.loadMultiFileData",commandOptions.indexParamsLoadMultiFileData, true);
            putNestedIfNotEmpty(beanParams, "indexParams.loadSampleIndex",commandOptions.indexParamsLoadSampleIndex, true);
            putNestedIfNotEmpty(beanParams, "indexParams.loadArchive",commandOptions.indexParamsLoadArchive, true);
            putNestedIfNotEmpty(beanParams, "indexParams.loadHomRef",commandOptions.indexParamsLoadHomRef, true);
            putNestedIfNotEmpty(beanParams, "indexParams.postLoadCheck",commandOptions.indexParamsPostLoadCheck, true);
            putNestedIfNotEmpty(beanParams, "indexParams.includeGenotypes",commandOptions.indexParamsIncludeGenotypes, true);
            putNestedIfNotEmpty(beanParams, "indexParams.includeSampleData",commandOptions.indexParamsIncludeSampleData, true);
            putNestedIfNotEmpty(beanParams, "indexParams.merge",commandOptions.indexParamsMerge, true);
            putNestedIfNotEmpty(beanParams, "indexParams.deduplicationPolicy",commandOptions.indexParamsDeduplicationPolicy, true);
            putNestedIfNotNull(beanParams, "indexParams.calculateStats",commandOptions.indexParamsCalculateStats, true);
            putNestedIfNotNull(beanParams, "indexParams.aggregated",commandOptions.indexParamsAggregated, true);
            putNestedIfNotEmpty(beanParams, "indexParams.aggregationMappingFile",commandOptions.indexParamsAggregationMappingFile, true);
            putNestedIfNotNull(beanParams, "indexParams.annotate",commandOptions.indexParamsAnnotate, true);
            putNestedIfNotEmpty(beanParams, "indexParams.annotator",commandOptions.indexParamsAnnotator, true);
            putNestedIfNotNull(beanParams, "indexParams.overwriteAnnotations",commandOptions.indexParamsOverwriteAnnotations, true);
            putNestedIfNotNull(beanParams, "indexParams.indexSearch",commandOptions.indexParamsIndexSearch, true);
            putNestedIfNotNull(beanParams, "indexParams.skipIndexedFiles",commandOptions.indexParamsSkipIndexedFiles, true);

            variantFileIndexJobLauncherParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), VariantFileIndexJobLauncherParams.class);
        }
        return openCGAClient.getVariantOperationClient().launcherVariantIndex(variantFileIndexJobLauncherParams, queryParams);
    }

    private RestResponse<Job> runVariantJulie() throws Exception {
        logger.debug("Executing runVariantJulie in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.RunVariantJulieCommandOptions commandOptions = operationsVariantStorageCommandOptions.runVariantJulieCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("project", commandOptions.project);


        JulieParams julieParams = null;
        if (commandOptions.jsonDataModel) {
            julieParams = new JulieParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(julieParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            julieParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), JulieParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotNull(beanParams, "cohorts",commandOptions.cohorts, true);
            putNestedIfNotEmpty(beanParams, "region",commandOptions.region, true);
            putNestedIfNotNull(beanParams, "overwrite",commandOptions.overwrite, true);

            julieParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), JulieParams.class);
        }
        return openCGAClient.getVariantOperationClient().runVariantJulie(julieParams, queryParams);
    }

    private RestResponse<Job> repairVariantMetadata() throws Exception {
        logger.debug("Executing repairVariantMetadata in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.RepairVariantMetadataCommandOptions commandOptions = operationsVariantStorageCommandOptions.repairVariantMetadataCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);


        VariantStorageMetadataRepairToolParams variantStorageMetadataRepairToolParams = null;
        if (commandOptions.jsonDataModel) {
            variantStorageMetadataRepairToolParams = new VariantStorageMetadataRepairToolParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantStorageMetadataRepairToolParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantStorageMetadataRepairToolParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantStorageMetadataRepairToolParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotNull(beanParams, "studies",commandOptions.studies, true);
            putNestedIfNotNull(beanParams, "samplesBatchSize",commandOptions.samplesBatchSize, true);

            variantStorageMetadataRepairToolParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), VariantStorageMetadataRepairToolParams.class);
        }
        return openCGAClient.getVariantOperationClient().repairVariantMetadata(variantStorageMetadataRepairToolParams, queryParams);
    }

    private RestResponse<Job> synchronizeVariantMetadata() throws Exception {
        logger.debug("Executing synchronizeVariantMetadata in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.SynchronizeVariantMetadataCommandOptions commandOptions = operationsVariantStorageCommandOptions.synchronizeVariantMetadataCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantStorageMetadataSynchronizeParams variantStorageMetadataSynchronizeParams = null;
        if (commandOptions.jsonDataModel) {
            variantStorageMetadataSynchronizeParams = new VariantStorageMetadataSynchronizeParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantStorageMetadataSynchronizeParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantStorageMetadataSynchronizeParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantStorageMetadataSynchronizeParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "study",commandOptions.bodyStudy, true);
            putNestedIfNotNull(beanParams, "files",commandOptions.files, true);

            variantStorageMetadataSynchronizeParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), VariantStorageMetadataSynchronizeParams.class);
        }
        return openCGAClient.getVariantOperationClient().synchronizeVariantMetadata(variantStorageMetadataSynchronizeParams, queryParams);
    }

    private RestResponse<Job> pruneVariant() throws Exception {
        logger.debug("Executing pruneVariant in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.PruneVariantCommandOptions commandOptions = operationsVariantStorageCommandOptions.pruneVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);


        VariantPruneParams variantPruneParams = null;
        if (commandOptions.jsonDataModel) {
            variantPruneParams = new VariantPruneParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantPruneParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantPruneParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantPruneParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "project",commandOptions.project, true);
            putNestedIfNotNull(beanParams, "dryRun",commandOptions.dryRun, true);
            putNestedIfNotNull(beanParams, "resume",commandOptions.resume, true);

            variantPruneParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), VariantPruneParams.class);
        }
        return openCGAClient.getVariantOperationClient().pruneVariant(variantPruneParams, queryParams);
    }

    private RestResponse<Job> deleteVariantSample() throws Exception {
        logger.debug("Executing deleteVariantSample in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.DeleteVariantSampleCommandOptions commandOptions = operationsVariantStorageCommandOptions.deleteVariantSampleCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantSampleDeleteParams variantSampleDeleteParams = null;
        if (commandOptions.jsonDataModel) {
            variantSampleDeleteParams = new VariantSampleDeleteParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantSampleDeleteParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantSampleDeleteParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantSampleDeleteParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotNull(beanParams, "sample",commandOptions.sample, true);
            putNestedIfNotNull(beanParams, "force",commandOptions.force, true);
            putNestedIfNotNull(beanParams, "resume",commandOptions.resume, true);

            variantSampleDeleteParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), VariantSampleDeleteParams.class);
        }
        return openCGAClient.getVariantOperationClient().deleteVariantSample(variantSampleDeleteParams, queryParams);
    }

    private RestResponse<Job> indexVariantSample() throws Exception {
        logger.debug("Executing indexVariantSample in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.IndexVariantSampleCommandOptions commandOptions = operationsVariantStorageCommandOptions.indexVariantSampleCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantSecondarySampleIndexParams variantSecondarySampleIndexParams = null;
        if (commandOptions.jsonDataModel) {
            variantSecondarySampleIndexParams = new VariantSecondarySampleIndexParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantSecondarySampleIndexParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantSecondarySampleIndexParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantSecondarySampleIndexParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotNull(beanParams, "sample",commandOptions.sample, true);
            putNestedIfNotNull(beanParams, "buildIndex",commandOptions.buildIndex, true);
            putNestedIfNotNull(beanParams, "annotate",commandOptions.annotate, true);
            putNestedIfNotNull(beanParams, "familyIndex",commandOptions.familyIndex, true);
            putNestedIfNotNull(beanParams, "overwrite",commandOptions.overwrite, true);

            variantSecondarySampleIndexParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), VariantSecondarySampleIndexParams.class);
        }
        return openCGAClient.getVariantOperationClient().indexVariantSample(variantSecondarySampleIndexParams, queryParams);
    }

    private RestResponse<Job> variantSampleIndexConfigure() throws Exception {
        logger.debug("Executing variantSampleIndexConfigure in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.VariantSampleIndexConfigureCommandOptions commandOptions = operationsVariantStorageCommandOptions.variantSampleIndexConfigureCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("skipRebuild", commandOptions.skipRebuild);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        SampleIndexConfiguration sampleIndexConfiguration = null;
        if (commandOptions.jsonDataModel) {
            sampleIndexConfiguration = new SampleIndexConfiguration();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(sampleIndexConfiguration));
            return res;
        } else if (commandOptions.jsonFile != null) {
            sampleIndexConfiguration = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), SampleIndexConfiguration.class);
        }
        return openCGAClient.getVariantOperationClient().variantSampleIndexConfigure(sampleIndexConfiguration, queryParams);
    }

    private RestResponse<Job> deleteVariantScore() throws Exception {
        logger.debug("Executing deleteVariantScore in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.DeleteVariantScoreCommandOptions commandOptions = operationsVariantStorageCommandOptions.deleteVariantScoreCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotNull("resume", commandOptions.resume);
        queryParams.putIfNotNull("force", commandOptions.force);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantOperationClient().deleteVariantScore(queryParams);
    }

    private RestResponse<Job> indexVariantScore() throws Exception {
        logger.debug("Executing indexVariantScore in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.IndexVariantScoreCommandOptions commandOptions = operationsVariantStorageCommandOptions.indexVariantScoreCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantScoreIndexParams variantScoreIndexParams = null;
        if (commandOptions.jsonDataModel) {
            variantScoreIndexParams = new VariantScoreIndexParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantScoreIndexParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantScoreIndexParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantScoreIndexParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "scoreName",commandOptions.scoreName, true);
            putNestedIfNotEmpty(beanParams, "cohort1",commandOptions.cohort1, true);
            putNestedIfNotEmpty(beanParams, "cohort2",commandOptions.cohort2, true);
            putNestedIfNotEmpty(beanParams, "input",commandOptions.input, true);
            putNestedIfNotEmpty(beanParams, "inputColumns",commandOptions.inputColumns, true);
            putNestedIfNotNull(beanParams, "resume",commandOptions.resume, true);

            variantScoreIndexParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), VariantScoreIndexParams.class);
        }
        return openCGAClient.getVariantOperationClient().indexVariantScore(variantScoreIndexParams, queryParams);
    }

    private RestResponse<Job> variantSecondaryAnnotationIndex() throws Exception {
        logger.debug("Executing variantSecondaryAnnotationIndex in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.VariantSecondaryAnnotationIndexCommandOptions commandOptions = operationsVariantStorageCommandOptions.variantSecondaryAnnotationIndexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantSecondaryAnnotationIndexParams variantSecondaryAnnotationIndexParams = null;
        if (commandOptions.jsonDataModel) {
            variantSecondaryAnnotationIndexParams = new VariantSecondaryAnnotationIndexParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantSecondaryAnnotationIndexParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantSecondaryAnnotationIndexParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantSecondaryAnnotationIndexParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "region",commandOptions.region, true);
            putNestedIfNotNull(beanParams, "sample",commandOptions.sample, true);
            putNestedIfNotNull(beanParams, "overwrite",commandOptions.overwrite, true);

            variantSecondaryAnnotationIndexParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), VariantSecondaryAnnotationIndexParams.class);
        }
        return openCGAClient.getVariantOperationClient().variantSecondaryAnnotationIndex(variantSecondaryAnnotationIndexParams, queryParams);
    }

    private RestResponse<Job> variantSecondarySampleIndex() throws Exception {
        logger.debug("Executing variantSecondarySampleIndex in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.VariantSecondarySampleIndexCommandOptions commandOptions = operationsVariantStorageCommandOptions.variantSecondarySampleIndexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantSecondarySampleIndexParams variantSecondarySampleIndexParams = null;
        if (commandOptions.jsonDataModel) {
            variantSecondarySampleIndexParams = new VariantSecondarySampleIndexParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantSecondarySampleIndexParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantSecondarySampleIndexParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantSecondarySampleIndexParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotNull(beanParams, "sample",commandOptions.sample, true);
            putNestedIfNotNull(beanParams, "buildIndex",commandOptions.buildIndex, true);
            putNestedIfNotNull(beanParams, "annotate",commandOptions.annotate, true);
            putNestedIfNotNull(beanParams, "familyIndex",commandOptions.familyIndex, true);
            putNestedIfNotNull(beanParams, "overwrite",commandOptions.overwrite, true);

            variantSecondarySampleIndexParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), VariantSecondarySampleIndexParams.class);
        }
        return openCGAClient.getVariantOperationClient().variantSecondarySampleIndex(variantSecondarySampleIndexParams, queryParams);
    }

    private RestResponse<Job> configureVariantSecondarySampleIndex() throws Exception {
        logger.debug("Executing configureVariantSecondarySampleIndex in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.ConfigureVariantSecondarySampleIndexCommandOptions commandOptions = operationsVariantStorageCommandOptions.configureVariantSecondarySampleIndexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("skipRebuild", commandOptions.skipRebuild);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        SampleIndexConfiguration sampleIndexConfiguration = null;
        if (commandOptions.jsonDataModel) {
            sampleIndexConfiguration = new SampleIndexConfiguration();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(sampleIndexConfiguration));
            return res;
        } else if (commandOptions.jsonFile != null) {
            sampleIndexConfiguration = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), SampleIndexConfiguration.class);
        }
        return openCGAClient.getVariantOperationClient().configureVariantSecondarySampleIndex(sampleIndexConfiguration, queryParams);
    }

    private RestResponse<Job> secondaryIndexVariant() throws Exception {
        logger.debug("Executing secondaryIndexVariant in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.SecondaryIndexVariantCommandOptions commandOptions = operationsVariantStorageCommandOptions.secondaryIndexVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantSecondaryAnnotationIndexParams variantSecondaryAnnotationIndexParams = null;
        if (commandOptions.jsonDataModel) {
            variantSecondaryAnnotationIndexParams = new VariantSecondaryAnnotationIndexParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantSecondaryAnnotationIndexParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantSecondaryAnnotationIndexParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantSecondaryAnnotationIndexParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotEmpty(beanParams, "region",commandOptions.region, true);
            putNestedIfNotNull(beanParams, "sample",commandOptions.sample, true);
            putNestedIfNotNull(beanParams, "overwrite",commandOptions.overwrite, true);

            variantSecondaryAnnotationIndexParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), VariantSecondaryAnnotationIndexParams.class);
        }
        return openCGAClient.getVariantOperationClient().secondaryIndexVariant(variantSecondaryAnnotationIndexParams, queryParams);
    }

    private RestResponse<Job> deleteVariantSecondaryIndex() throws Exception {
        logger.debug("Executing deleteVariantSecondaryIndex in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.DeleteVariantSecondaryIndexCommandOptions commandOptions = operationsVariantStorageCommandOptions.deleteVariantSecondaryIndexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("samples", commandOptions.samples);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantOperationClient().deleteVariantSecondaryIndex(queryParams);
    }

    private RestResponse<Job> deleteVariantStats() throws Exception {
        logger.debug("Executing deleteVariantStats in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.DeleteVariantStatsCommandOptions commandOptions = operationsVariantStorageCommandOptions.deleteVariantStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantStatsDeleteParams variantStatsDeleteParams = null;
        if (commandOptions.jsonDataModel) {
            variantStatsDeleteParams = new VariantStatsDeleteParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantStatsDeleteParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantStatsDeleteParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantStatsDeleteParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotNull(beanParams, "cohort",commandOptions.cohort, true);
            putNestedIfNotNull(beanParams, "force",commandOptions.force, true);

            variantStatsDeleteParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), VariantStatsDeleteParams.class);
        }
        return openCGAClient.getVariantOperationClient().deleteVariantStats(variantStatsDeleteParams, queryParams);
    }

    private RestResponse<Job> indexVariantStats() throws Exception {
        logger.debug("Executing indexVariantStats in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.IndexVariantStatsCommandOptions commandOptions = operationsVariantStorageCommandOptions.indexVariantStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantStatsIndexParams variantStatsIndexParams = null;
        if (commandOptions.jsonDataModel) {
            variantStatsIndexParams = new VariantStatsIndexParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantStatsIndexParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantStatsIndexParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantStatsIndexParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotNull(beanParams, "cohort",commandOptions.cohort, true);
            putNestedIfNotEmpty(beanParams, "region",commandOptions.region, true);
            putNestedIfNotNull(beanParams, "overwriteStats",commandOptions.overwriteStats, true);
            putNestedIfNotNull(beanParams, "resume",commandOptions.resume, true);
            putNestedIfNotNull(beanParams, "aggregated",commandOptions.aggregated, true);
            putNestedIfNotEmpty(beanParams, "aggregationMappingFile",commandOptions.aggregationMappingFile, true);

            variantStatsIndexParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), VariantStatsIndexParams.class);
        }
        return openCGAClient.getVariantOperationClient().indexVariantStats(variantStatsIndexParams, queryParams);
    }

    private RestResponse<Job> deleteVariantStudy() throws Exception {
        logger.debug("Executing deleteVariantStudy in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.DeleteVariantStudyCommandOptions commandOptions = operationsVariantStorageCommandOptions.deleteVariantStudyCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantStudyDeleteParams variantStudyDeleteParams = null;
        if (commandOptions.jsonDataModel) {
            variantStudyDeleteParams = new VariantStudyDeleteParams();
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantStudyDeleteParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantStudyDeleteParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantStudyDeleteParams.class);
        } else {
            ObjectMap beanParams = new ObjectMap();
            putNestedIfNotNull(beanParams, "resume",commandOptions.resume, true);

            variantStudyDeleteParams = JacksonUtils.getDefaultObjectMapper().copy()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true)
                    .readValue(beanParams.toJson(), VariantStudyDeleteParams.class);
        }
        return openCGAClient.getVariantOperationClient().deleteVariantStudy(variantStudyDeleteParams, queryParams);
    }
}