package org.opencb.opencga.app.cli.main.executors;

import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.app.cli.main.*;
import org.opencb.opencga.core.response.RestResponse;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.commons.datastore.core.ObjectMap;

import org.opencb.opencga.catalog.exceptions.CatalogAuthenticationException;
import org.opencb.opencga.core.common.JacksonUtils;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.List;
import java.util.HashMap;
import org.opencb.opencga.core.response.QueryType;
import org.opencb.commons.utils.PrintUtils;

import org.opencb.opencga.app.cli.main.options.OperationsVariantStorageCommandOptions;

import java.lang.Object;
import org.opencb.biodata.models.variant.metadata.Aggregation;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.opencga.core.common.YesNoAuto;
import org.opencb.opencga.core.config.storage.CellBaseConfiguration;
import org.opencb.opencga.core.config.storage.SampleIndexConfiguration;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.opencga.core.models.operations.variant.JulieParams;
import org.opencb.opencga.core.models.operations.variant.VariantAggregateFamilyParams;
import org.opencb.opencga.core.models.operations.variant.VariantAggregateParams;
import org.opencb.opencga.core.models.operations.variant.VariantAnnotationIndexParams;
import org.opencb.opencga.core.models.operations.variant.VariantAnnotationSaveParams;
import org.opencb.opencga.core.models.operations.variant.VariantFamilyIndexParams;
import org.opencb.opencga.core.models.operations.variant.VariantSampleIndexParams;
import org.opencb.opencga.core.models.operations.variant.VariantScoreIndexParams;
import org.opencb.opencga.core.models.operations.variant.VariantSecondaryIndexParams;
import org.opencb.opencga.core.models.operations.variant.VariantStatsDeleteParams;
import org.opencb.opencga.core.models.operations.variant.VariantStatsIndexParams;
import org.opencb.opencga.core.models.operations.variant.VariantStorageMetadataRepairToolParams;
import org.opencb.opencga.core.models.variant.VariantConfigureParams;
import org.opencb.opencga.core.models.variant.VariantFileDeleteParams;
import org.opencb.opencga.core.models.variant.VariantFileIndexJobLauncherParams;
import org.opencb.opencga.core.models.variant.VariantIndexParams;
import org.opencb.opencga.core.models.variant.VariantPruneParams;
import org.opencb.opencga.core.models.variant.VariantSampleDeleteParams;
import org.opencb.opencga.core.models.variant.VariantStorageMetadataSynchronizeParams;
import org.opencb.opencga.core.models.variant.VariantStudyDeleteParams;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2022-07-22
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/


/**
 * This class contains methods for the Operations - Variant Storage command line.
 *    OpenCGA version: 2.3.2-SNAPSHOT
 *    PATH: /{apiVersion}/operation
 */
public class OperationsVariantStorageCommandExecutor extends OpencgaCommandExecutor {

    private OperationsVariantStorageCommandOptions operationsVariantStorageCommandOptions;

    public OperationsVariantStorageCommandExecutor(OperationsVariantStorageCommandOptions operationsVariantStorageCommandOptions) throws CatalogAuthenticationException {
        super(operationsVariantStorageCommandOptions.commonCommandOptions);
        this.operationsVariantStorageCommandOptions = operationsVariantStorageCommandOptions;
    }

    @Override
    public void execute() throws Exception {

        logger.debug("Executing Operations - Variant Storage command line");

        String subCommandString = getParsedSubCommand(operationsVariantStorageCommandOptions.jCommander);

        RestResponse queryResponse = null;

        switch (subCommandString) {
            case "cellbase-configure":
                queryResponse = configureCellbase();
                break;
            case "variant-aggregate":
                queryResponse = aggregateVariant();
                break;
            case "variant-annotation-delete":
                queryResponse = deleteVariantAnnotation();
                break;
            case "variant-annotation-index":
                queryResponse = indexVariantAnnotation();
                break;
            case "variant-annotation-save":
                queryResponse = saveVariantAnnotation();
                break;
            case "variant-configure":
                queryResponse = configureVariant();
                break;
            case "variant-delete":
                queryResponse = deleteVariant();
                break;
            case "variant-family-aggregate":
                queryResponse = aggregateVariantFamily();
                break;
            case "variant-family-index":
                queryResponse = indexVariantFamily();
                break;
            case "variant-index":
                queryResponse = indexVariant();
                break;
            case "variant-index-launcher":
                queryResponse = launcherVariantIndex();
                break;
            case "variant-julie-run":
                queryResponse = runVariantJulie();
                break;
            case "variant-metadata-repair":
                queryResponse = repairVariantMetadata();
                break;
            case "variant-metadata-synchronize":
                queryResponse = synchronizeVariantMetadata();
                break;
            case "variant-prune":
                queryResponse = pruneVariant();
                break;
            case "variant-sample-delete":
                queryResponse = deleteVariantSample();
                break;
            case "variant-sample-index":
                queryResponse = indexVariantSample();
                break;
            case "variant-sample-index-configure":
                queryResponse = variantSampleIndexConfigure();
                break;
            case "variant-score-delete":
                queryResponse = deleteVariantScore();
                break;
            case "variant-score-index":
                queryResponse = indexVariantScore();
                break;
            case "variant-secondary-annotation-index":
                queryResponse = variantSecondaryAnnotationIndex();
                break;
            case "variant-secondary-sample-index":
                queryResponse = variantSecondarySampleIndex();
                break;
            case "configure-variant-secondary-sample-index":
                queryResponse = configureVariantSecondarySampleIndex();
                break;
            case "variant-secondary-index":
                queryResponse = secondaryIndexVariant();
                break;
            case "variant-secondary-index-delete":
                queryResponse = deleteVariantSecondaryIndex();
                break;
            case "variant-stats-delete":
                queryResponse = deleteVariantStats();
                break;
            case "variant-stats-index":
                queryResponse = indexVariantStats();
                break;
            case "variant-study-delete":
                queryResponse = deleteVariantStudy();
                break;
            default:
                logger.error("Subcommand not valid");
                break;
        }

        createOutput(queryResponse);

    }

    private RestResponse<Job> configureCellbase() throws Exception {

        logger.debug("Executing configureCellbase in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.ConfigureCellbaseCommandOptions commandOptions = operationsVariantStorageCommandOptions.configureCellbaseCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotNull("annotationUpdate", commandOptions.annotationUpdate);
        queryParams.putIfNotEmpty("annotationSaveId", commandOptions.annotationSaveId);


        CellBaseConfiguration cellBaseConfiguration = new CellBaseConfiguration();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(cellBaseConfiguration));
            return res;
        } else if (commandOptions.jsonFile != null) {
            cellBaseConfiguration = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), CellBaseConfiguration.class);
        } else {
            cellBaseConfiguration.setUrl(commandOptions.url);
            cellBaseConfiguration.setVersion(commandOptions.version);
            //cellBaseConfiguration.setDatabase(commandOptions.database); // Unsupported param. FIXME 
            cellBaseConfiguration.setPreferred(commandOptions.preferred);

        }
        return openCGAClient.getVariantOperationClient().configureCellbase(cellBaseConfiguration, queryParams);
    }

    private RestResponse<Job> aggregateVariant() throws Exception {

        logger.debug("Executing aggregateVariant in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.AggregateVariantCommandOptions commandOptions = operationsVariantStorageCommandOptions.aggregateVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantAggregateParams variantAggregateParams = new VariantAggregateParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantAggregateParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantAggregateParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantAggregateParams.class);
        } else {

            if (commandOptions.overwrite != null) {
                variantAggregateParams.setOverwrite(commandOptions.overwrite);
            }
            if (commandOptions.resume != null) {
                variantAggregateParams.setResume(commandOptions.resume);
            }
        }
        return openCGAClient.getVariantOperationClient().aggregateVariant(variantAggregateParams, queryParams);
    }

    private RestResponse<Job> deleteVariantAnnotation() throws Exception {

        logger.debug("Executing deleteVariantAnnotation in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.DeleteVariantAnnotationCommandOptions commandOptions = operationsVariantStorageCommandOptions.deleteVariantAnnotationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("annotationId", commandOptions.annotationId);

        return openCGAClient.getVariantOperationClient().deleteVariantAnnotation(queryParams);
    }

    private RestResponse<Job> indexVariantAnnotation() throws Exception {

        logger.debug("Executing indexVariantAnnotation in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.IndexVariantAnnotationCommandOptions commandOptions = operationsVariantStorageCommandOptions.indexVariantAnnotationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantAnnotationIndexParams variantAnnotationIndexParams = new VariantAnnotationIndexParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantAnnotationIndexParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantAnnotationIndexParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantAnnotationIndexParams.class);
        } else {
            variantAnnotationIndexParams.setOutdir(commandOptions.outdir);
            variantAnnotationIndexParams.setOutputFileName(commandOptions.outputFileName);
            variantAnnotationIndexParams.setAnnotator(commandOptions.annotator);
            variantAnnotationIndexParams.setRegion(commandOptions.region);
            variantAnnotationIndexParams.setLoad(commandOptions.load);
            variantAnnotationIndexParams.setCustomName(commandOptions.customName);
            variantAnnotationIndexParams.setSampleIndexAnnotation(commandOptions.sampleIndexAnnotation == null ? null : YesNoAuto.valueOf(commandOptions.sampleIndexAnnotation));

            if (commandOptions.overwriteAnnotations != null) {
                variantAnnotationIndexParams.setOverwriteAnnotations(commandOptions.overwriteAnnotations);
            }
            if (commandOptions.create != null) {
                variantAnnotationIndexParams.setCreate(commandOptions.create);
            }
        }
        return openCGAClient.getVariantOperationClient().indexVariantAnnotation(variantAnnotationIndexParams, queryParams);
    }

    private RestResponse<Job> saveVariantAnnotation() throws Exception {

        logger.debug("Executing saveVariantAnnotation in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.SaveVariantAnnotationCommandOptions commandOptions = operationsVariantStorageCommandOptions.saveVariantAnnotationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("project", commandOptions.project);


        VariantAnnotationSaveParams variantAnnotationSaveParams = new VariantAnnotationSaveParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantAnnotationSaveParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantAnnotationSaveParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantAnnotationSaveParams.class);
        } else {
            variantAnnotationSaveParams.setAnnotationId(commandOptions.annotationId);

        }
        return openCGAClient.getVariantOperationClient().saveVariantAnnotation(variantAnnotationSaveParams, queryParams);
    }

    private RestResponse<ObjectMap> configureVariant() throws Exception {

        logger.debug("Executing configureVariant in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.ConfigureVariantCommandOptions commandOptions = operationsVariantStorageCommandOptions.configureVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantConfigureParams variantConfigureParams = new VariantConfigureParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<ObjectMap> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantConfigureParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantConfigureParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantConfigureParams.class);
        }
        return openCGAClient.getVariantOperationClient().configureVariant(variantConfigureParams, queryParams);
    }

    private RestResponse<Job> deleteVariant() throws Exception {

        logger.debug("Executing deleteVariant in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.DeleteVariantCommandOptions commandOptions = operationsVariantStorageCommandOptions.deleteVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantFileDeleteParams variantFileDeleteParams = new VariantFileDeleteParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantFileDeleteParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantFileDeleteParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantFileDeleteParams.class);
        } else {
            variantFileDeleteParams.setFile(splitWithTrim(commandOptions.file));

            if (commandOptions.resume != null) {
                variantFileDeleteParams.setResume(commandOptions.resume);
            }
        }
        return openCGAClient.getVariantOperationClient().deleteVariant(variantFileDeleteParams, queryParams);
    }

    private RestResponse<Job> aggregateVariantFamily() throws Exception {

        logger.debug("Executing aggregateVariantFamily in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.AggregateVariantFamilyCommandOptions commandOptions = operationsVariantStorageCommandOptions.aggregateVariantFamilyCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantAggregateFamilyParams variantAggregateFamilyParams = new VariantAggregateFamilyParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantAggregateFamilyParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantAggregateFamilyParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantAggregateFamilyParams.class);
        } else {
            variantAggregateFamilyParams.setSamples(splitWithTrim(commandOptions.samples));
            variantAggregateFamilyParams.setGapsGenotype(commandOptions.gapsGenotype);

            if (commandOptions.resume != null) {
                variantAggregateFamilyParams.setResume(commandOptions.resume);
            }
        }
        return openCGAClient.getVariantOperationClient().aggregateVariantFamily(variantAggregateFamilyParams, queryParams);
    }

    private RestResponse<Job> indexVariantFamily() throws Exception {

        logger.debug("Executing indexVariantFamily in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.IndexVariantFamilyCommandOptions commandOptions = operationsVariantStorageCommandOptions.indexVariantFamilyCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantFamilyIndexParams variantFamilyIndexParams = new VariantFamilyIndexParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantFamilyIndexParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantFamilyIndexParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantFamilyIndexParams.class);
        } else {
            variantFamilyIndexParams.setFamily(splitWithTrim(commandOptions.family));

            if (commandOptions.overwrite != null) {
                variantFamilyIndexParams.setOverwrite(commandOptions.overwrite);
            }
            if (commandOptions.updateIndex != null) {
                variantFamilyIndexParams.setUpdateIndex(commandOptions.updateIndex);
            }
            if (commandOptions.skipIncompleteFamilies != null) {
                variantFamilyIndexParams.setSkipIncompleteFamilies(commandOptions.skipIncompleteFamilies);
            }
        }
        return openCGAClient.getVariantOperationClient().indexVariantFamily(variantFamilyIndexParams, queryParams);
    }

    private RestResponse<Job> indexVariant() throws Exception {

        logger.debug("Executing indexVariant in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.IndexVariantCommandOptions commandOptions = operationsVariantStorageCommandOptions.indexVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantIndexParams variantIndexParams = new VariantIndexParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantIndexParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantIndexParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantIndexParams.class);
        } else {
            variantIndexParams.setFile(commandOptions.file);
            variantIndexParams.setOutdir(commandOptions.outdir);
            variantIndexParams.setReferenceGenome(commandOptions.referenceGenome);
            variantIndexParams.setFailOnMalformedLines(commandOptions.failOnMalformedLines);
            variantIndexParams.setLoadSplitData(commandOptions.loadSplitData);
            variantIndexParams.setLoadSampleIndex(commandOptions.loadSampleIndex);
            variantIndexParams.setLoadArchive(commandOptions.loadArchive);
            variantIndexParams.setLoadHomRef(commandOptions.loadHomRef);
            variantIndexParams.setPostLoadCheck(commandOptions.postLoadCheck);
            variantIndexParams.setIncludeGenotypes(commandOptions.includeGenotypes);
            variantIndexParams.setIncludeSampleData(commandOptions.includeSampleData);
            variantIndexParams.setMerge(commandOptions.merge);
            variantIndexParams.setDeduplicationPolicy(commandOptions.deduplicationPolicy);
            variantIndexParams.setAggregated(commandOptions.aggregated == null ? null : Aggregation.valueOf(commandOptions.aggregated));
            variantIndexParams.setAggregationMappingFile(commandOptions.aggregationMappingFile);
            variantIndexParams.setAnnotator(commandOptions.annotator);

            if (commandOptions.resume != null) {
                variantIndexParams.setResume(commandOptions.resume);
            }
            if (commandOptions.transform != null) {
                variantIndexParams.setTransform(commandOptions.transform);
            }
            if (commandOptions.gvcf != null) {
                variantIndexParams.setGvcf(commandOptions.gvcf);
            }
            if (commandOptions.normalizationSkip != null) {
                variantIndexParams.setNormalizationSkip(commandOptions.normalizationSkip);
            }
            if (commandOptions.family != null) {
                variantIndexParams.setFamily(commandOptions.family);
            }
            if (commandOptions.somatic != null) {
                variantIndexParams.setSomatic(commandOptions.somatic);
            }
            if (commandOptions.load != null) {
                variantIndexParams.setLoad(commandOptions.load);
            }
            if (commandOptions.loadMultiFileData != null) {
                variantIndexParams.setLoadMultiFileData(commandOptions.loadMultiFileData);
            }
            if (commandOptions.calculateStats != null) {
                variantIndexParams.setCalculateStats(commandOptions.calculateStats);
            }
            if (commandOptions.annotate != null) {
                variantIndexParams.setAnnotate(commandOptions.annotate);
            }
            if (commandOptions.overwriteAnnotations != null) {
                variantIndexParams.setOverwriteAnnotations(commandOptions.overwriteAnnotations);
            }
            if (commandOptions.indexSearch != null) {
                variantIndexParams.setIndexSearch(commandOptions.indexSearch);
            }
            if (commandOptions.skipIndexedFiles != null) {
                variantIndexParams.setSkipIndexedFiles(commandOptions.skipIndexedFiles);
            }
        }
        return openCGAClient.getVariantOperationClient().indexVariant(variantIndexParams, queryParams);
    }

    private RestResponse<Job> launcherVariantIndex() throws Exception {

        logger.debug("Executing launcherVariantIndex in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.LauncherVariantIndexCommandOptions commandOptions = operationsVariantStorageCommandOptions.launcherVariantIndexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantFileIndexJobLauncherParams variantFileIndexJobLauncherParams = new VariantFileIndexJobLauncherParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantFileIndexJobLauncherParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantFileIndexJobLauncherParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantFileIndexJobLauncherParams.class);
        } else {
            // Generate beans for nested objects
            VariantIndexParams indexParamsParam = new VariantIndexParams();
            indexParamsParam.setFile(commandOptions.indexParamsFile);
            indexParamsParam.setResume(commandOptions.indexParamsResume);
            indexParamsParam.setOutdir(commandOptions.indexParamsOutdir);
            indexParamsParam.setTransform(commandOptions.indexParamsTransform);
            indexParamsParam.setGvcf(commandOptions.indexParamsGvcf);
            indexParamsParam.setNormalizationSkip(commandOptions.indexParamsNormalizationSkip);
            indexParamsParam.setReferenceGenome(commandOptions.indexParamsReferenceGenome);
            indexParamsParam.setFailOnMalformedLines(commandOptions.indexParamsFailOnMalformedLines);
            indexParamsParam.setFamily(commandOptions.indexParamsFamily);
            indexParamsParam.setSomatic(commandOptions.indexParamsSomatic);
            indexParamsParam.setLoad(commandOptions.indexParamsLoad);
            indexParamsParam.setLoadSplitData(commandOptions.indexParamsLoadSplitData);
            indexParamsParam.setLoadMultiFileData(commandOptions.indexParamsLoadMultiFileData);
            indexParamsParam.setLoadSampleIndex(commandOptions.indexParamsLoadSampleIndex);
            indexParamsParam.setLoadArchive(commandOptions.indexParamsLoadArchive);
            indexParamsParam.setLoadHomRef(commandOptions.indexParamsLoadHomRef);
            indexParamsParam.setPostLoadCheck(commandOptions.indexParamsPostLoadCheck);
            indexParamsParam.setIncludeGenotypes(commandOptions.indexParamsIncludeGenotypes);
            indexParamsParam.setIncludeSampleData(commandOptions.indexParamsIncludeSampleData);
            indexParamsParam.setMerge(commandOptions.indexParamsMerge);
            indexParamsParam.setDeduplicationPolicy(commandOptions.indexParamsDeduplicationPolicy);
            indexParamsParam.setCalculateStats(commandOptions.indexParamsCalculateStats);
            indexParamsParam.setAggregated(commandOptions.indexParamsAggregated == null ? null : Aggregation.valueOf(commandOptions.indexParamsAggregated));
            indexParamsParam.setAggregationMappingFile(commandOptions.indexParamsAggregationMappingFile);
            indexParamsParam.setAnnotate(commandOptions.indexParamsAnnotate);
            indexParamsParam.setAnnotator(commandOptions.indexParamsAnnotator);
            indexParamsParam.setOverwriteAnnotations(commandOptions.indexParamsOverwriteAnnotations);
            indexParamsParam.setIndexSearch(commandOptions.indexParamsIndexSearch);
            indexParamsParam.setSkipIndexedFiles(commandOptions.indexParamsSkipIndexedFiles);

            //Set main body params
            variantFileIndexJobLauncherParams.setName(commandOptions.name);
            variantFileIndexJobLauncherParams.setDirectory(commandOptions.directory);
            variantFileIndexJobLauncherParams.setMaxJobs(commandOptions.maxJobs);
            variantFileIndexJobLauncherParams.setIndexParams(indexParamsParam);

            if (commandOptions.resumeFailed != null) {
                variantFileIndexJobLauncherParams.setResumeFailed(commandOptions.resumeFailed);
            }
            if (commandOptions.ignoreFailed != null) {
                variantFileIndexJobLauncherParams.setIgnoreFailed(commandOptions.ignoreFailed);
            }
        }
        return openCGAClient.getVariantOperationClient().launcherVariantIndex(variantFileIndexJobLauncherParams, queryParams);
    }

    private RestResponse<Job> runVariantJulie() throws Exception {

        logger.debug("Executing runVariantJulie in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.RunVariantJulieCommandOptions commandOptions = operationsVariantStorageCommandOptions.runVariantJulieCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("project", commandOptions.project);


        JulieParams julieParams = new JulieParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(julieParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            julieParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), JulieParams.class);
        } else {
            julieParams.setCohorts(splitWithTrim(commandOptions.cohorts));
            julieParams.setRegion(commandOptions.region);

            if (commandOptions.overwrite != null) {
                julieParams.setOverwrite(commandOptions.overwrite);
            }
        }
        return openCGAClient.getVariantOperationClient().runVariantJulie(julieParams, queryParams);
    }

    private RestResponse<Job> repairVariantMetadata() throws Exception {

        logger.debug("Executing repairVariantMetadata in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.RepairVariantMetadataCommandOptions commandOptions = operationsVariantStorageCommandOptions.repairVariantMetadataCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);


        VariantStorageMetadataRepairToolParams variantStorageMetadataRepairToolParams = new VariantStorageMetadataRepairToolParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantStorageMetadataRepairToolParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantStorageMetadataRepairToolParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantStorageMetadataRepairToolParams.class);
        } else {
            variantStorageMetadataRepairToolParams.setStudies(splitWithTrim(commandOptions.studies));
            variantStorageMetadataRepairToolParams.setSamplesBatchSize(commandOptions.samplesBatchSize);
            //variantStorageMetadataRepairToolParams.setWhat(commandOptions.what); // Unsupported param. FIXME 

        }
        return openCGAClient.getVariantOperationClient().repairVariantMetadata(variantStorageMetadataRepairToolParams, queryParams);
    }

    private RestResponse<Job> synchronizeVariantMetadata() throws Exception {

        logger.debug("Executing synchronizeVariantMetadata in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.SynchronizeVariantMetadataCommandOptions commandOptions = operationsVariantStorageCommandOptions.synchronizeVariantMetadataCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantStorageMetadataSynchronizeParams variantStorageMetadataSynchronizeParams = new VariantStorageMetadataSynchronizeParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantStorageMetadataSynchronizeParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantStorageMetadataSynchronizeParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantStorageMetadataSynchronizeParams.class);
        } else {
            variantStorageMetadataSynchronizeParams.setStudy(commandOptions.bodyStudy);
            variantStorageMetadataSynchronizeParams.setFiles(splitWithTrim(commandOptions.bodyFiles));

        }
        return openCGAClient.getVariantOperationClient().synchronizeVariantMetadata(variantStorageMetadataSynchronizeParams, queryParams);
    }

    private RestResponse<Job> pruneVariant() throws Exception {

        logger.debug("Executing pruneVariant in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.PruneVariantCommandOptions commandOptions = operationsVariantStorageCommandOptions.pruneVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);


        VariantPruneParams variantPruneParams = new VariantPruneParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantPruneParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantPruneParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantPruneParams.class);
        } else {
            variantPruneParams.setProject(commandOptions.project);

            if (commandOptions.dryRun != null) {
                variantPruneParams.setDryRun(commandOptions.dryRun);
            }
            if (commandOptions.resume != null) {
                variantPruneParams.setResume(commandOptions.resume);
            }
        }
        return openCGAClient.getVariantOperationClient().pruneVariant(variantPruneParams, queryParams);
    }

    private RestResponse<Job> deleteVariantSample() throws Exception {

        logger.debug("Executing deleteVariantSample in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.DeleteVariantSampleCommandOptions commandOptions = operationsVariantStorageCommandOptions.deleteVariantSampleCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantSampleDeleteParams variantSampleDeleteParams = new VariantSampleDeleteParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantSampleDeleteParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantSampleDeleteParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantSampleDeleteParams.class);
        } else {
            variantSampleDeleteParams.setSample(splitWithTrim(commandOptions.sample));

            if (commandOptions.force != null) {
                variantSampleDeleteParams.setForce(commandOptions.force);
            }
            if (commandOptions.resume != null) {
                variantSampleDeleteParams.setResume(commandOptions.resume);
            }
        }
        return openCGAClient.getVariantOperationClient().deleteVariantSample(variantSampleDeleteParams, queryParams);
    }

    private RestResponse<Job> indexVariantSample() throws Exception {

        logger.debug("Executing indexVariantSample in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.IndexVariantSampleCommandOptions commandOptions = operationsVariantStorageCommandOptions.indexVariantSampleCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantSampleIndexParams variantSampleIndexParams = new VariantSampleIndexParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantSampleIndexParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantSampleIndexParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantSampleIndexParams.class);
        } else {
            variantSampleIndexParams.setSample(splitWithTrim(commandOptions.sample));

            if (commandOptions.buildIndex != null) {
                variantSampleIndexParams.setBuildIndex(commandOptions.buildIndex);
            }
            if (commandOptions.annotate != null) {
                variantSampleIndexParams.setAnnotate(commandOptions.annotate);
            }
            if (commandOptions.familyIndex != null) {
                variantSampleIndexParams.setFamilyIndex(commandOptions.familyIndex);
            }
            if (commandOptions.overwrite != null) {
                variantSampleIndexParams.setOverwrite(commandOptions.overwrite);
            }
        }
        return openCGAClient.getVariantOperationClient().indexVariantSample(variantSampleIndexParams, queryParams);
    }

    private RestResponse<Job> variantSampleIndexConfigure() throws Exception {

        logger.debug("Executing variantSampleIndexConfigure in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.VariantSampleIndexConfigureCommandOptions commandOptions = operationsVariantStorageCommandOptions.variantSampleIndexConfigureCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("skipRebuild", commandOptions.skipRebuild);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        SampleIndexConfiguration sampleIndexConfiguration = new SampleIndexConfiguration();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(sampleIndexConfiguration));
            return res;
        } else if (commandOptions.jsonFile != null) {
            sampleIndexConfiguration = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), SampleIndexConfiguration.class);
        }
        return openCGAClient.getVariantOperationClient().variantSampleIndexConfigure(sampleIndexConfiguration, queryParams);
    }

    private RestResponse<Job> deleteVariantScore() throws Exception {

        logger.debug("Executing deleteVariantScore in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.DeleteVariantScoreCommandOptions commandOptions = operationsVariantStorageCommandOptions.deleteVariantScoreCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotNull("resume", commandOptions.resume);
        queryParams.putIfNotNull("force", commandOptions.force);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantOperationClient().deleteVariantScore(queryParams);
    }

    private RestResponse<Job> indexVariantScore() throws Exception {

        logger.debug("Executing indexVariantScore in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.IndexVariantScoreCommandOptions commandOptions = operationsVariantStorageCommandOptions.indexVariantScoreCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantScoreIndexParams variantScoreIndexParams = new VariantScoreIndexParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantScoreIndexParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantScoreIndexParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantScoreIndexParams.class);
        } else {
            variantScoreIndexParams.setScoreName(commandOptions.scoreName);
            variantScoreIndexParams.setCohort1(commandOptions.cohort1);
            variantScoreIndexParams.setCohort2(commandOptions.cohort2);
            variantScoreIndexParams.setInput(commandOptions.input);
            variantScoreIndexParams.setInputColumns(commandOptions.inputColumns);

            if (commandOptions.resume != null) {
                variantScoreIndexParams.setResume(commandOptions.resume);
            }
        }
        return openCGAClient.getVariantOperationClient().indexVariantScore(variantScoreIndexParams, queryParams);
    }

    private RestResponse<Job> variantSecondaryAnnotationIndex() throws Exception {

        logger.debug("Executing variantSecondaryAnnotationIndex in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.VariantSecondaryAnnotationIndexCommandOptions commandOptions = operationsVariantStorageCommandOptions.variantSecondaryAnnotationIndexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantSecondaryIndexParams variantSecondaryIndexParams = new VariantSecondaryIndexParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantSecondaryIndexParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantSecondaryIndexParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantSecondaryIndexParams.class);
        } else {
            variantSecondaryIndexParams.setRegion(commandOptions.region);
            variantSecondaryIndexParams.setSample(splitWithTrim(commandOptions.sample));

            if (commandOptions.overwrite != null) {
                variantSecondaryIndexParams.setOverwrite(commandOptions.overwrite);
            }
        }
        return openCGAClient.getVariantOperationClient().variantSecondaryAnnotationIndex(variantSecondaryIndexParams, queryParams);
    }

    private RestResponse<Job> variantSecondarySampleIndex() throws Exception {

        logger.debug("Executing variantSecondarySampleIndex in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.VariantSecondarySampleIndexCommandOptions commandOptions = operationsVariantStorageCommandOptions.variantSecondarySampleIndexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantSampleIndexParams variantSampleIndexParams = new VariantSampleIndexParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantSampleIndexParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantSampleIndexParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantSampleIndexParams.class);
        } else {
            variantSampleIndexParams.setSample(splitWithTrim(commandOptions.sample));

            if (commandOptions.buildIndex != null) {
                variantSampleIndexParams.setBuildIndex(commandOptions.buildIndex);
            }
            if (commandOptions.annotate != null) {
                variantSampleIndexParams.setAnnotate(commandOptions.annotate);
            }
            if (commandOptions.familyIndex != null) {
                variantSampleIndexParams.setFamilyIndex(commandOptions.familyIndex);
            }
            if (commandOptions.overwrite != null) {
                variantSampleIndexParams.setOverwrite(commandOptions.overwrite);
            }
        }
        return openCGAClient.getVariantOperationClient().variantSecondarySampleIndex(variantSampleIndexParams, queryParams);
    }

    private RestResponse<Job> configureVariantSecondarySampleIndex() throws Exception {

        logger.debug("Executing configureVariantSecondarySampleIndex in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.ConfigureVariantSecondarySampleIndexCommandOptions commandOptions = operationsVariantStorageCommandOptions.configureVariantSecondarySampleIndexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("skipRebuild", commandOptions.skipRebuild);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        SampleIndexConfiguration sampleIndexConfiguration = new SampleIndexConfiguration();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(sampleIndexConfiguration));
            return res;
        } else if (commandOptions.jsonFile != null) {
            sampleIndexConfiguration = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), SampleIndexConfiguration.class);
        }
        return openCGAClient.getVariantOperationClient().configureVariantSecondarySampleIndex(sampleIndexConfiguration, queryParams);
    }

    private RestResponse<Job> secondaryIndexVariant() throws Exception {

        logger.debug("Executing secondaryIndexVariant in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.SecondaryIndexVariantCommandOptions commandOptions = operationsVariantStorageCommandOptions.secondaryIndexVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantSecondaryIndexParams variantSecondaryIndexParams = new VariantSecondaryIndexParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantSecondaryIndexParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantSecondaryIndexParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantSecondaryIndexParams.class);
        } else {
            variantSecondaryIndexParams.setRegion(commandOptions.region);
            variantSecondaryIndexParams.setSample(splitWithTrim(commandOptions.sample));

            if (commandOptions.overwrite != null) {
                variantSecondaryIndexParams.setOverwrite(commandOptions.overwrite);
            }
        }
        return openCGAClient.getVariantOperationClient().secondaryIndexVariant(variantSecondaryIndexParams, queryParams);
    }

    private RestResponse<Job> deleteVariantSecondaryIndex() throws Exception {

        logger.debug("Executing deleteVariantSecondaryIndex in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.DeleteVariantSecondaryIndexCommandOptions commandOptions = operationsVariantStorageCommandOptions.deleteVariantSecondaryIndexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("samples", commandOptions.samples);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantOperationClient().deleteVariantSecondaryIndex(queryParams);
    }

    private RestResponse<Job> deleteVariantStats() throws Exception {

        logger.debug("Executing deleteVariantStats in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.DeleteVariantStatsCommandOptions commandOptions = operationsVariantStorageCommandOptions.deleteVariantStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantStatsDeleteParams variantStatsDeleteParams = new VariantStatsDeleteParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantStatsDeleteParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantStatsDeleteParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantStatsDeleteParams.class);
        } else {
            variantStatsDeleteParams.setCohort(splitWithTrim(commandOptions.cohort));

            if (commandOptions.force != null) {
                variantStatsDeleteParams.setForce(commandOptions.force);
            }
        }
        return openCGAClient.getVariantOperationClient().deleteVariantStats(variantStatsDeleteParams, queryParams);
    }

    private RestResponse<Job> indexVariantStats() throws Exception {

        logger.debug("Executing indexVariantStats in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.IndexVariantStatsCommandOptions commandOptions = operationsVariantStorageCommandOptions.indexVariantStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantStatsIndexParams variantStatsIndexParams = new VariantStatsIndexParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantStatsIndexParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantStatsIndexParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantStatsIndexParams.class);
        } else {
            variantStatsIndexParams.setCohort(splitWithTrim(commandOptions.cohort));
            variantStatsIndexParams.setRegion(commandOptions.region);
            variantStatsIndexParams.setAggregated(commandOptions.aggregated == null ? null : Aggregation.valueOf(commandOptions.aggregated));
            variantStatsIndexParams.setAggregationMappingFile(commandOptions.aggregationMappingFile);

            if (commandOptions.overwriteStats != null) {
                variantStatsIndexParams.setOverwriteStats(commandOptions.overwriteStats);
            }
            if (commandOptions.resume != null) {
                variantStatsIndexParams.setResume(commandOptions.resume);
            }
        }
        return openCGAClient.getVariantOperationClient().indexVariantStats(variantStatsIndexParams, queryParams);
    }

    private RestResponse<Job> deleteVariantStudy() throws Exception {

        logger.debug("Executing deleteVariantStudy in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.DeleteVariantStudyCommandOptions commandOptions = operationsVariantStorageCommandOptions.deleteVariantStudyCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantStudyDeleteParams variantStudyDeleteParams = new VariantStudyDeleteParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantStudyDeleteParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantStudyDeleteParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantStudyDeleteParams.class);
        } else {

            if (commandOptions.resume != null) {
                variantStudyDeleteParams.setResume(commandOptions.resume);
            }
        }
        return openCGAClient.getVariantOperationClient().deleteVariantStudy(variantStudyDeleteParams, queryParams);
    }
}