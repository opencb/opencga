/*
* Copyright 2015-2024 OpenCB
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.opencb.opencga.client.rest.clients;

import java.lang.Object;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.opencga.client.rest.*;
import org.opencb.opencga.core.client.ParentClient;
import org.opencb.opencga.core.config.client.ClientConfiguration;
import org.opencb.opencga.core.exceptions.ClientException;
import org.opencb.opencga.core.models.externalTool.ExternalTool;
import org.opencb.opencga.core.models.externalTool.ExternalToolAclEntryList;
import org.opencb.opencga.core.models.externalTool.ExternalToolAclUpdateParams;
import org.opencb.opencga.core.models.externalTool.ExternalToolRunParams;
import org.opencb.opencga.core.models.externalTool.WorkflowRepositoryParams;
import org.opencb.opencga.core.models.externalTool.workflow.DeprecatedWorkflowUpdateParams;
import org.opencb.opencga.core.models.externalTool.workflow.WorkflowCreateParams;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.opencga.core.response.RestResponse;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/


/**
 * This class contains methods for the Workflow webservices.
 *    PATH: workflows
 */
public class WorkflowClient extends ParentClient {

    public WorkflowClient(String token, ClientConfiguration configuration) {
        super(token, configuration);
    }

    /**
     * Update the set of workflow permissions granted for the member.
     * @param members Comma separated list of user or group ids.
     * @param action Action to be performed [ADD, SET, REMOVE or RESET].
     * @param data JSON containing the parameters to update the permissions.
     * @param params Map containing any of the following optional parameters.
     *       study: Study [[organization@]project:]study where study and project can be either the ID or UUID.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<ExternalToolAclEntryList> updateAcl(String members, String action, ExternalToolAclUpdateParams data, ObjectMap
        params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.putIfNotNull("action", action);
        params.put("body", data);
        return execute("workflows", null, "acl", members, "update", params, POST, ExternalToolAclEntryList.class);
    }

    /**
     * Create a workflow.
     * @param data JSON containing workflow information.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     *       study: Study [[organization@]project:]study where study and project can be either the ID or UUID.
     *       includeResult: Flag indicating to include the created or updated document result in the response.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<ExternalTool> create(WorkflowCreateParams data, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.put("body", data);
        return execute("workflows", null, null, null, "create", params, POST, ExternalTool.class);
    }

    /**
     * Workflow distinct method.
     * @param field Comma separated list of fields for which to obtain the distinct values.
     * @param params Map containing any of the following optional parameters.
     *       study: Study [[organization@]project:]study where study and project can be either the ID or UUID.
     *       id: Comma separated list of workflow IDs up to a maximum of 100. Also admits basic regular expressions using the operator '~',
     *            i.e. '~{perl-regex}' e.g. '~value' for case sensitive, '~/value/i' for case insensitive search.
     *       name: Comma separated list of workflow names up to a maximum of 100. Also admits basic regular expressions using the operator
     *            '~', i.e. '~{perl-regex}' e.g. '~value' for case sensitive, '~/value/i' for case insensitive search.
     *       uuid: Comma separated list of workflow UUIDs up to a maximum of 100.
     *       tags: Comma separated list of tags.
     *       draft: Boolean field indicating whether the workflow is a draft or not.
     *       internal.registrationUserId: UserId that created the workflow.
     *       manager.id: Id of the workflow system (Allowed values: NEXTFLOW).
     *       type: Workflow type. Allowed types: [CLINICAL_INTERPRETATION, SECONDARY_ANALYSIS, RESEARCH or OTHER].
     *       creationDate: Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
     *       modificationDate: Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
     *       acl: Filter entries for which a user has the provided permissions. Format: acl={user}:{permissions}. Example:
     *            acl=john:WRITE,WRITE_ANNOTATIONS will return all entries for which user john has both WRITE and WRITE_ANNOTATIONS
     *            permissions. Only study owners or administrators can query by this field. .
     *       release: Release when it was created.
     *       snapshot: Snapshot value (Latest version of the entry in the specified release).
     *       deleted: Boolean to retrieve deleted entries.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Object> distinct(String field, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.putIfNotNull("field", field);
        return execute("workflows", null, null, null, "distinct", params, GET, Object.class);
    }

    /**
     * Import a workflow.
     * @param data Repository parameters.
     * @param params Map containing any of the following optional parameters.
     *       study: Study [[organization@]project:]study where study and project can be either the ID or UUID.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<ExternalTool> importWorkflow(WorkflowRepositoryParams data, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.put("body", data);
        return execute("workflows", null, null, null, "import", params, POST, ExternalTool.class);
    }

    /**
     * Execute a workflow analysis.
     * @param data External tool run parameters.
     * @param params Map containing any of the following optional parameters.
     *       study: Study [[organization@]project:]study where study and project can be either the ID or UUID.
     *       jobId: Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.
     *       jobDescription: Job description.
     *       jobDependsOn: Comma separated list of existing job IDs the job will depend on.
     *       jobTags: Job tags.
     *       jobScheduledStartTime: Time when the job is scheduled to start.
     *       jobPriority: Priority of the job.
     *       jobDryRun: Flag indicating that the job will be executed in dry-run mode. In this mode, OpenCGA will validate that all
     *            parameters and prerequisites are correctly set for successful execution, but the job will not actually run.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Job> run(ExternalToolRunParams data, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.put("body", data);
        return execute("workflows", null, null, null, "run", params, POST, Job.class);
    }

    /**
     * Workflow search method.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     *       limit: Number of results to be returned.
     *       skip: Number of results to skip.
     *       count: Get the total number of results matching the query. Deactivated by default.
     *       study: Study [[organization@]project:]study where study and project can be either the ID or UUID.
     *       id: Comma separated list of workflow IDs up to a maximum of 100. Also admits basic regular expressions using the operator '~',
     *            i.e. '~{perl-regex}' e.g. '~value' for case sensitive, '~/value/i' for case insensitive search.
     *       name: Comma separated list of workflow names up to a maximum of 100. Also admits basic regular expressions using the operator
     *            '~', i.e. '~{perl-regex}' e.g. '~value' for case sensitive, '~/value/i' for case insensitive search.
     *       uuid: Comma separated list of workflow UUIDs up to a maximum of 100.
     *       tags: Comma separated list of tags.
     *       draft: Boolean field indicating whether the workflow is a draft or not.
     *       internal.registrationUserId: UserId that created the workflow.
     *       manager.id: Id of the workflow system (Allowed values: NEXTFLOW).
     *       type: Workflow type. Allowed types: [CLINICAL_INTERPRETATION, SECONDARY_ANALYSIS, RESEARCH or OTHER].
     *       creationDate: Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
     *       modificationDate: Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
     *       acl: Filter entries for which a user has the provided permissions. Format: acl={user}:{permissions}. Example:
     *            acl=john:WRITE,WRITE_ANNOTATIONS will return all entries for which user john has both WRITE and WRITE_ANNOTATIONS
     *            permissions. Only study owners or administrators can query by this field. .
     *       release: Release when it was created.
     *       snapshot: Snapshot value (Latest version of the entry in the specified release).
     *       deleted: Boolean to retrieve deleted entries.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<ExternalTool> search(ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("workflows", null, null, null, "search", params, GET, ExternalTool.class);
    }

    /**
     * Update some workflow attributes.
     * @param workflowId Comma separated list workflow IDs or UUIDs up to a maximum of 100.
     * @param data body.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     *       study: Study [[organization@]project:]study where study and project can be either the ID or UUID.
     *       includeResult: Flag indicating to include the created or updated document result in the response.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<ExternalTool> update(String workflowId, DeprecatedWorkflowUpdateParams data, ObjectMap params)
            throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.put("body", data);
        return execute("workflows", workflowId, null, null, "update", params, POST, ExternalTool.class);
    }

    /**
     * Returns the acl of the workflows. If member is provided, it will only return the acl for the member.
     * @param workflows Comma separated list workflow IDs or UUIDs up to a maximum of 100.
     * @param params Map containing any of the following optional parameters.
     *       study: Study [[organization@]project:]study where study and project can be either the ID or UUID.
     *       member: User or group id.
     *       silent: Boolean to retrieve all possible entries that are queried for, false to raise an exception whenever one of the entries
     *            looked for cannot be shown for whichever reason.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<ExternalToolAclEntryList> acl(String workflows, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("workflows", workflows, null, null, "acl", params, GET, ExternalToolAclEntryList.class);
    }

    /**
     * Delete workflows.
     * @param workflows Comma separated list workflow IDs or UUIDs up to a maximum of 100.
     * @param params Map containing any of the following optional parameters.
     *       study: Study [[organization@]project:]study where study and project can be either the ID or UUID.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<ExternalTool> delete(String workflows, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("workflows", workflows, null, null, "delete", params, DELETE, ExternalTool.class);
    }

    /**
     * Get workflow information.
     * @param workflows Comma separated list sample IDs or UUIDs up to a maximum of 100.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     *       study: Study [[organization@]project:]study where study and project can be either the ID or UUID.
     *       version: Comma separated list of workflow versions. 'all' to get all the workflow versions. Not supported if multiple workflow
     *            ids are provided.
     *       deleted: Boolean to retrieve deleted entries.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<ExternalTool> info(String workflows, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("workflows", workflows, null, null, "info", params, GET, ExternalTool.class);
    }
}
