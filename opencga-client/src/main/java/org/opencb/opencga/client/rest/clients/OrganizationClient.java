/*
* Copyright 2015-2024 OpenCB
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.opencb.opencga.client.rest.clients;

import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.opencga.client.config.ClientConfiguration;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.opencga.client.rest.*;
import org.opencb.opencga.core.models.event.CatalogEvent;
import org.opencb.opencga.core.models.notes.Note;
import org.opencb.opencga.core.models.notes.NoteCreateParams;
import org.opencb.opencga.core.models.notes.NoteUpdateParams;
import org.opencb.opencga.core.models.organizations.Organization;
import org.opencb.opencga.core.models.organizations.OrganizationConfiguration;
import org.opencb.opencga.core.models.organizations.OrganizationCreateParams;
import org.opencb.opencga.core.models.organizations.OrganizationUpdateParams;
import org.opencb.opencga.core.models.user.OrganizationUserUpdateParams;
import org.opencb.opencga.core.models.user.User;
import org.opencb.opencga.core.models.user.UserStatusUpdateParams;
import org.opencb.opencga.core.response.RestResponse;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/


/**
 * This class contains methods for the Organization webservices.
 *    PATH: organizations
 */
public class OrganizationClient extends AbstractParentClient {

    public OrganizationClient(String token, ClientConfiguration configuration) {
        super(token, configuration);
    }

    /**
     * Create a new organization.
     * @param data JSON containing the organization to be created.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     *       includeResult: Flag indicating to include the created or updated document result in the response.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Organization> create(OrganizationCreateParams data, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.put("body", data);
        return execute("organizations", null, null, null, "create", params, POST, Organization.class);
    }

    /**
     * Create a new note.
     * @param data JSON containing the Note to be added.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     *       includeResult: Flag indicating to include the created or updated document result in the response.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Note> createNotes(NoteCreateParams data, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.put("body", data);
        return execute("organizations", null, "notes", null, "create", params, POST, Note.class);
    }

    /**
     * Search for notes of scope ORGANIZATION.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     *       creationDate: Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
     *       modificationDate: Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
     *       id: Note unique identifier.
     *       scope: Scope of the Note.
     *       visibility: Visibility of the Note.
     *       uuid: Unique 32-character identifier assigned automatically by OpenCGA.
     *       userId: User that wrote that Note.
     *       tags: Note tags.
     *       version: Autoincremental version assigned to the registered entry. By default, updates does not create new versions. To enable
     *            versioning, users must set the `incVersion` flag from the /update web service when updating the document.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Note> searchNotes(ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("organizations", null, "notes", null, "search", params, GET, Note.class);
    }

    /**
     * Delete note.
     * @param id Note unique identifier.
     * @param params Map containing any of the following optional parameters.
     *       includeResult: Flag indicating to include the created or updated document result in the response.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Note> deleteNotes(String id, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("organizations", null, "notes", id, "delete", params, DELETE, Note.class);
    }

    /**
     * Update a note.
     * @param id Note unique identifier.
     * @param data JSON containing the Note fields to be updated.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     *       tagsAction: Action to be performed if the array of tags is being updated.
     *       includeResult: Flag indicating to include the created or updated document result in the response.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Note> updateNotes(String id, NoteUpdateParams data, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.put("body", data);
        return execute("organizations", null, "notes", id, "update", params, POST, Note.class);
    }

    /**
     * Update the user status.
     * @param user User ID.
     * @param data JSON containing the User fields to be updated.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     *       organization: Organization id.
     *       includeResult: Flag indicating to include the created or updated document result in the response.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<User> userUpdateStatus(String user, UserStatusUpdateParams data, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.put("body", data);
        return execute("organizations/user", user, "status", null, "update", params, POST, User.class);
    }

    /**
     * Update the user information.
     * @param user User ID.
     * @param data JSON containing the User fields to be updated.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     *       organization: Organization id.
     *       includeResult: Flag indicating to include the created or updated document result in the response.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<User> updateUser(String user, OrganizationUserUpdateParams data, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.put("body", data);
        return execute("organizations", null, "user", user, "update", params, POST, User.class);
    }

    /**
     * Update the Organization configuration attributes.
     * @param organization Organization id.
     * @param data JSON containing the params to be updated.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     *       includeResult: Flag indicating to include the created or updated document result in the response.
     *       authenticationOriginsAction: Action to be performed if the array of authenticationOrigins is being updated.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<OrganizationConfiguration> updateConfiguration(String organization, OrganizationConfiguration data, ObjectMap
        params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.put("body", data);
        return execute("organizations", organization, "configuration", null, "update", params, POST, OrganizationConfiguration.class);
    }

    /**
     * Search events.
     * @param organization Organization id.
     * @param params Map containing any of the following optional parameters.
     *       study: Study [[organization@]project:]study where study and project can be either the ID or UUID.
     *       creationDate: Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
     *       modificationDate: Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
     *       successful: Boolean indicating if the event was successful or not.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<CatalogEvent> queryEvents(String organization, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("organizations", organization, "events", null, "query", params, GET, CatalogEvent.class);
    }

    /**
     * Archive an event.
     * @param organization Organization id.
     * @param eventId Event id.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<CatalogEvent> archiveEvents(String organization, String eventId) throws ClientException {
        ObjectMap params = new ObjectMap();
        return execute("organizations", organization, "events", eventId, "archive", params, POST, CatalogEvent.class);
    }

    /**
     * Retry unsuccessful event.
     * @param organization Organization id.
     * @param eventId Event id.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<CatalogEvent> retryEvents(String organization, String eventId) throws ClientException {
        ObjectMap params = new ObjectMap();
        return execute("organizations", organization, "events", eventId, "retry", params, POST, CatalogEvent.class);
    }

    /**
     * Return the organization information.
     * @param organization Organization id.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Organization> info(String organization, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("organizations", organization, null, null, "info", params, GET, Organization.class);
    }

    /**
     * Update some organization attributes.
     * @param organization Organization id.
     * @param data JSON containing the params to be updated.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     *       includeResult: Flag indicating to include the created or updated document result in the response.
     *       adminsAction: Action to be performed if the array of admins is being updated.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Organization> update(String organization, OrganizationUpdateParams data, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.put("body", data);
        return execute("organizations", organization, null, null, "update", params, POST, Organization.class);
    }
}
