/*
* Copyright 2015-2022 OpenCB
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.opencb.opencga.client.rest.clients;

import java.lang.Object;
import org.opencb.commons.datastore.core.FacetField;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.opencga.client.config.ClientConfiguration;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.opencga.client.rest.AbstractParentClient;
import org.opencb.opencga.core.models.file.FileContent;
import org.opencb.opencga.core.models.job.Execution;
import org.opencb.opencga.core.models.job.ExecutionAclUpdateParams;
import org.opencb.opencga.core.models.job.ExecutionCreateParams;
import org.opencb.opencga.core.models.job.ExecutionRetryParams;
import org.opencb.opencga.core.models.job.ExecutionTop;
import org.opencb.opencga.core.models.job.ExecutionUpdateParams;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.opencga.core.models.job.JobUpdateParams;
import org.opencb.opencga.core.response.RestResponse;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2022-07-05 14:08:03
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/


/**
 * This class contains methods for the Execution webservices.
 *    Client version: 2.5.0-SNAPSHOT [42e0da78c772e46155bd2c72ac08052b437aafcc]
 *    PATH: executions
 */
public class ExecutionClient extends AbstractParentClient {

    public ExecutionClient(String token, ClientConfiguration configuration) {
        super(token, configuration);
    }

    /**
     * Update the set of permissions granted for the member.
     * @param members Comma separated list of user or group ids.
     * @param action Action to be performed [ADD, SET, REMOVE or RESET].
     * @param data JSON containing the parameters to add ACLs.
     * @param params Map containing any of the following optional parameters.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<ObjectMap> updateAcl(String members, String action, ExecutionAclUpdateParams data, ObjectMap params)
            throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.putIfNotNull("action", action);
        params.put("body", data);
        return execute("executions", null, "acl", members, "update", params, POST, ObjectMap.class);
    }

    /**
     * Register a past execution.
     * @param data execution.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     *       includeResult: Flag indicating to include the created or updated document result in the response.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Execution> create(ExecutionCreateParams data, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.put("body", data);
        return execute("executions", null, null, null, "create", params, POST, Execution.class);
    }

    /**
     * Execution distinct method.
     * @param field Field for which to obtain the distinct values.
     * @param params Map containing any of the following optional parameters.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     *       otherStudies: Flag indicating the entries being queried can belong to any related study, not just the primary one.
     *       id: Comma separated list of execution IDs up to a maximum of 100.
     *       uuid: Comma separated list of execution UUIDs up to a maximum of 100.
     *       internalToolId: Tool ID executed by the execution.
     *       userId: User that created the execution.
     *       priority: Priority of the execution.
     *       internalStatus: Filter by internal status.
     *       creationDate: Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
     *       modificationDate: Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
     *       visited: Visited status of execution.
     *       isPipeline: Filter by pipeline/not pipeline executions.
     *       tags: Execution tags.
     *       acl: Filter entries for which a user has the provided permissions. Format: acl={user}:{permissions}. Example:
     *            acl=john:WRITE,WRITE_ANNOTATIONS will return all entries for which user john has both WRITE and WRITE_ANNOTATIONS
     *            permissions. Only study owners or administrators can query by this field. .
     *       release: Release when it was created.
     *       deleted: Boolean to retrieve deleted entries.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Object> distinct(String field, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.putIfNotNull("field", field);
        return execute("executions", null, null, null, "distinct", params, GET, Object.class);
    }

    /**
     * Fetch catalog job stats.
     * @param params Map containing any of the following optional parameters.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     *       toolId: Tool id.
     *       toolScope: Tool scope.
     *       toolType: Tool type.
     *       toolResource: Tool resource.
     *       userId: User id.
     *       priority: Priority.
     *       tags: Tags.
     *       executorId: Executor id.
     *       executorFramework: Executor framework.
     *       creationYear: Creation year.
     *       creationMonth: Creation month (JANUARY, FEBRUARY...).
     *       creationDay: Creation day.
     *       creationDayOfWeek: Creation day of week (MONDAY, TUESDAY...).
     *       status: Status.
     *       release: Release.
     *       default: Calculate default stats.
     *       field: List of fields separated by semicolons, e.g.: studies;type. For nested fields use >>, e.g.:
     *            studies>>biotype;type;numSamples[0..10]:1.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<FacetField> aggregationStatsJobs(ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("executions", null, "jobs", null, "aggregationStats", params, GET, FacetField.class);
    }

    /**
     * Job distinct method.
     * @param field Field for which to obtain the distinct values.
     * @param params Map containing any of the following optional parameters.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     *       otherStudies: Flag indicating the entries being queried can belong to any related study, not just the primary one.
     *       id: Comma separated list of job IDs up to a maximum of 100.
     *       uuid: Comma separated list of job UUIDs up to a maximum of 100.
     *       toolId: Tool ID executed by the job.
     *       toolType: Tool type executed by the job [OPERATION, ANALYSIS].
     *       userId: User that created the job.
     *       priority: Priority of the job.
     *       status: Filter by status.
     *       internalStatus: Filter by internal status.
     *       creationDate: Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
     *       modificationDate: Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
     *       visited: Visited status of job.
     *       tags: Execution tags.
     *       input: Comma separated list of file IDs used as input.
     *       output: Comma separated list of file IDs used as output.
     *       acl: Filter entries for which a user has the provided permissions. Format: acl={user}:{permissions}. Example:
     *            acl=john:WRITE,WRITE_ANNOTATIONS will return all entries for which user john has both WRITE and WRITE_ANNOTATIONS
     *            permissions. Only study owners or administrators can query by this field. .
     *       release: Release when it was created.
     *       deleted: Boolean to retrieve deleted entries.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Object> distinctJobs(String field, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.putIfNotNull("field", field);
        return execute("executions", null, "jobs", null, "distinct", params, GET, Object.class);
    }

    /**
     * Job search method.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     *       limit: Number of results to be returned.
     *       skip: Number of results to skip.
     *       count: Get the total number of results matching the query. Deactivated by default.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     *       otherStudies: Flag indicating the entries being queried can belong to any related study, not just the primary one.
     *       id: Comma separated list of job IDs up to a maximum of 100.
     *       uuid: Comma separated list of job UUIDs up to a maximum of 100.
     *       toolId: Tool ID executed by the job.
     *       toolType: Tool type executed by the job [OPERATION, ANALYSIS].
     *       userId: User that created the job.
     *       priority: Priority of the job.
     *       status: Filter by status.
     *       internalStatus: Filter by internal status.
     *       creationDate: Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
     *       modificationDate: Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
     *       visited: Visited status of job.
     *       tags: Execution tags.
     *       input: Comma separated list of file IDs used as input.
     *       output: Comma separated list of file IDs used as output.
     *       acl: Filter entries for which a user has the provided permissions. Format: acl={user}:{permissions}. Example:
     *            acl=john:WRITE,WRITE_ANNOTATIONS will return all entries for which user john has both WRITE and WRITE_ANNOTATIONS
     *            permissions. Only study owners or administrators can query by this field. .
     *       release: Release when it was created.
     *       deleted: Boolean to retrieve deleted entries.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Job> searchJobs(ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("executions", null, "jobs", null, "search", params, GET, Job.class);
    }

    /**
     * Get job information.
     * @param jobs Comma separated list of job IDs or UUIDs up to a maximum of 100.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     *       deleted: Boolean to retrieve deleted jobs.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Job> infoJobs(String jobs, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("executions", null, "jobs", jobs, "info", params, GET, Job.class);
    }

    /**
     * Update some job attributes.
     * @param jobs Comma separated list of job IDs or UUIDs up to a maximum of 100.
     * @param data body.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     *       includeResult: Flag indicating to include the created or updated document result in the response.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Job> updateJobs(String jobs, JobUpdateParams data, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.put("body", data);
        return execute("executions", null, "jobs", jobs, "update", params, POST, Job.class);
    }

    /**
     * Show the first lines of a log file (up to a limit).
     * @param job Job ID or UUID.
     * @param params Map containing any of the following optional parameters.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     *       offset: Starting byte from which the file will be read.
     *       lines: Maximum number of lines to be returned up to a maximum of 1000.
     *       type: Log file to be shown (stdout or stderr).
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<FileContent> headExecutionsJobsLog(String job, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("executions/jobs", job, "log", null, "head", params, GET, FileContent.class);
    }

    /**
     * Show the last lines of a log file (up to a limit).
     * @param job Job ID or UUID.
     * @param params Map containing any of the following optional parameters.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     *       lines: Maximum number of lines to be returned up to a maximum of 1000.
     *       type: Log file to be shown (stdout or stderr).
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<FileContent> tailExecutionsJobsLog(String job, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("executions/jobs", job, "log", null, "tail", params, GET, FileContent.class);
    }

    /**
     * Execute a pipeline.
     * @param pipelineId Pipeline id.
     * @param data Execution params.
     * @param params Map containing any of the following optional parameters.
     *       study: study.
     *       pipelineId: Pipeline id.
     *       jobId: Execution ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.
     *       executionDependsOn: Comma separated list of existing execution IDs the execution will depend on.
     *       executionDescription: Execution description.
     *       executionTags: Execution tags.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Execution> runPipeline(String pipelineId, ObjectMap data, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.putIfNotNull("pipelineId", pipelineId);
        params.put("body", data);
        return execute("executions", null, "pipeline", pipelineId, "run", params, POST, Execution.class);
    }

    /**
     * Relaunch a failed execution.
     * @param data job.
     * @param params Map containing any of the following optional parameters.
     *       executionId: Execution ID. It must be a unique string within the study. An ID will be autogenerated automatically if not
     *            provided.
     *       executionDescription: Execution description.
     *       executionDependsOn: Comma separated list of existing execution IDs the execution will depend on.
     *       executionTags: Execution tags.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Execution> retry(ExecutionRetryParams data, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.put("body", data);
        return execute("executions", null, null, null, "retry", params, POST, Execution.class);
    }

    /**
     * Execution search method.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     *       limit: Number of results to be returned.
     *       skip: Number of results to skip.
     *       count: Get the total number of results matching the query. Deactivated by default.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     *       otherStudies: Flag indicating the entries being queried can belong to any related study, not just the primary one.
     *       id: Comma separated list of execution IDs up to a maximum of 100.
     *       uuid: Comma separated list of execution UUIDs up to a maximum of 100.
     *       internalToolId: Tool ID executed by the execution.
     *       userId: User that created the execution.
     *       priority: Priority of the execution.
     *       internalStatus: Filter by internal status.
     *       creationDate: Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
     *       modificationDate: Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
     *       visited: Visited status of execution.
     *       isPipeline: Filter by pipeline/not pipeline executions.
     *       tags: Execution tags.
     *       acl: Filter entries for which a user has the provided permissions. Format: acl={user}:{permissions}. Example:
     *            acl=john:WRITE,WRITE_ANNOTATIONS will return all entries for which user john has both WRITE and WRITE_ANNOTATIONS
     *            permissions. Only study owners or administrators can query by this field. .
     *       release: Release when it was created.
     *       deleted: Boolean to retrieve deleted entries.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Execution> search(ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("executions", null, null, null, "search", params, GET, Execution.class);
    }

    /**
     * Provide a summary of the running executions.
     * @param params Map containing any of the following optional parameters.
     *       limit: Maximum number of executions to be returned.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     *       internalStatus: Filter by internal status.
     *       priority: Priority of the execution.
     *       userId: User that created the execution.
     *       internalToolId: Tool ID executed by the execution.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<ExecutionTop> top(ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("executions", null, null, null, "top", params, GET, ExecutionTop.class);
    }

    /**
     * Return the acl of the execution. If member is provided, it will only return the acl for the member.
     * @param executions Comma separated list of execution IDs or UUIDs up to a maximum of 100.
     * @param params Map containing any of the following optional parameters.
     *       member: User or group id.
     *       silent: Boolean to retrieve all possible entries that are queried for, false to raise an exception whenever one of the entries
     *            looked for cannot be shown for whichever reason.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<ObjectMap> acl(String executions, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("executions", executions, null, null, "acl", params, GET, ObjectMap.class);
    }

    /**
     * Delete existing executions.
     * @param executions Comma separated list of execution ids.
     * @param params Map containing any of the following optional parameters.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Execution> delete(String executions, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("executions", executions, null, null, "delete", params, DELETE, Execution.class);
    }

    /**
     * Get execution information.
     * @param executions Comma separated list of execution IDs or UUIDs up to a maximum of 100.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     *       deleted: Boolean to retrieve deleted executions.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Execution> info(String executions, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("executions", executions, null, null, "info", params, GET, Execution.class);
    }

    /**
     * Update some execution attributes.
     * @param executions Comma separated list of execution IDs or UUIDs up to a maximum of 100.
     * @param data body.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     *       includeResult: Flag indicating to include the created or updated document result in the response.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Execution> update(String executions, ExecutionUpdateParams data, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.put("body", data);
        return execute("executions", executions, null, null, "update", params, POST, Execution.class);
    }
}
