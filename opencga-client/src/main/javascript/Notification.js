/**
 * Copyright 2015-2024 OpenCB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * WARNING: AUTOGENERATED CODE
 * 
 * This code was generated by a tool.
 * 
 * Manual changes to this file may cause unexpected behavior in your application.
 * Manual changes to this file will be overwritten if the code is regenerated. 
 *
**/

import OpenCGAParentClass from "./../opencga-parent-class.js";


/**
 * This class contains the methods for the "Notification" resource
 */

export default class Notification extends OpenCGAParentClass {

    constructor(config) {
        super(config);
    }

    /** Fetch catalog notification stats
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.organization] - Organization id.
    * @param {String} [params.uuid] - Notification UUID.
    * @param {String} [params.type] - Notification type: INFO, WARNING, ERROR or URGENT.
    * @param {String} [params.scope] - Notification scope: GLOBAL, ORGANIZATION, PROJECT or STUDY.
    * @param {String} [params.fqn] - Organization, project or study fqn where the notification is associated.
    * @param {String} [params.sender] - User ID of the sender.
    * @param {String} [params.target] - Target of the notification.
    * @param {String} [params.receiver] - User ID receiver of the notification.
    * @param {String} [params.internalStatus] - Notification status: PENDING, SUCCESS, ERROR or DISCARDED.
    * @param {Boolean} [params.visited] - Boolean parameter indicating whether the notification has been visited or not.
    * @param {String} [params.creationDate] - Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
    * @param {String} [params.modificationDate] - Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
    * @param {String} [params.field] - Field to apply aggregation statistics to (or a list of fields separated by semicolons), e.g.:
    *     studies;type;numSamples[0..10]:1;format:sum(size).
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    aggregationStats(params) {
        return this._get("notifications", null, null, null, "aggregationStats", params);
    }

    /** Create a new notification
    * @param {Object} data - JSON containing the notification information.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    create(data) {
        return this._post("notifications", null, null, null, "create", data);
    }

    /** Notification search method
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.include] - Fields included in the response, whole JSON path must be provided.
    * @param {String} [params.exclude] - Fields excluded in the response, whole JSON path must be provided.
    * @param {Number} [params.limit] - Number of results to be returned.
    * @param {Number} [params.skip] - Number of results to skip.
    * @param {Boolean} [params.count = "false"] - Get the total number of results matching the query. Deactivated by default. The default
    *     value is false.
    * @param {String} [params.organization] - Organization id.
    * @param {String} [params.uuid] - Notification UUID.
    * @param {String} [params.type] - Notification type: INFO, WARNING, ERROR or URGENT.
    * @param {String} [params.scope] - Notification scope: GLOBAL, ORGANIZATION, PROJECT or STUDY.
    * @param {String} [params.fqn] - Organization, project or study fqn where the notification is associated.
    * @param {String} [params.sender] - User ID of the sender.
    * @param {String} [params.target] - Target of the notification.
    * @param {String} [params.receiver] - User ID receiver of the notification.
    * @param {String} [params.internalStatus] - Notification status: PENDING, SUCCESS, ERROR or DISCARDED.
    * @param {Boolean} [params.visited] - Boolean parameter indicating whether the notification has been visited or not.
    * @param {String} [params.creationDate] - Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
    * @param {String} [params.modificationDate] - Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    search(params) {
        return this._get("notifications", null, null, null, "search", params);
    }

    /** Return the notification information
    * @param {String} notification - Notification UUID.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.include] - Fields included in the response, whole JSON path must be provided.
    * @param {String} [params.exclude] - Fields excluded in the response, whole JSON path must be provided.
    * @param {String} [params.organization] - Organization id.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    info(notification, params) {
        return this._get("notifications", notification, null, null, "info", params);
    }

    /** Mark a notification as visited
    * @param {String} notification - Notification UUID.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.organization] - Organization id.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    visit(notification, params) {
        return this._post("notifications", notification, null, null, "visit", null, params);
    }

}