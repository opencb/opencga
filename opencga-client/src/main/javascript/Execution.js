/**
 * Copyright 2015-2020 OpenCB
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * WARNING: AUTOGENERATED CODE
 * 
 * This code was generated by a tool.
 * Autogenerated on: 2022-07-05 14:08:03
 * 
 * Manual changes to this file may cause unexpected behavior in your application.
 * Manual changes to this file will be overwritten if the code is regenerated. 
 *
**/

import OpenCGAParentClass from "./../opencga-parent-class.js";


/**
 * This class contains the methods for the "Execution" resource
 */

export default class Execution extends OpenCGAParentClass {

    constructor(config) {
        super(config);
    }

    /** Update the set of permissions granted for the member
    * @param {String} members - Comma separated list of user or group ids.
    * @param {Object} data - JSON containing the parameters to add ACLs.
    * @param {String} action = "ADD" - Action to be performed [ADD, SET, REMOVE or RESET]. The default value is ADD.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    updateAcl(members, action, data, params) {
        return this._post("executions", null, "acl", members, "update", data, {action, ...params});
    }

    /** Register a past execution
    * @param {Object} data - execution.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.include] - Fields included in the response, whole JSON path must be provided.
    * @param {String} [params.exclude] - Fields excluded in the response, whole JSON path must be provided.
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @param {Boolean} [params.includeResult = "false"] - Flag indicating to include the created or updated document result in the response.
    *     The default value is false.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    create(data, params) {
        return this._post("executions", null, null, null, "create", data, params);
    }

    /** Execution distinct method
    * @param {String} field - Field for which to obtain the distinct values.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @param {Boolean} [params.otherStudies = "false"] - Flag indicating the entries being queried can belong to any related study, not just
    *     the primary one. The default value is false.
    * @param {String} [params.id] - Comma separated list of execution IDs up to a maximum of 100.
    * @param {String} [params.uuid] - Comma separated list of execution UUIDs up to a maximum of 100.
    * @param {String} [params.internalToolId] - Tool ID executed by the execution.
    * @param {String} [params.userId] - User that created the execution.
    * @param {String} [params.priority] - Priority of the execution.
    * @param {String} [params.internalStatus] - Filter by internal status.
    * @param {String} [params.creationDate] - Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
    * @param {String} [params.modificationDate] - Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
    * @param {Boolean} [params.visited] - Visited status of execution.
    * @param {Boolean} [params.isPipeline] - Filter by pipeline/not pipeline executions.
    * @param {String} [params.tags] - Execution tags.
    * @param {String} [params.acl] - Filter entries for which a user has the provided permissions. Format: acl={user}:{permissions}.
    *     Example: acl=john:WRITE,WRITE_ANNOTATIONS will return all entries for which user john has both WRITE and WRITE_ANNOTATIONS
    *     permissions. Only study owners or administrators can query by this field. .
    * @param {String} [params.release] - Release when it was created.
    * @param {Boolean} [params.deleted = "false"] - Boolean to retrieve deleted entries. The default value is false.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    distinct(field, params) {
        return this._get("executions", null, null, null, "distinct", {field, ...params});
    }

    /** Fetch catalog job stats
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @param {String} [params.toolId] - Tool id.
    * @param {String} [params.toolScope] - Tool scope.
    * @param {String} [params.toolType] - Tool type.
    * @param {String} [params.toolResource] - Tool resource.
    * @param {String} [params.userId] - User id.
    * @param {String} [params.priority] - Priority.
    * @param {String} [params.tags] - Tags.
    * @param {String} [params.executorId] - Executor id.
    * @param {String} [params.executorFramework] - Executor framework.
    * @param {String} [params.creationYear] - Creation year.
    * @param {String} [params.creationMonth] - Creation month (JANUARY, FEBRUARY...).
    * @param {String} [params.creationDay] - Creation day.
    * @param {String} [params.creationDayOfWeek] - Creation day of week (MONDAY, TUESDAY...).
    * @param {String} [params.status] - Status.
    * @param {String} [params.release] - Release.
    * @param {Boolean} [params.default = "false"] - Calculate default stats. The default value is false.
    * @param {String} [params.field] - List of fields separated by semicolons, e.g.: studies;type. For nested fields use >>, e.g.:
    *     studies>>biotype;type;numSamples[0..10]:1.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    aggregationStatsJobs(params) {
        return this._get("executions", null, "jobs", null, "aggregationStats", params);
    }

    /** Job distinct method
    * @param {String} field - Field for which to obtain the distinct values.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @param {Boolean} [params.otherStudies = "false"] - Flag indicating the entries being queried can belong to any related study, not just
    *     the primary one. The default value is false.
    * @param {String} [params.id] - Comma separated list of job IDs up to a maximum of 100.
    * @param {String} [params.uuid] - Comma separated list of job UUIDs up to a maximum of 100.
    * @param {String} [params.toolId] - Tool ID executed by the job.
    * @param {String} [params.toolType] - Tool type executed by the job [OPERATION, ANALYSIS].
    * @param {String} [params.userId] - User that created the job.
    * @param {String} [params.priority] - Priority of the job.
    * @param {String} [params.status] - Filter by status.
    * @param {String} [params.internalStatus] - Filter by internal status.
    * @param {String} [params.creationDate] - Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
    * @param {String} [params.modificationDate] - Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
    * @param {Boolean} [params.visited] - Visited status of job.
    * @param {String} [params.tags] - Execution tags.
    * @param {String} [params.input] - Comma separated list of file IDs used as input.
    * @param {String} [params.output] - Comma separated list of file IDs used as output.
    * @param {String} [params.acl] - Filter entries for which a user has the provided permissions. Format: acl={user}:{permissions}.
    *     Example: acl=john:WRITE,WRITE_ANNOTATIONS will return all entries for which user john has both WRITE and WRITE_ANNOTATIONS
    *     permissions. Only study owners or administrators can query by this field. .
    * @param {String} [params.release] - Release when it was created.
    * @param {Boolean} [params.deleted = "false"] - Boolean to retrieve deleted entries. The default value is false.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    distinctJobs(field, params) {
        return this._get("executions", null, "jobs", null, "distinct", {field, ...params});
    }

    /** Job search method
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.include] - Fields included in the response, whole JSON path must be provided.
    * @param {String} [params.exclude] - Fields excluded in the response, whole JSON path must be provided.
    * @param {Number} [params.limit] - Number of results to be returned.
    * @param {Number} [params.skip] - Number of results to skip.
    * @param {Boolean} [params.count = "false"] - Get the total number of results matching the query. Deactivated by default. The default
    *     value is false.
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @param {Boolean} [params.otherStudies = "false"] - Flag indicating the entries being queried can belong to any related study, not just
    *     the primary one. The default value is false.
    * @param {String} [params.id] - Comma separated list of job IDs up to a maximum of 100.
    * @param {String} [params.uuid] - Comma separated list of job UUIDs up to a maximum of 100.
    * @param {String} [params.toolId] - Tool ID executed by the job.
    * @param {String} [params.toolType] - Tool type executed by the job [OPERATION, ANALYSIS].
    * @param {String} [params.userId] - User that created the job.
    * @param {String} [params.priority] - Priority of the job.
    * @param {String} [params.status] - Filter by status.
    * @param {String} [params.internalStatus] - Filter by internal status.
    * @param {String} [params.creationDate] - Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
    * @param {String} [params.modificationDate] - Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
    * @param {Boolean} [params.visited] - Visited status of job.
    * @param {String} [params.tags] - Execution tags.
    * @param {String} [params.input] - Comma separated list of file IDs used as input.
    * @param {String} [params.output] - Comma separated list of file IDs used as output.
    * @param {String} [params.acl] - Filter entries for which a user has the provided permissions. Format: acl={user}:{permissions}.
    *     Example: acl=john:WRITE,WRITE_ANNOTATIONS will return all entries for which user john has both WRITE and WRITE_ANNOTATIONS
    *     permissions. Only study owners or administrators can query by this field. .
    * @param {String} [params.release] - Release when it was created.
    * @param {Boolean} [params.deleted = "false"] - Boolean to retrieve deleted entries. The default value is false.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    searchJobs(params) {
        return this._get("executions", null, "jobs", null, "search", params);
    }

    /** Get job information
    * @param {String} jobs - Comma separated list of job IDs or UUIDs up to a maximum of 100.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.include] - Fields included in the response, whole JSON path must be provided.
    * @param {String} [params.exclude] - Fields excluded in the response, whole JSON path must be provided.
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @param {Boolean} [params.deleted = "false"] - Boolean to retrieve deleted jobs. The default value is false.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    infoJobs(jobs, params) {
        return this._get("executions", null, "jobs", jobs, "info", params);
    }

    /** Update some job attributes
    * @param {String} jobs - Comma separated list of job IDs or UUIDs up to a maximum of 100.
    * @param {Object} [data] - body.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.include] - Fields included in the response, whole JSON path must be provided.
    * @param {String} [params.exclude] - Fields excluded in the response, whole JSON path must be provided.
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @param {Boolean} [params.includeResult = "false"] - Flag indicating to include the created or updated document result in the response.
    *     The default value is false.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    updateJobs(jobs, data, params) {
        return this._post("executions", null, "jobs", jobs, "update", data, params);
    }

    /** Show the first lines of a log file (up to a limit)
    * @param {String} job - Job ID or UUID.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @param {Number} [params.offset] - Starting byte from which the file will be read.
    * @param {Number} [params.lines = "20"] - Maximum number of lines to be returned up to a maximum of 1000. The default value is 20.
    * @param {String} [params.type] - Log file to be shown (stdout or stderr).
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    headExecutionsJobsLog(job, params) {
        return this._get("executions/jobs", job, "log", null, "head", params);
    }

    /** Show the last lines of a log file (up to a limit)
    * @param {String} job - Job ID or UUID.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @param {Number} [params.lines = "20"] - Maximum number of lines to be returned up to a maximum of 1000. The default value is 20.
    * @param {String} [params.type] - Log file to be shown (stdout or stderr).
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    tailExecutionsJobsLog(job, params) {
        return this._get("executions/jobs", job, "log", null, "tail", params);
    }

    /** Execute a pipeline
    * @param {String} [pipelineId] - Pipeline id.
    * @param {Object} data - Execution params.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.study] - study.
    * @param {String} [params.jobId] - Execution ID. It must be a unique string within the study. An ID will be autogenerated automatically
    *     if not provided.
    * @param {String} [params.executionDependsOn] - Comma separated list of existing execution IDs the execution will depend on.
    * @param {String} [params.executionDescription] - Execution description.
    * @param {String} [params.executionTags] - Execution tags.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    runPipeline(pipelineId, data, params) {
        return this._post("executions", null, "pipeline", pipelineId, "run", data, params);
    }

    /** Relaunch a failed execution
    * @param {Object} data - job.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.executionId] - Execution ID. It must be a unique string within the study. An ID will be autogenerated
    *     automatically if not provided.
    * @param {String} [params.executionDescription] - Execution description.
    * @param {String} [params.executionDependsOn] - Comma separated list of existing execution IDs the execution will depend on.
    * @param {String} [params.executionTags] - Execution tags.
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    retry(data, params) {
        return this._post("executions", null, null, null, "retry", data, params);
    }

    /** Execution search method
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.include] - Fields included in the response, whole JSON path must be provided.
    * @param {String} [params.exclude] - Fields excluded in the response, whole JSON path must be provided.
    * @param {Number} [params.limit] - Number of results to be returned.
    * @param {Number} [params.skip] - Number of results to skip.
    * @param {Boolean} [params.count = "false"] - Get the total number of results matching the query. Deactivated by default. The default
    *     value is false.
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @param {Boolean} [params.otherStudies = "false"] - Flag indicating the entries being queried can belong to any related study, not just
    *     the primary one. The default value is false.
    * @param {String} [params.id] - Comma separated list of execution IDs up to a maximum of 100.
    * @param {String} [params.uuid] - Comma separated list of execution UUIDs up to a maximum of 100.
    * @param {String} [params.internalToolId] - Tool ID executed by the execution.
    * @param {String} [params.userId] - User that created the execution.
    * @param {String} [params.priority] - Priority of the execution.
    * @param {String} [params.internalStatus] - Filter by internal status.
    * @param {String} [params.creationDate] - Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
    * @param {String} [params.modificationDate] - Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
    * @param {Boolean} [params.visited] - Visited status of execution.
    * @param {Boolean} [params.isPipeline] - Filter by pipeline/not pipeline executions.
    * @param {String} [params.tags] - Execution tags.
    * @param {String} [params.acl] - Filter entries for which a user has the provided permissions. Format: acl={user}:{permissions}.
    *     Example: acl=john:WRITE,WRITE_ANNOTATIONS will return all entries for which user john has both WRITE and WRITE_ANNOTATIONS
    *     permissions. Only study owners or administrators can query by this field. .
    * @param {String} [params.release] - Release when it was created.
    * @param {Boolean} [params.deleted = "false"] - Boolean to retrieve deleted entries. The default value is false.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    search(params) {
        return this._get("executions", null, null, null, "search", params);
    }

    /** Provide a summary of the running executions
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {Number} [params.limit = "20"] - Maximum number of executions to be returned. The default value is 20.
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @param {String} [params.internalStatus] - Filter by internal status.
    * @param {String} [params.priority] - Priority of the execution.
    * @param {String} [params.userId] - User that created the execution.
    * @param {String} [params.internalToolId] - Tool ID executed by the execution.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    top(params) {
        return this._get("executions", null, null, null, "top", params);
    }

    /** Return the acl of the execution. If member is provided, it will only return the acl for the member.
    * @param {String} executions - Comma separated list of execution IDs or UUIDs up to a maximum of 100.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.member] - User or group id.
    * @param {Boolean} [params.silent = "false"] - Boolean to retrieve all possible entries that are queried for, false to raise an
    *     exception whenever one of the entries looked for cannot be shown for whichever reason. The default value is false.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    acl(executions, params) {
        return this._get("executions", executions, null, null, "acl", params);
    }

    /** Delete existing executions
    * @param {String} executions - Comma separated list of execution ids.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    delete(executions, params) {
        return this._delete("executions", executions, null, null, "delete", params);
    }

    /** Get execution information
    * @param {String} executions - Comma separated list of execution IDs or UUIDs up to a maximum of 100.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.include] - Fields included in the response, whole JSON path must be provided.
    * @param {String} [params.exclude] - Fields excluded in the response, whole JSON path must be provided.
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @param {Boolean} [params.deleted = "false"] - Boolean to retrieve deleted executions. The default value is false.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    info(executions, params) {
        return this._get("executions", executions, null, null, "info", params);
    }

    /** Update some execution attributes
    * @param {String} executions - Comma separated list of execution IDs or UUIDs up to a maximum of 100.
    * @param {Object} [data] - body.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.include] - Fields included in the response, whole JSON path must be provided.
    * @param {String} [params.exclude] - Fields excluded in the response, whole JSON path must be provided.
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @param {Boolean} [params.includeResult = "false"] - Flag indicating to include the created or updated document result in the response.
    *     The default value is false.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    update(executions, data, params) {
        return this._post("executions", executions, null, null, "update", data, params);
    }

}