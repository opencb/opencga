"""
WARNING: AUTOGENERATED CODE

    This code was generated by a tool.
    
    Manual changes to this file may cause unexpected behavior in your application.
    Manual changes to this file will be overwritten if the code is regenerated.
"""

from pyopencga.rest_clients._parent_rest_clients import _ParentRestClient


class Notification(_ParentRestClient):
    """
    This class contains methods for the 'Notifications' webservices
    PATH: /{apiVersion}/notifications
    """

    def __init__(self, configuration, token=None, login_handler=None, *args, **kwargs):
        super(Notification, self).__init__(configuration, token, login_handler, *args, **kwargs)

    def aggregation_stats(self, **options):
        """
        Fetch catalog notification stats.
        PATH: /{apiVersion}/notifications/aggregationStats

        :param str organization: Organization id.
        :param str uuid: Notification UUID.
        :param str type: Notification type: INFO, WARNING, ERROR or URGENT.
        :param str scope: Notification scope: GLOBAL, ORGANIZATION, PROJECT or
            STUDY.
        :param str fqn: Organization, project or study fqn where the
            notification is associated.
        :param str sender: User ID of the sender.
        :param str target: Target of the notification.
        :param str receiver: User ID receiver of the notification.
        :param str internal_status: Notification status: PENDING, SUCCESS,
            ERROR or DISCARDED.
        :param str creation_date: Creation date. Format: yyyyMMddHHmmss.
            Examples: >2018, 2017-2018, <201805.
        :param str modification_date: Modification date. Format:
            yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
        :param str field: Field to apply aggregation statistics to (or a list
            of fields separated by semicolons), e.g.:
            studies;type;numSamples[0..10]:1;format:sum(size).
        """

        return self._get(category='notifications', resource='aggregationStats', **options)

    def create(self, data=None, **options):
        """
        Create a new notification.
        PATH: /{apiVersion}/notifications/create

        :param dict data: JSON containing the notification information.
            (REQUIRED)
        """

        return self._post(category='notifications', resource='create', data=data, **options)

    def search(self, **options):
        """
        Notification search method.
        PATH: /{apiVersion}/notifications/search

        :param str include: Fields included in the response, whole JSON path
            must be provided.
        :param str exclude: Fields excluded in the response, whole JSON path
            must be provided.
        :param int limit: Number of results to be returned.
        :param int skip: Number of results to skip.
        :param bool count: Get the total number of results matching the query.
            Deactivated by default.
        :param str organization: Organization id.
        :param str uuid: Notification UUID.
        :param str type: Notification type: INFO, WARNING, ERROR or URGENT.
        :param str scope: Notification scope: GLOBAL, ORGANIZATION, PROJECT or
            STUDY.
        :param str fqn: Organization, project or study fqn where the
            notification is associated.
        :param str sender: User ID of the sender.
        :param str target: Target of the notification.
        :param str receiver: User ID receiver of the notification.
        :param str internal_status: Notification status: PENDING, SUCCESS,
            ERROR or DISCARDED.
        :param str creation_date: Creation date. Format: yyyyMMddHHmmss.
            Examples: >2018, 2017-2018, <201805.
        :param str modification_date: Modification date. Format:
            yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
        """

        return self._get(category='notifications', resource='search', **options)

    def info(self, notification, **options):
        """
        Return the notification information.
        PATH: /{apiVersion}/notifications/{notification}/info

        :param str notification: Notification UUID. (REQUIRED)
        :param str include: Fields included in the response, whole JSON path
            must be provided.
        :param str exclude: Fields excluded in the response, whole JSON path
            must be provided.
        :param str organization: Organization id.
        """

        return self._get(category='notifications', resource='info', query_id=notification, **options)

    def visit(self, notification, **options):
        """
        Mark a notification as visited.
        PATH: /{apiVersion}/notifications/{notification}/visit

        :param str notification: Notification UUID. (REQUIRED)
        :param str organization: Organization id.
        """

        return self._post(category='notifications', resource='visit', query_id=notification, **options)

