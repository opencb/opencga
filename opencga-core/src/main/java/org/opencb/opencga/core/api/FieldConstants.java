package org.opencb.opencga.core.api;

import org.opencb.opencga.core.models.alignment.AlignmentQcParams;
import org.opencb.opencga.core.models.variant.MutationalSignatureAnalysisParams;
import org.opencb.opencga.core.models.variant.SampleQcAnalysisParams;
import org.opencb.opencga.core.tools.variant.IndividualQcAnalysisExecutor;

public class FieldConstants {

    //Generic descriptions
    public static final String GENERIC_RELEASE_DESCRIPTION = "An integer describing the current data release.";
    public static final String GENERIC_UUID_DESCRIPTION = "Unique 32-character identifier assigned automatically by OpenCGA.";
    public static final String GENERIC_VERSION_DESCRIPTION = "Autoincremental version assigned to the registered entry. By default, "
            + "updates does not create new versions. To enable versioning, users must set the `incVersion` flag from the /update web "
            + "service when updating the document.";
    public static final String GENERIC_CREATION_DATE_DESCRIPTION = "Autogenerated date following the format YYYYMMDDhhmmss containing the "
            + "date when the entry was first registered.";
    public static final String GENERIC_MODIFICATION_DATE_DESCRIPTION = "Autogenerated date following the format YYYYMMDDhhmmss containing"
            + " the date when the entry was last modified.";
    public static final String GENERIC_DESCRIPTION_DESCRIPTION = "Users may provide a description for the entry.";
    public static final String GENERIC_ADDITIONAL_INFO_DESCRIPTION = "Dictionary that can be customised by users to store any additional "
            + "information users may require.";
    public static final String GENERIC_ATTRIBUTES_DESCRIPTION = "You can use this field to store any other information, "
            + "keep in mind this is not indexed so you cannot search by attributes.";

    public static final String GENERIC_PHENOTYPES_DESCRIPTION = "List of phenotypes .";
    public static final String GENERIC_QUALITY_CONTROL = "Contains different metrics to evaluate "
            + "the quality of the individual.";
    public static final String GENERIC_CUSTOM_STATUS = "Object to set a custom status.";
    public static final String GENERIC_INTERNAL = "Internal field to manage the object.";
    public static final String GENERIC_NAME = "Name of the .";
    public static final String GENERIC_ID_DESCRIPTION = "Object ID is a mandatory parameter when creating a new one, this ID cannot be"
            + " changed at the moment.";
    public static final String GENERIC_STATUS_DESCRIPTION = "Object status.";
    public static final String GENERIC_STATS = "Stats of the object.";
    //QualityControl
    public static final String QUALITY_CONTROL_FILES_DESCRIPTION = "File IDs related to the quality control.";
    public static final String QUALITY_CONTROL_COMMENTS_DESCRIPTION = "Comments related to the quality control.";

    // Organization
    public static final String ORGANIZATION_ID_DESCRIPTION = "Organization unique identifier.";
    public static final String ORGANIZATION_NAME_DESCRIPTION = "Organization name.";
    public static final String ORGANIZATION_DOMAIN_DESCRIPTION = "Organization domain. Example: 'zettagenomics.com'.";
    public static final String ORGANIZATION_OWNER_DESCRIPTION = "Owner of the organization.";
    public static final String ORGANIZATION_ADMINS_DESCRIPTION = "Administrative users of the organization.";
    public static final String ORGANIZATION_PROJECTS_DESCRIPTION = "Projects the organization holds.";
    public static final String ORGANIZATION_FEDERATION_DESCRIPTION = "Object containing any federated clients or servers.";
    public static final String ORGANIZATION_CREDENTIALS_DESCRIPTION = "List of credentials that may be used by the Organization.";
    public static final String ORGANIZATION_NOTES_DESCRIPTION = "Notes of organization scope.";
    //    public static final String ORGANIZATION_AUTHENTICATION_ORIGINS_DESCRIPTION = "Authentication origins used by the organization. This "
//            + "contains all the configuration necessary to be able to communicate with the external authentication origins.";
    public static final String ORGANIZATION_CONFIGURATION_DESCRIPTION = "Organization configuration information.";
    public static final String ORGANIZATION_INTERNAL_DESCRIPTION = "Organization internal information.";

    // Notes
    public static final String NOTES_ID_DESCRIPTION = "Note unique identifier.";
    public static final String NOTES_SCOPE_DESCRIPTION = "Scope of the Note.";
    public static final String NOTES_STUDY_DESCRIPTION = "Study FQN if the Note scope is STUDY.";
    public static final String NOTES_TYPE_DESCRIPTION = "Note type.";
    public static final String NOTES_TAGS_DESCRIPTION = "Note tags.";
    public static final String NOTES_USER_ID_DESCRIPTION = "User that wrote that Note.";
    public static final String NOTES_VISIBILITY_DESCRIPTION = "Visibility of the Note.";
    public static final String NOTES_VALUE_TYPE_DESCRIPTION = "Type of the value written in the Note.";
    public static final String NOTES_VALUE_DESCRIPTION = "Value stored in the Note.";

    public static final String NOTES_ID_PARAM = "id";
    public static final String NOTES_SCOPE_PARAM = "scope";
    public static final String NOTES_TYPE_PARAM = "type";
    public static final String NOTES_STUDY_PARAM = "study";
    public static final String NOTES_TAGS_PARAM = "tags";
    public static final String NOTES_USER_ID_PARAM = "userId";
    public static final String NOTES_VISIBILITY_PARAM = "visibility";

    //Federation
    public static final String FEDERATION_CLIENT_ID_DESCRIPTION = "Unique ID to identify the federation server.";
    public static final String FEDERATION_CLIENT_DESCRIPTION_DESCRIPTION = "Description of the federation server.";
    public static final String FEDERATION_CLIENT_VERSION_DESCRIPTION = "OpenCGA version of the federation server.";
    public static final String FEDERATION_CLIENT_EMAIL_DESCRIPTION = "Email of the federation server.";
    public static final String FEDERATION_CLIENT_URL_DESCRIPTION = "URL of the federation server.";
    public static final String FEDERATION_CLIENT_ORGANIZATION_ID_DESCRIPTION = "Organization ID from the federation server.";
    public static final String FEDERATION_CLIENT_USER_ID_DESCRIPTION = "User ID to access the federation server.";
    public static final String FEDERATION_CLIENT_PASSWORD_DESCRIPTION = "User password to access the federation server.";
    public static final String FEDERATION_CLIENT_TOKEN_DESCRIPTION = "Token to access the federation server.";
    public static final String FEDERATION_CLIENT_SECURITY_KEY_DESCRIPTION = "Security key auto-generated by the federation server.";

    public static final String FEDERATION_SERVER_ID_DESCRIPTION = "Unique ID to identify the federation client.";
    public static final String FEDERATION_SERVER_DESCRIPTION_DESCRIPTION = "Description of the federation client.";
    public static final String FEDERATION_SERVER_EMAIL_DESCRIPTION = "Contact email of the federation client.";
    public static final String FEDERATION_SERVER_USER_ID_DESCRIPTION = "User ID to be used by the federation client.";
    public static final String FEDERATION_SERVER_SECURITY_KEY_DESCRIPTION = "Security key shared with the federation client to gain access"
            + " to the server.";
    public static final String FEDERATION_SERVER_ACTIVE_DESCRIPTION = "Flag to indicate if the federation client account is active.";
    public static final String FEDERATION_SERVER_EXPIRATION_TIME_DESCRIPTION = "Expiration time of the federation client account.";

    //Sample
    public static final String SAMPLE_ID_DESCRIPTION = "Sample ID.";
    public static final String SAMPLE_PROCESSING_DESCRIPTION = "Describes how the sample was processed in the lab.";
    public static final String SAMPLE_SAMPLE_COLLECTION_DESCRIPTION = "Describes how the sample was collected.";
    public static final String SAMPLE_QUALITY_CONTROL_DESCRIPTION = "Contains different metrics to evaluate the quality of the sample.";
    public static final String SAMPLE_SOMATIC_DESCRIPTION = "Describes if the sample is somatic or not .";
    public static final String SAMPLE_INDIVIDUAL_ID_DESCRIPTION = "Individual id of the sample.";
    public static final String SAMPLE_FILE_IDS_DESCRIPTION = "File ids of the sample.";
    public static final String SAMPLE_COHORT_IDS_DESCRIPTION = "Cohort ids of the sample.";
    public static final String SAMPLE_INTERNAL_DESCRIPTION = "Sample internal information.";
    public static final String SAMPLE_EXTERNAL_SOURCE_DESCRIPTION = "The external source from where the example was imported.";

    //SampleProcessing
    public static final String SAMPLE_PROCESSING_PRODUCT_DESCRIPTION = "Describes which product was used to process the sample in the lab.";
    public static final String SAMPLE_PROCESSING_PREPARATION_METHOD = "Describes which preparation method was used to process the sample "
            + "in the lab.";
    public static final String SAMPLE_PROCESSING_EXTRACTION_METHOD = "Describes which extraction method was used to process the sample"
            + "in the lab.";
    public static final String SAMPLE_PROCESSING_LAB_SAMPLE_ID_DESCRIPTION = "Original id has the sample in the lab.";
    public static final String SAMPLE_PROCESSING_QUANTITY_DESCRIPTION = "Number of process has done the sample.";
    public static final String SAMPLE_PROCESSING_DATE_DESCRIPTION = "Date when the sample was processed in the lab.";
    public static final String SAMPLE_PROCESSING_ATTRIBUTES_DESCRIPTION = "Attributes of the processing.";

    //SampleCollection
    public static final String SAMPLE_COLLECTION_TISSUE_DESCRIPTION = "Describes the tissue of the sample collection.";
    public static final String SAMPLE_COLLECTION_QUANTITY_DESCRIPTION = "Quantity collected for the sample.";
    public static final String SAMPLE_COLLECTION_DATE_DESCRIPTION = "Date when the sample was collected.";
    public static final String SAMPLE_COLLECTION_ATTRIBUTES_DESCRIPTION = "Attributes of the sample collection.";
    public static final String SAMPLE_COLLECTION_METHOD_DESCRIPTION = "Describes which method was used to collect the sample.";
    public static final String SAMPLE_COLLECTION_FROM_DESCRIPTION = "OntologyTermAnnotation list.";
    public static final String SAMPLE_COLLECTION_TYPE_DESCRIPTION = "Type of the sample collection.";
    //SampleQualityControl
    public static final String SAMPLE_QUALITY_CONTROL_FILES_DESCRIPTION = "Files used for the quality control of the sample.";
    public static final String SAMPLE_QUALITY_CONTROL_COMMENTS_DESCRIPTION = "Comments for the quality control of the sample.";
    public static final String SAMPLE_QUALITY_CONTROL_VARIANT_DESCRIPTION = "Describes variant quality control.";
    public static final String SAMPLE_QUALITY_CONTROL_SKIP_DESCRIPTION = "Quality control metrics to skip. Valid values are: "
            + SampleQcAnalysisParams.VARIANT_STATS_SKIP_VALUE + ", " + SampleQcAnalysisParams.SIGNATURE_SKIP_VALUE + ", "
            + SampleQcAnalysisParams.SIGNATURE_CATALOGUE_SKIP_VALUE + ", " + SampleQcAnalysisParams.SIGNATURE_FITTING_SKIP_VALUE + ", "
            + SampleQcAnalysisParams.GENOME_PLOT_SKIP_VALUE;
    public static final String SAMPLE_QUALITY_CONTROL_OVERWRITE_DESCRIPTION = "Overwrite sample quality control in OpenCGA catalog.";

    //SampleVariantQualityControlMetrics
    public static final String SAMPLE_QUALITY_CONTROL_METRICS_VARIANT_STATS_DESCRIPTION = "Variant stats for the quality control of the"
            + " sample.";
    public static final String SAMPLE_QUALITY_CONTROL_METRICS_SIGNATURES_DESCRIPTION = "List of signature for the quality control of the"
            + " sample.";
    public static final String SAMPLE_QUALITY_CONTROL_METRICS_GENOME_PLOT_DESCRIPTION = "Genome plot for the quality control of the"
            + " sample.";
    public static final String SAMPLE_QUALITY_CONTROL_METRICS_HRDETEC_DESCRIPTION  = "List of HRDetect results for a given sample";
    public static final String SAMPLE_QUALITY_CONTROL_METRICS_FILES_DESCRIPTION = "File for the quality control metrics of the "
            + "sample.";

    //CustomStatus
    public static final String CUSTOM_STATUS_NAME_DESCRIPTION = "Name of the status.";
    public static final String INTERNAL_STATUS_DESCRIPTION = "Status of the internal object.";
    public static final String INTERNAL_REGISTRATION_DATE_DESCRIPTION = "Registration date of the internal object.";
    public static final String INTERNAL_LAST_MODIFIED_DESCRIPTION = "Date of the last modification of the internal object.";

    //SampleInternal
    public static final String SAMPLE_INTERNAL_RGA_DESCRIPTION = "Rga index for Sample internal.";

    //RgaIndex
    public static final String RGAINDEX_STATUS_DESCRIPTION = "Status of the Rga index NOT_INDEXED, INDEXED, INVALID_PERMISSIONS, "
            + "INVALID_METADATA, INVALID.";
    public static final String RGAINDEX_DATE_DESCRIPTION = "Date of Rga index.";

    //Location
    public static final String LOCATION_ADDRESS = "Location address.";
    public static final String LOCATION_COUNTRY = "Location country.";
    public static final String LOCATION_CITY = "Location city.";
    public static final String LOCATION_STATE = "Location state.";
    public static final String LOCATION_POSTAL_CODE = "Location postal code.";

    //Individual population
    public static final String INDIVIDUAL_POPULATION_NAME = "Name of the individual population.";
    public static final String INDIVIDUAL_POPULATION_SUBPOPULATION = "Subpopulation of the individual population.";
    public static final String INDIVIDUAL_POPULATION_DESCRIPTION = "Description of the individual population.";


    //Individual
    public static final String INDIVIDUAL_ID_DESCRIPTION = "Individual ID in the study, this must be unique in the "
            + "study but can be repeated in different studies. This is a mandatory parameter "
            + "when creating a new Individual, this ID cannot be changed at the moment.";
    public static final String INDIVIDUAL_NAME = "Name of the individual.";
    public static final String INDIVIDUAL_MOTHER = "Mother of the individual.";
    public static final String INDIVIDUAL_FATHER = "Father of the individual.";
    public static final String INDIVIDUAL_FAMILY_IDS = "List of ids of the family members.";
    public static final String INDIVIDUAL_LOCATION = "Location of the individual.";
    public static final String INDIVIDUAL_SEX = "Sex of the individual.";
    public static final String INDIVIDUAL_KARYOTYPIC_SEX = "Karyotypic sex of the individual.";
    public static final String INDIVIDUAL_ETHNICITY = "Ethnicity of the individual.";
    public static final String INDIVIDUAL_DATE_OF_BIRTH = "Date of birth of the individual.";
    public static final String INDIVIDUAL_LIFE_STATUS = "Life status of the of the individual "
            + "ALIVE, ABORTED, DECEASED, UNBORN, STILLBORN, MISCARRIAGE, UNKNOWN.";
    public static final String INDIVIDUAL_DISORDERS = "List of the individual disorders.";
    public static final String INDIVIDUAL_SAMPLES = "List of the individual samples.";
    public static final String INDIVIDUAL_PARENTAL_CONSANGUINITY = "Indicates the parental consanguinity is "
            + "true or false.";

    //Family
    public static final String FAMILY_ID_DESCRIPTION = "Family is a mandatory parameter when creating a new sample, this ID cannot be"
            + " changed at the moment.";
    public static final String FAMILY_NAME = "Family name.";
    public static final String FAMILY_MEMBERS = "List of individuals who are family members.";
    public static final String FAMILY_DISORDERS = "Family disorders.";
    public static final String FAMILY_EXPECTED_SIZE = "Family expected size.";
    public static final String FAMILY_ROLES = "Map of members ids and enum of roles (FATHER, MOTHER, IDENTICAL_TWIN, SON, UNCLE,"
            + " PATERNAL_GRANDFATHER.)  .";

    public static final String FAMILY_PEDIGREE_GRAPH = "Pedigree graph that includes the image in formats: Base64 and JSON";

    public static final String DISORDER_ID = "Disorder ID.";

    //FamilyQualityControl
    public static final String FAMILY_QUALITY_CONTROL_RELATEDNESS_DESCRIPTION = "Reports of family relationship.";


    // Individual quality control
    public static final String INDIVIDUAL_QC_INDIVIDUAL_ID_DESCRIPTION = "Individual ID";
    public static final String INDIVIDUAL_QC_SAMPLE_ID_DESCRIPTION = "Sample ID (required when the individual has multiple samples)";
    public static final String INFERRED_SEX_METHOD_DESCRIPTION = "Inferred sex method. Valid values: "
            + IndividualQcAnalysisExecutor.COVERAGE_RATIO_INFERRED_SEX_METHOD;
    public static final String INDIVIDUAL_QUALITY_CONTROL_INFERRED_SEX_REPORT_DESCRIPTION = "List of inferred sex reports, it depends on"
            + " the method (currently by coverage ratio).";
    public static final String INDIVIDUAL_QUALITY_CONTROL_SAMPLE_RELATEDNESS_REPORT_DESCRIPTION = "Reports of samples relatedness.";
    public static final String INDIVIDUAL_QUALITY_CONTROL_MENDELIAN_ERRORS_DESCRIPTION = "Mendelian errors.";


    //Status
    public static final String STATUS_DATE_DESCRIPTION = "Date has setted the status.";
    public static final String STATUS_MESSAGE_DESCRIPTION = "Deprecated: Message describing the status.";


    //Interpretation
    public static final String INTERPRETATION_STUDY_UID = "Study identifier.";
    public static final String INTERPRETATION_UID = "Interpretation identifier.";
    public static final String INTERPRETATION_PANELS = "Interpretation panel list.";

    //InterpretationInternal
    public static final String INTERPRETATION_INTERNAL_STATUS = "State of the interpretation that can have the values READY, "
            + "DELETED, NOT_REVIEWED, UNDER_REVIEW, REVIEWED and REJECTED.";

    //ClinicalAnalysis
    public static final String CLINICAL_ANALYSIS_ID_DESCRIPTION = "ClinicalAnalysis ID is a mandatory parameter when "
            + "creating a new ClinicalAnalysis, this ID cannot be changed at the moment.";
    public static final String CLINICAL_ANALYSIS_TYPE = "Enumeration of the diferent types of clinical analysis "
            + "SINGLE, FAMILY, CANCER, COHORT, AUTOCOMPARATIVE.";
    public static final String CLINICAL_ANALYSIS_DISORDER = "Disorder of the clinical analysis.";
    public static final String CLINICAL_ANALYSIS_FILES = "List of files (VCF, BAM and BIGWIG).";
    public static final String CLINICAL_ANALYSIS_PROBAND = "Individual proband of the clinical analysis.";
    public static final String CLINICAL_ANALYSIS_FAMILY = "Family of the clinical analysis.";
    public static final String CLINICAL_ANALYSIS_PANELS = "List of panels to the clinical analysis.";
    public static final String CLINICAL_ANALYSIS_PANEL_LOCK = "Boolean to set lock panels.";
    public static final String CLINICAL_ANALYSIS_LOCKED = "Boolean that indicates if the clinical analysis is locked or not.";
    public static final String CLINICAL_ANALYSIS_INTERPRETATION = "Interpretation of the clinical analysis.";
    public static final String CLINICAL_ANALYSIS_SECONDARY_INTERPRETATION = "List of Interpretations containing the second and consecutive.";
    public static final String CLINICAL_ANALYSIS_CONSENT = "Object contains consent annotations of clinical analysis.";
    public static final String CLINICAL_ANALYSIS_ANALYST = "The analysts of the clinical analysis.";
    public static final String CLINICAL_ANALYSIS_REPORT = "Report of the clinical analysis.";
    public static final String CLINICAL_ANALYSIS_REQUEST = "Request of the clinical analysis.";
    public static final String CLINICAL_ANALYSIS_RESPONSIBLE = "Responsible of the clinical analysis.";
    public static final String CLINICAL_ANALYSIS_PRIORITY = "Priority of the clinical analysis.";
    public static final String CLINICAL_ANALYSIS_FLAGS = "List of flags for the clinical analysis.";
    public static final String CLINICAL_ANALYSIS_DUE_DATE_DESCRIPTION = "Due date of the clinical analysis.";
    public static final String CLINICAL_ANALYSIS_COMMENTS = "List of Clinical Analysis comments.";
    public static final String CLINICAL_ANALYSIS_AUDIT = "List of Clinical Analysis audits.";

    //ClinicalConsentParam
    public static final String CLINICAL_CONSENT_PARAM_VALUE = "Value of the param that can have the values "
            + "YES, NO and UNKNOWN.";

    //ClinicalConsentAnnotation
    public static final String CLINICAL_CONSENT_ANNOTATION_CONSENTS = "List of ClinicalConsentParam.";
    public static final String CLINICAL_CONSENT_ANNOTATION_DATE = "Date of the ClinicalConsentAnnotation.";


    //ClinicalReport
    public static final String CLINICAL_REPORT_TITLE = "Report title.";
    public static final String CLINICAL_REPORT_OVERVIEW = "Report overview.";
    public static final String CLINICAL_REPORT_DISCUSSION = "Report discussion.";
    public static final String CLINICAL_REPORT_LOGO = "Report logo.";
    public static final String CLINICAL_REPORT_SIGNED_BY = "Indicates who has signed the report.";
    public static final String CLINICAL_REPORT_SIGNATURE = "Report signature.";
    public static final String CLINICAL_REPORT_DATE = "Report date.";
    public static final String CLINICAL_REPORT_COMMENTS = "Report comments.";
    public static final String CLINICAL_REPORT_SUPPORTING_EVIDENCES = "Report supporting evidences.";
    public static final String CLINICAL_REPORT_FILES = "Report files.";

    //ClinicalPriorityAnnotation
    public static final String CLINICAL_PRIORITY_ANNOTATION_RANK_DESCRIPTION = "ClinicalPriorityAnnotation rank.";
    public static final String CLINICAL_PRIORITY_DATE = "ClinicalPriorityAnnotation date.";
    //FlagAnnotation
    public static final String FLAG_ANNOTATION_DATE_DESCRIPTION = "FlagAnnotation date.";


    //ClinicalAnalysisQualityControl
    public static final String CLINICAL_ANALYSIS_QUALITY_CONTROL_COMMENTS = "List of ClinicalAnalysisQualityControl comments.";
    public static final String CLINICAL_ANALYSIS_QUALITY_CONTROL_SUMMARY = "ClinicalAnalysisQualityControl summary that can have the values "
            + "HIGH, MEDIUM, LOW, DISCARD, NEEDS_REVIEW, UNKNOWN.";
    public static final String CLINICAL_ANALYSIS_QUALITY_CONTROL_FILES = "List of ClinicalAnalysisQualityControl files.";

    //Cohort
    public static final String COHORT_TYPE = "Cohort type that can have the values CASE_CONTROL, CASE_SET, CONTROL_SET, PAIRED, "
            + "PAIRED_TUMOR, AGGREGATE, TIME_SERIES, FAMILY, TRIO and COLLECTION.";
    public static final String COHORT_SAMPLES = "List of cohort samples.";
    public static final String COHORT_NUM_SAMPLES = "Number of samples.";

    //File
    public static final String FILE_NAME = "The name of the file.";
    public static final String FILE_TYPE = "The type can have the values FILE or DIRECTORY.";
    public static final String FILE_FORMAT = "The format can have the values VCF, BCF, GVCF, TBI, BIGWIG, SAM, BAM, BAI, "
            + "CRAM, CRAI, FASTQ, FASTA, PED, TAB_SEPARATED_VALUES, COMMA_SEPARATED_VALUES, XML, PROTOCOL_BUFFER, JSON, AVRO, "
            + "PARQUET, IMAGE, PLAIN, BINARY, NONE and UNKNOWN.";
    public static final String FILE_BIOFORMAT = "The bioformat can have the values MICROARRAY_EXPRESSION_ONECHANNEL_AGILENT, "
            + "MICROARRAY_EXPRESSION_ONECHANNEL_AFFYMETRIX, MICROARRAY_EXPRESSION_ONECHANNEL_GENEPIX, "
            + "MICROARRAY_EXPRESSION_TWOCHANNELS_AGILENT, MICROARRAY_EXPRESSION_TWOCHANNELS_GENEPIX, DATAMATRIX_EXPRESSION, "
            + "IDLIST, IDLIST_RANKED, ANNOTATION_GENEVSANNOTATION, OTHER_NEWICK, OTHER_BLAST, OTHER_INTERACTION, OTHER_GENOTYPE, "
            + "OTHER_PLINK, OTHER_VCF, OTHER_PED, @Deprecated VCF4, VARIANT, ALIGNMENT, COVERAGE, SEQUENCE, PEDIGREE, "
            + "REFERENCE_GENOME, NONE and UNKNOWN.";
    public static final String FILE_CHECKSUM = "The checksum of the file.";
    public static final String FILE_PATH = "The path of the file.";
    public static final String FILE_URI = "The uri of the file.";
    public static final String FILE_EXTERNAL = "Indicates whether the file comes from an external path or not.";
    public static final String FILE_RESOURCE = "Indicates the file is treated as a resource.";
    public static final String FILE_SIZE = "The size of the file.";
    public static final String FILE_SOFTWARE = "Software related with file.";
    public static final String FILE_EXPERIMENT = "File experiment.";
    public static final String FILE_SAMPLE_IDS = "List of sample ids of the file.";
    public static final String FILE_JOB_ID = "File job id.";
    public static final String FILE_TAGS = "File tags.";
    public static final String FILE_RELATED_FILES = "List of objects FileRelatedFiles describing related files.";


    //ToolInfo
    public static final String TOOL_INFO_VERSION_DESCRIPTION = "Version of the tool to be executed.";
    public static final String TOOL_INFO_SCOPE_DESCRIPTION = "Tool info scope can have the values GLOBAL, PROJECT and STUDY.";
    public static final String TOOL_INFO_TYPE_DESCRIPTION = "Tool info type can have the values OPERATION and ANALYSIS.";
    public static final String TOOL_INFO_RESOURCE_DESCRIPTION = "Tool info resource can have the values AUDIT, USER, PROJECT, "
            + "STUDY, FILE, SAMPLE, JOB, INDIVIDUAL, COHORT, DISEASE_PANEL, FAMILY, CLINICAL_ANALYSIS, INTERPRETATION, "
            + "VARIANT, ALIGNMENT, CLINICAL, EXPRESSION, RGA and FUNCTIONAL.";
    public static final String TOOL_INFO_EXTERNAL_EXECUTOR_DESCRIPTION = "Object containing the id and version of the external tool that"
            + " is being executed.";

    // Workflow
    public static final String WORKFLOW_ID_DESCRIPTION = "Workflow ID.";
    public static final String WORKFLOW_NAME_DESCRIPTION = "Workflow name.";
    public static final String WORKFLOW_TYPE_DESCRIPTION = "Workflow type. Valid values: NEXTFLOW.";
    public static final String WORKFLOW_MANAGER_DESCRIPTION = "Workflow system corresponding to the workflow.";
    public static final String WORKFLOW_DRAFT_DESCRIPTION = "Flag indicating whether the workflow is still a draft or not.";
    public static final String WORKFLOW_REPOSITORY_DESCRIPTION = "Workflow repository image to execute. If any, providing a list of"
            + " scripts will not be mandatory.";
    public static final String WORKFLOW_SCRIPTS_DESCRIPTION = "List of scripts used by the Workflow.";
    public static final String WORKFLOW_TAGS_DESCRIPTION = "List of tags.";
    public static final String WORKFLOW_VARIABLES_DESCRIPTION = "List of variables accepted by the Workflow.";
    public static final String MINIMUM_REQUIREMENTS_DESCRIPTION = "Minimum requirements to execute the process.";
    public static final String WORKFLOW_INTERNAL_DESCRIPTION = "Workflow internal information.";

    public static final String MIN_REQUIREMENTS_CPU_DESCRIPTION = "Minimum number of cpu cores required to execute the process.";
    public static final String MIN_REQUIREMENTS_MEMORY_DESCRIPTION = "Minimum memory required to execute the process.";
    public static final String MIN_REQUIREMENTS_DISK_DESCRIPTION = "Minimum disk required to execute the process.";

    public static final String WORKFLOW_SYSTEM_ID_DESCRIPTION = "Workflow system id. Valid values: NEXTFLOW.";
    public static final String WORKFLOW_SYSTEM_VERSION_DESCRIPTION = "Workflow system version to use.";

    //FileInternal
    public static final String FILE_INTERNAL_STATUS_DESCRIPTION = "File status can have the values READY, DELETED, "
            + "TRASHED, STAGE, MISSING, PENDING_DELETE, DELETING, REMOVED and MISSING_SAMPLES.";
    public static final String FILE_INTERNAL_ALIGNMENT_DESCRIPTION = "File internal alignment.";
    public static final String FILE_INTERNAL_VARIANT_DESCRIPTION = "File internal variant.";

    //FileIndex
    public static final String FILE_INDEX_USER_ID_DESCRIPTION = "Index user id.";
    public static final String FILE_INDEX_STATUS_DESCRIPTION = "File status can have the values READY, DELETED, NONE, "
            + "TRANSFORMED, TRANSFORMING, LOADING and INDEXING \n"
            + "         \n"
            + "   NONE --> TRANSFORMING --> TRANSFORMED --> LOADING --> READY\n"
            + "       \\                                              /\n"
            + "         ------------------> INDEXING ----------------/.";

    public static final String FILE_INDEX_JOB_ID_DESCRIPTION = "Index job id.";
    public static final String FILE_INTERNAL_SAMPLE_MAP_DESCRIPTION = "Map of samples.";
    public static final String FILE_INTERNAL_MISSING_SAMPLE_DESCRIPTION = "Object describes missing samples.";

    //MissingSamples
    public static final String MISSING_SAMPLE_EXISTING_DESCRIPTION = "List of existing samples.";
    public static final String MISSING_SAMPLE_NON_EXISTING_DESCRIPTION = "List of non existing samples.";

    //Panel
    public static final String PANEL_VERSION_DESCRIPTION = "OpenCGA version of this panel, this is incremented when the panel is updated.";
    public static final String PANEL_AUTHOR_DESCRIPTION = "Author of the panel.";
    public static final String PANEL_STATUS_DESCRIPTION = "Panel status can have the values READY or DELETED.";
    public static final String PANEL_STUDY_UID_DESCRIPTION = "Panel reference to study.";
    //JobInternal
    public static final String JOB_INTERNAL_STATUS_DESCRIPTION = "Job internal status can have the values PENDING, QUEUED, RUNNING, DONE, "
            + "ERROR, UNKNOWN, REGISTERING, UNREGISTERED, ABORTED, DELETED.";
    public static final String JOB_INTERNAL_EVENTS_DESCRIPTION = "Events of the internal job.";
    public static final String JOB_INTERNAL_WEBHOOK_DESCRIPTION = "Job internal Webhook.";
    public static final String JOB_INTERNAL_KILL_JOB_REQUESTED_DESCRIPTION = "Flag used to track whether a user has requested to"
            + " terminate the execution of a job before its natural completion. When set to true, it indicates that a request has been"
            + " made to prematurely terminate the ongoing job execution. Its value is typically checked periodically during the"
            + " execution of the job to determine if termination is necessary.";

    //JobInternalWebhook
    public static final String JOB_INTERNAL_WEBHOOK_URL_DESCRIPTION = "Webhook URL.";
    public static final String JOB_INTERNAL_WEBHOOK_STATUS_DESCRIPTION = "Webhook status map can have the values SUCCESS or ERROR.";

    public static final String JOB_PARENT_ID = "jobParentId";
    public static final String JOB_SCHEDULED_START_TIME = "jobScheduledStartTime";

    public static final String JOB_OUT_DIR_DESCRIPTION = "Output dir for the job.";
    public static final String JOB_INPUT_DESCRIPTION = "List of input files.";
    public static final String JOB_OUTPUT_DESCRIPTION = "List of output files.";
    public static final String JOB_TAGS_DESCRIPTION = "List of tags for the job.";
    public static final String JOB_DEPENDS_ON_DESCRIPTION = "List of jobs the current job depends on.";
    public static final String JOB_PARENT_ID_DESCRIPTION = "Id of the job that generated this job (if any)";
    public static final String JOB_SCHEDULED_START_TIME_DESCRIPTION = "Time when the job is scheduled to start.";
    public static final String JOB_EXECUTION_DESCRIPTION = "Result of the execution.";

    //ExecutorInfo
    public static final String EXECUTION_INFO_CLASS_DESCRIPTION = "ExecutorInfo class.";
    public static final String EXECUTION_INFO_PARAMS_DESCRIPTION = "ExecutorInfo params.";
    public static final String EXECUTION_INFO_SOURCE_DESCRIPTION = "Executor info source can have the values FILE, PARQUET_FILE, "
            + "MONGODB,  HBASE, STORAGE.";
    public static final String EXECUTION_INFO_FRAMEWORK_DESCRIPTION = "Executor info framework can have the values LOCAL, MAP_REDUCE, SPARK.";

    //ExecutionResult
    public static final String EXECUTION_RESULT_EXECUTION_INFO = "Object describes execution information.";
    public static final String EXECUTION_RESULT_START = "Date the execution started.";
    public static final String EXECUTION_RESULT_END = "Date the execution was completed.";
    public static final String EXECUTION_RESULT_STATUS = "Executor status can have the values PENDING, RUNNING, DONE and ERROR.";
    public static final String EXECUTION_RESULT_DEPENDENCIES = "List of tool dependencies used during the execution.";
    public static final String EXECUTION_RESULT_EXTERNAL_FILES = "List of uris to the external files.";
    public static final String EXECUTION_RESULT_STEPS = "List of ToolStep.";
    public static final String EXECUTION_RESULT_EVENTS = "List of Event.";

    //Job
    public static final String JOB_TYPE = "Job type indicating the origin of the tool that will be run.";
    public static final String JOB_TOOL = "Job tool info.";
    public static final String JOB_USER_ID = "Job user id.";
    public static final String JOB_COMMAND_LINE = "Job command line.";
    public static final String JOB_PARAMS = "Job params.";
    public static final String JOB_PRIORITY_DESCRIPTION = "Job priority.";
    public static final String JOB_STDOUT_DESCRIPTION = "Standard out file.";
    public static final String JOB_STDERR_DESCRIPTION = "Standard error file.";
    public static final String JOB_VISITED = "Boolean that represents if the job has been visited or not.";
    public static final String JOB_STUDY = "Job study.";
    public static final String JOB_STUDY_PARAM_OTHERS = "List of strings.";

    // Analysis configuration
    public static final String CONFIGURATION_ANALYSIS_OPERATIONS = "Object containing the configuration of several analysis operations.";

    // Analysis Operation configuration
    public static final String VARIANT_ANNOTATION_INDEX_OPERATION_CONFIGURATION = "Operation execution configuration for the variant"
            + " annotation index tool.";
    public static final String VARIANT_SECONDARY_ANNOTATION_INDEX_OPERATION_CONFIGURATION = "Operation execution configuration for the"
            + " variant secondary annotation index tool.";;
    public static final String VARIANT_SECONDARY_SAMPLE_INDEX_OPERATION_CONFIGURATION = "Operation execution configuration for the variant"
            + " secondary sample index tool.";

    // OperationExecutionConfig
    public static final String OPERATION_EXECUTION_CONFIG_POLICY = "The policy parameter determines when an automatic tool will run."
            + " There are three options for this setting:\n"
            + "IMMEDIATE means the tool will run automatically as soon as it is needed, ensuring prompt execution.\n"
            + "NIGHTLY means the tool will run automatically when necessary but only between 24:00 and 5:00, reducing disruptions during"
            + " peak hours.\n"
            + "NEVER means the tool will not run automatically and will require manual initiation, giving users full control over when it" +
            " operates.\n"
            + "By setting this parameter, users can choose the most appropriate timing for the tool's execution based on their needs.";
    public static final String OPERATION_EXECUTION_CONFIG_MAX_ATTEMPTS = "The maxAttempts parameter establishes the maximum number of times"
            + " the automatic process will attempt to launch the tool in the event of a failure. This setting ensures that the tool will"
            + " make multiple attempts to run successfully, up to the specified limit, before ceasing further attempts."
            + " By configuring this parameter, users can control the resilience of the tool's execution process in response to failures.";
    public static final String OPERATION_EXECUTION_CONFIG_JOB_PARAMS = "The jobParams parameter contains the job parameters required for"
            + " the tool to run. This parameter ensures that all necessary configurations and values are predefined, enabling the tool"
            + " to operate correctly without needing additional input each time it is executed. By setting this parameter, users can"
            + " streamline the tool's execution process and ensure consistency in its operation..";

    //Project
    public static final String PROJECT_FQN = "Full Qualified Name (organization@projectId).";
    public static final String PROJECT_ORGANISM = "Organism to which the project belongs.";
    public static final String PROJECT_FEDERATION = "Object containing federation details if the project is not local.";
    public static final String PROJECT_STUDIES = "Project study list.";

    //ProjectInternal
    public static final String PROJECT_INTERNAL_DATA_STORES = "Default value is VARIANT.";
    public static final String PROJECT_INTERNAL_VARIANT = "Variant index statuses.";
    public static final String PROJECT_INTERNAL_FEDERATED = "Flag indicating if the project is imported from a federated installation.";
    public static final String PROJECT_CELLBASE = "Cellbase configuration.";

    // ProjectInternalVariant
    public static final String INTERNAL_VARIANT_ANNOTATION_INDEX = "Project internal variant containing the current status of the"
            + " variant annotation index.";
    public static final String INTERNAL_VARIANT_SECONDARY_ANNOTATION_INDEX = "Project internal variant containing the current status of the"
            + " variant secondary annotation index.";

    // StudyInternalVariant
    public static final String INTERNAL_VARIANT_SECONDARY_SAMPLE_INDEX = "Study internal variant containing the current status of the"
            + " variant secondary sample index.";

    //StudyNotification
    public static final String STUDY_NOTIFICATION_WEBHOOK = "Url of the study notification.";

    //Study
    public static final String STUDY_ALIAS = "Study alias.";
    public static final String STUDY_SIZE = "Study size.";
    public static final String STUDY_FEDERATION = "Object containing federation details if the study is not local.";
    public static final String STUDY_NOTIFICATION = "Object represents study notification.";
    public static final String STUDY_GROUPS = "A List with related groups.";
    public static final String STUDY_FILES = "A List with related files.";
    public static final String STUDY_JOBS = "A List with related jobs.";
    public static final String STUDY_INDIVIDUALS = "A List with related individuals.";
    public static final String STUDY_FAMILIES = "A List with related families.";
    public static final String STUDY_SAMPLES = "A List with related samples.";
    public static final String STUDY_COHORTS = "A List with related cohorts.";
    public static final String STUDY_PANELS = "A List with related panels.";
    public static final String STUDY_ANALYSES = "A List with related clinicalAnalyses.";
    public static final String STUDY_VARIABLE_SETS = "A List with related variableSets.";
    public static final String STUDY_PERMISSION_RULES = "A map with related permission rules.\n"
            + "The key of the map can have the values SAMPLES, FILES, COHORTS, INDIVIDUALS, FAMILIES, "
            + "JOBS, CLINICAL_ANALYSES and DISEASE_PANELS. The value is a List of permission rules ";
    public static final String STUDY_URI = "Study uri";
    public static final String STUDY_EXTERNAL_SOURCES = "A List with related external sources.";
    public static final String STUDY_NOTES_DESCRIPTION = "Notes of scope=STUDY.";
    public static final String STUDY_TYPE = "Study type description";

    //PermissionRule
    public static final String PERMISSION_RULE_QUERY = "PermissionRule query.";
    public static final String PERMISSION_RULE_MEMBERS = "List of members of the permission rule.";
    public static final String PERMISSION_RULE_PERMISSIONS = "List of permissions of the permission rule.";

    //StudyInternal
    public static final String STUDY_INTERNAL_INDEX = "Study index.";
    public static final String STUDY_INTERNAL_FEDERATED = "Flag indicating if the study is imported from a federated installation.";
    public static final String STUDY_INTERNAL_CONFIGURATION = "Study configuration.";
    public static final String STUDY_INTERNAL_VARIANT = "Variant index statuses.";

    //AdditionalInfo
    public static final String ADDITIONAL_INFO_TYPE = "Type of the additional info.";

    //User
    public static final String USER_NAME = "User name.";
    public static final String USER_EMAIL = "User email.";
    public static final String USER_ORGANIZATION = "User organization.";
    public static final String USER_ACCOUNT = "User account.";

    //Account
    public static final String INTERNAL_ACCOUNT_EXPIRATION_DATE_DESCRIPTION = "Date the account expires.";
    public static final String INTERNAL_ACCOUNT_FAILED_ATTEMPTS_DESCRIPTION = "Number of consecutive failed attempts. When the user logs"
            + " in successfully, this field is automatically reset to 0.";
    public static final String INTERNAL_ACCOUNT_PASSWORD_DESCRIPTION = "Object containing the last time the password was changed and the"
            + " expiration date.";
    public static final String INTERNAL_ACCOUNT_PASSWORD_LAST_MODIFIED_DESCRIPTION = "Date the user's password was last changed. This "
            + "field will be null if the user account origin is different from OpenCGA.";
    public static final String INTERNAL_ACCOUNT_PASSWORD_EXPIRATION_DATE_DESCRIPTION = "Date the user's password expires. This field will"
            + " be null if the user account origin is different from OpenCGA and the passwordExpiration feature is disabled.";
    public static final String INTERNAL_ACCOUNT_AUTHENTICATION = "How the account is authenticated";
    public static final String USER_QUOTA = "User quota";
    public static final String USER_PROJECTS = "A List with related projects.";
    public static final String USER_SHARED_PROJECTS = "A List with shared projects.";
    public static final String USER_CONFIGS = "User configurations";
    public static final String USER_FILTERS = "A List with related filters.";

    //UserFilter
    public static final String USER_FILTER_RESOURCE_DESCRIPTION = "User resource can have the values AUDIT, USER, PROJECT, "
            + "STUDY, FILE, SAMPLE, JOB, INDIVIDUAL, COHORT, DISEASE_PANEL, FAMILY, CLINICAL_ANALYSIS, INTERPRETATION, "
            + "VARIANT, ALIGNMENT, CLINICAL, EXPRESSION, RGA and FUNCTIONAL.";
    public static final String USER_FILTER_QUERY = "User filter query";
    public static final String USER_FILTER_QUERY_OPTIONS = "User filter query options";


    // Mutational signature (sample-qc-run, mutationsl-signature-run, mutational-signature-query)
    public static final String MUTATIONAL_SIGNATURE_ID_DESCRIPTION = "Signature ID.";
    public static final String MUTATIONAL_SIGNATURE_DESCRIPTION_DESCRIPTION = "Signature description.";
    public static final String MUTATIONAL_SIGNATURE_SAMPLE_DESCRIPTION = "Sample.";
    public static final String MUTATIONAL_SIGNATURE_QUERY_DESCRIPTION = "Signature query in JSON format, e.g: \"\"{\\\"sample\\\":"
            + "\\\"NR123456_T\\\", \\\"fileData\\\": \\\"NR.123456_T_vs_NR.1234567_G.annot.vcf.gz:FILTER=PASS;CLPM<=0;ASMD>=140\\\"}\".";
    public static final String MUTATIONAL_SIGNATURE_CATALOGUES_DESCRIPTION = "File name containing mutational catalogues. Each sample"
            + " catalogue is in a column, with sample names as column headers and channel.";
    public static final String MUTATIONAL_SIGNATURE_CATALOGUES_CONTENT_DESCRIPTION = "Mutational catalogues. Each sample catalogue is in a"
            + " column, with sample names as column headers and channel.";
    public static final String MUTATIONAL_SIGNATURE_FIT_ID_DESCRIPTION = "Fiiting signature ID";
    public static final String MUTATIONAL_SIGNATURE_FIT_METHOD_DESCRIPTION = "Either Fit or FitMS. If not specified then FitMS";
    public static final String MUTATIONAL_SIGNATURE_FIT_N_BOOT_DESCRIPTION = "Number of bootstrap to be used.";
    public static final String MUTATIONAL_SIGNATURE_FIT_SIG_VERSION_DESCRIPTION = "Either COSMICv2, COSMICv3.2, RefSigv1 or RefSigv2."
            + " If not specified RefSigv2.";
    public static final String MUTATIONAL_SIGNATURE_FIT_ORGAN_DESCRIPTION = "When using RefSigv1 or RefSigv2 as SIGVERSION, organ-specific"
            + " signatures will be used. If SIGVERSION is COSMICv2 or COSMICv3.2, then a selection of signatures found in the given organ"
            + " will be used. Available organs depend on the selected SIGVERSION. For RefSigv1 or RefSigv2: Biliary, Bladder,"
            + " Bone_SoftTissue, Breast, Cervix (v1 only), CNS, Colorectal, Esophagus, Head_neck, Kidney, Liver, Lung, Lymphoid, NET"
            + " (v2 only), Oral_Oropharyngeal (v2 only), Ovary, Pancreas, Prostate, Skin, Stomach, Uterus.";
    public static final String MUTATIONAL_SIGNATURE_FIT_THRESHOLD_PERC_DESCRIPTION = "Threshold in percentage of total mutations in a"
            + " sample, only exposures larger than THRPERC are considered. If not specified 5.";
    public static final String MUTATIONAL_SIGNATURE_FIT_THRESHOLD_PVAL_DESCRIPTION = "P-value to determine the empirical probability that"
            + " the exposure is lower than the threshold. If not specified then 0.05.";
    public static final String MUTATIONAL_SIGNATURE_FIT_MAX_RARE_SIGS_DESCRIPTION = "Maximum number of rare signatures that are allowed to"
            + " be present in each sample. If not specified 1.";
    public static final String MUTATIONAL_SIGNATURE_FIT_SIGNATURES_FILE_DESCRIPTION = "The file name containing mutational signatures. Each"
            + " signature is in a column, with signature names as column hearders and channel names as row names in the first column with"
            + " no header. Each column must sum to 1. Use only to provide your own signatures. When fitmethod=FitMS, these signatures are"
            + " considered common signatures.";
    public static final String MUTATIONAL_SIGNATURE_FIT_RARE_SIGNATURES_FILE_DESCRIPTION = "The file name containing mutational signatures."
            + " Each signature is in a column, with signature names as column hearders and channel names as row names in the first column"
            + " with no header. Each column must sum to 1. Use only to provide your own signatures. When fitmethod=FitMS, these signatures"
            + " are considered rare signatures.";
    public static final String MUTATIONAL_SIGNATURE_SKIP_DESCRIPTION = "To skip to compute catalogue counts or the signature fitting. Use "
            + " the following keywords: " + MutationalSignatureAnalysisParams.SIGNATURE_CATALOGUE_SKIP_VALUE + ", "
            + MutationalSignatureAnalysisParams.SIGNATURE_FITTING_SKIP_VALUE + ".";

    // HRDetect analysis
    public static final String HRDETECT_ID_DESCRIPTION = "ID to identify the HRDetect results.";
    public static final String HRDETECT_DESCRIPTION_DESCRIPTION = "Decription for these particular HRDetect results.";
    public static final String HRDETECT_SNV_FITTING_ID_DESCRIPTION = "Mutational signature fitting ID for SNV.";
    public static final String HRDETECT_SV_FITTING_ID_DESCRIPTION = "Mutational signature fitting ID for SV.";
    public static final String HRDETECT_CNV_QUERY_DESCRIPTION = "CNV query";
    public static final String HRDETECT_INDEL_QUERY_DESCRIPTION = "INDEL query";
    public static final String HRDETECT_SNV3_CUSTOM_NAME_DESCRIPTION = "Custom signature name that will be considered as SNV3 input for"
            + " HRDetect.";
    public static final String HRDETECT_SNV8_CUSTOM_NAME_DESCRIPTION = "Custom signature name that will be considered as SNV8 input for"
            + " HRDetect.";
    public static final String HRDETECT_SV3_CUSTOM_NAME_DESCRIPTION = "Custom signature name that will be considered as SV3 input for"
            + " HRDetect.";
    public static final String HRDETECT_SV8_CUSTOM_NAME_DESCRIPTION = "Custom signature name that will be considered as SV8 input for"
            + " HRDetect.";
    public static final String HRDETECT_BOOTSTRAP_DESCRIPTION = "Request HRDetect with bootstrap.";

    // Genome plot (sample-qc-run)
    public static final String GENOME_PLOT_ID_DESCRIPTION = "Genome plot ID.";
    public static final String GENOME_PLOT_DESCRIPTION_DESCRIPTION = "Genome plot description.";
    public static final String GENOME_PLOT_CONFIGURATION_FILE_DESCRIPTION = "Genome plot configuration file.";

    // Variant stats (sample-qc-run)
    public static final String VARIANT_STATS_ID_DESCRIPTION = "Variant stats ID.";
    public static final String VARIANT_STATS_DESCRIPTION_DESCRIPTION = "Variant stats description.";
    public static final String VARIANT_STATS_QUERY_DESCRIPTION = "Variant stats query in JSON format.";

    // Alignment index parameter descriptions
    public static final String ALIGNMENT_INDEX_FILE_ID_DESCRIPTION = "File ID, (i.e., BAM/CRAM file ID).";
    public static final String ALIGNMENT_INDEX_OVERWRITE_DESCRIPTION = "Flag to force indexing.";

    // Alignment index and coverage
    public static final String ALIGNMENT_BAM_FILE_ID_DESCRIPTION = "Alignment file ID (in BAM or CRAM format)";
    public static final String ALIGNMENT_WINDOW_SIZE_DESCRIPTION = "Bin size for the output of the BIGWIG file, in bases.";
    public static final String ALIGNMENT_OVERWRITE_DESCRIPTION = "Flag to force indexing.";

    // Alignment QC analysis (alignment-qc-run)
    public static final String ALIGNMENT_QC_BAM_FILE_DESCRIPTION = "ID for the BAM file to process.";
    public static final String ALIGNMENT_QC_SKIP_DESCRIPTION = "To skip any alignment QC metrics use the following keywords (separated by"
            + " commas): " + AlignmentQcParams.STATS_SKIP_VALUE + ", " + AlignmentQcParams.FLAGSTATS_SKIP_VALUE + ", "
            + AlignmentQcParams.FASTQC_METRICS_SKIP_VALUE;
    public static final String ALIGNMENT_QC_OVERWRITE_DESCRIPTION = "To overwrite the QC metrics already computed.";

    // Exomiser
    public static final String EXOMISER_CLINICAL_ANALYSIS_DESCRIPTION = "Clinical analysis ID to be analysed.";
    public static final String EXOMISER_SAMPLE_DESCRIPTION = "Sample ID to be analysed.";
    public static final String EXOMISER_CLINICAL_ANALYSIS_TYPE_DESCRIPTION = "Clinical analysis type: SINGLE or FAMILY.";
    public static final String EXOMISER_VERSION_DESCRIPTION = "Exomiser version, e.g.: 14.0.0. If the version is not specified,"
            + " the default version will be used. Refer to the configuration file to view all installed Exomiser versions and identify the"
            + " default version.";

    // Liftover
    public static final String LIFTOVER_GRCH38 = "GRCh38";
    public static final String LIFTOVER_HG38 = "hg38";
    public static final String SAME_AS_INPUT_VCF = "SAME_AS_INPUT_VCF";
    public static final String LIFTOVER_FILES_DESCRIPTION = "List of VCF files to lift over";
    public static final String LIFTOVER_TARGET_ASSEMBLY_DESCRIPTION = "Target assembly for lift over. Valid values: " + LIFTOVER_GRCH38
            + " (for Ensembl) or " + LIFTOVER_HG38 + " (for NCBI)";
    public static final String LIFTOVER_VCF_DESTINATION_DESCRIPTION = "Destination path where the lifted-over VCF files will be stored."
            + " If left empty, the VCF files will be stored in the job folder. If the keyword " + SAME_AS_INPUT_VCF
            + " is used, then VCF files be stored in the same folder as the input VCF files. Otherwise, they will be stored in the specified"
            + " destination path";

    // Fetch resources
    public static final String FETCH_RESOURCES_DESCRIPTION = "List of resource IDs, separated by commas, to fetch (available resources are"
            + " specified in the configuration file). The wildcard '*' can be used: for example, use '*' to fetch all resources, or"
            + " 'EXOMISER_*' to fetch only Exomiser resources.";
}
